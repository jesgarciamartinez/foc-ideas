{"version":3,"sources":["components/DocsCard/DocsCard.tsx","components/Editor.tsx","components/EditableText.tsx","components/Sidebar.tsx","components/FlowCard.tsx","components/CardHStack.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","theme.ts","index.tsx","components/TypeBadge.tsx","components/DocsCard/components.tsx","state.ts","components/PopoverExplanation.tsx"],"names":["hasCommandModifier","KeyBindingUtil","useCallback","React","autocompleteKeyBindingFn","e","key","getDefaultKeyBinding","defaultName","typeSuggestions","title","safeEval","s","eval","error","getParamsAndReturns","split","arrow","map","type","trim","isSignatureCorrect","paramsAndReturns","length","every","p","includes","getFilteredTypeSuggestions","typeSuggestions_","inputValue","undefined","some","matchSorter","keys","getFilteredFunctions","functions","typeToName","x","n","suffix","getParamNames","arr","result","alreadySeenTypes","forEach","iType","paramName","push","findWithRegex","regex","contentBlock","callback","matchArr","start","text","getText","exec","index","signatureDecorator","CompositeDecorator","strategy","cb","contentState","RegExp","join","component","props","typeAsString","decoratedText","children","as","HANDLE_REGEX","getStateValueFromFunc","descriptionDecorator","func","name","signature","EditorState","createWithContent","ContentState","createFromText","parameters","concat","returns","description","code","fn","toString","setOriginalState","originalState","state","newOriginalState","signatureString","getCurrentContent","getPlainText","descriptionString","current","DocsCard","dispatch","navigationType","rest","variant","color","fontSize","fontStyle","style","direction","unicodeBidi","data-offset-key","offsetKey","onClick","openerIndex","fnName","slice","setState","previousFunc","setPreviousFunc","closeButtonRef","scrollIntoView","behavior","onChangeName","nameFontStyle","nameColor","descriptionHasText","hasText","descriptionFontStyle","descriptionColor","onChangeDescription","window","requestAnimationFrame","selection","getSelection","rangeCount","stateSelection","block","getBlockForKey","getStartKey","getHasFocus","getEntityAt","getStartOffset","console","log","wholeWordText","getRangeAt","startContainer","textContent","lastIndexOf","substring","tempRange","cloneRange","setStart","rangeRect","getBoundingClientRect","left","bottom","top","startIndex","selectedIndex","setAutocompleteDescription","autocompleteDescription","filteredFunctions","descriptionEditorRef","handleDescriptionKeyCommand","command","clickIndex","filteredSuggestions","blur","currentSelectionState","anchorOffset","getAnchorOffset","anchorKey","getAnchorKey","currentContent","blockText","textToInsert","entityKey","createEntity","getLastCreatedEntityKey","mentionTextSelection","merge","focusOffset","insertingContent","Modifier","replaceText","editorStateWithEntity","signatureEditorRef","signatureEditorParentRef","coordsSignatureEditor","onChangeSignatureEditor","newEditorState","getLastChangeType","getFirstBlock","newText","endsWith","previousMeaningfulCharIsArrow","replace","trimEnd","previousCharIsClosingBracket","substr","moveFocusToEnd","range","editorParent","coords","setAutocompleteSignature","autocompleteSignature","params","paramNames","editorValue","signatureError","hasChanges","onClearButtonClick","backgroundColor","padding","minHeight","display","flexDirection","paddingLeft","alignItems","fadeIn","validParams","pop","function","disabled","aria-label","icon","size","ref","sx","scrollMarginRight","marginTop","droppableId","provided","snapshot","innerRef","droppableProps","flex","height","overflow","paddingX","paddingY","value","onChange","placeholder","textColor","marginBottom","width","_focus","outline","editorState","keyBindingFn","handleKeyCommand","className","functionSuggestions","_","v","onChangeCode","Editor","language","theme","options","minimap","enabled","lineNumbers","EditableText","forwardRef","FunctionItem","wrap","_hover","rounded","flexWrap","i","TypeBadge","ArrowForward","marginX","getFunctionRenderItem","rubric","draggableProps","dragHandleProps","useTreeItemStyles","makeStyles","root","content","cursor","FunctionTreeItem","TreeItem","classes","isAnyItemDragging","nodeId","label","renderClone","isDropDisabled","shouldRenderClone","draggingFromThisWith","draggableId","TypeTreeItem","Sidebar","items","searchValue","useTheme","colors","unison","purple","lightPurple","aqua","isHoveringSearch","setIsHoveringSearch","isFocusedSearch","setFocusedSearch","onMouseEnterSearch","onMouseLeaveSearch","paddingTop","whiteSpace","onMouseEnter","onMouseLeave","pointerEvents","Search","borderBottomColor","focusBorderColor","borderRadius","borderTop","borderLeft","borderRight","borderBottom","onFocus","setSelectionRange","onBlur","target","background","position","right","PopoverExplanation","TreeView","selected","defaultCollapseIcon","ChevronDown","defaultExpandIcon","ChevronRight","onNodeFocus","draggable","document","querySelector","querySelectorAll","classList","remove","div","parentElement","li","parentMenu","previous","previousElementSibling","next","nextElementSibling","bound","MouseTrap","bind","focus","add","item","fontWeight","innerItem","id","TypeAndValue","justifyContent","isNaN","Number","allowMouseWheel","colorScheme","isChecked","checked","C_TypeAndValue","fnId","paramIndex","noInput","ParameterContext","fns","setFns","find","param","findIndex","previousFns","affectedFns","newValues","previousReturn","newItems","previouslastParam","returnValue","getParamValues","FlowFunctionView","isFirstFunctionInFlow","hasZeroParams","hasOneParam","templateColumns","gap","justifySelf","css","transform","ArrowDown","getFnsValuesFromItems","previousItems","pi","err","FlowFunctionsList","setPreviousItems","previousValues","Provider","in","FlowCard","boxShadow","leftIcon","Delete","useContext","CardHStack","scrollContainerRef","flowCardRef","boxShadows","setBoxShadows","offsetWidth","listener","scrollAmount","scrollLeft","newBoxShadows","Math","ceil","scrollContainer","addEventListener","removeEventListener","StateContext","overflowX","overflowY","flexGrow","spacing","docCards","flex-grow","transition","flowCardFunctions","flexShrink","docCardsNavigationType","docCardsSelectedIndex","doc","f","Add","App","useAppReducer","onDragEnd","dropResult","source","destination","sourceIndex","destinationIndex","sideBarRef","useToken","keyMap","focusSidebar","handlers","onDragStart","defaultSize","minSize","maxSize","pane2Style","isSideBarItemDragging","dataTypes","effects","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","extendTheme","styles","global","html","minWidth","number","bool","shadows","limegreen","green","yellow","orange","pink","lightblue","blue","darkblue","gray","darkOrange","darkGreen","darkPink","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","string","boolean","object","array","null","SaveButton","ClearButton","DocsExplanation","styleType","href","TypeSuggestionList","listStyleType","zIndex","textAlign","FunctionSuggestionList","DocsNavigationTypeSelector","getButtonStyles","isDisabled","DocsNavigationArrows","backDisabled","forwardDisabled","to","w","h","margin","initialState","y","m","toUpperCase","reorder","list","endIndex","listCopy","splice","removed","insert","changeAtIndex","getDefaultValue","findFunction","incrementWithinBounds","decrementPositiveNumber","reducer","action","fnIndex","sort","a","b","localeCompare","uuid","d","filter","hasArrow"],"mappings":"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","file":"static/js/main.ec2437b8.chunk.js","sourcesContent":["import * as React from 'react'\nimport {\n  HStack,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  Text,\n  Code,\n  IconButton,\n  Box,\n  Divider,\n  Flex,\n  Heading,\n  Spacer,\n  Button,\n  Fade,\n  ChakraProps,\n} from '@chakra-ui/react'\nimport { CloseIcon, ArrowUpDownIcon } from '@chakra-ui/icons'\nimport MonacoEditor from '../Editor'\n\nimport { Itype, Ifunction } from '../interfaces'\nimport { matchSorter } from 'match-sorter'\nimport TypeBadge from '../TypeBadge'\nimport EditableText from '../EditableText'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { Action, NavigationType } from '../../state'\nimport {\n  CompositeDecorator,\n  Editor as DraftEditor,\n  EditorState,\n  ContentState,\n  Entity,\n  Modifier,\n  ContentBlock,\n} from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport './draftEditorStyles.css'\nimport AutocompleteInput from '../autocomplete-react-draft/src/index'\n// import SuggestionList from './autocomplete-react-draft/src/suggestions'\nimport { getDefaultKeyBinding, KeyBindingUtil } from 'draft-js'\nimport {\n  ClearButton,\n  DocsExplanation,\n  DocsNavigationArrows,\n  DocsNavigationTypeSelector,\n  FunctionSuggestionList,\n  SaveButton,\n  TypeSuggestionList,\n} from './components'\nconst { hasCommandModifier } = KeyBindingUtil\n\nconst { useCallback } = React\n\nconst autocompleteKeyBindingFn = (e: any): string | null => {\n  //TODO e type\n  switch (e.key) {\n    case 'ArrowDown':\n      return 'down'\n    case 'ArrowUp':\n      return 'up'\n    case 'Escape':\n      return 'close'\n    case 'Enter':\n      return 'select'\n    // case 'Tab':\n    //   return 'select'\n    default:\n      return getDefaultKeyBinding(e)\n  }\n}\n\nconst defaultName = 'name'\n// const defaultType = '_'\nconst typeSuggestions: Array<{ title: Itype['type'] /*| 'New type' */ }> = [\n  { title: 'string' },\n  { title: 'boolean' },\n  { title: 'number' },\n]\n\nconst safeEval = (s: string) => {\n  try {\n    return eval(`(() => ${s})()`)\n  } catch (error) {\n    return null\n  }\n}\nconst getParamsAndReturns = (s: string) =>\n  s.split(arrow).map(s => ({ type: s.trim() }))\n\nconst isSignatureCorrect = (\n  paramsAndReturns: Array<{ type: string }>,\n): paramsAndReturns is Array<Itype> =>\n  paramsAndReturns.length > 1 &&\n  paramsAndReturns.every(p => ['boolean', 'number', 'string'].includes(p.type))\n\nconst getFilteredTypeSuggestions = (\n  typeSuggestions_: typeof typeSuggestions,\n  inputValue?: string,\n) => {\n  if (inputValue === undefined || inputValue === null) return []\n  if (inputValue === '' || inputValue === ' ') return typeSuggestions\n  if (typeSuggestions.some(s => s.title === inputValue)) return []\n  return matchSorter(typeSuggestions_, inputValue, { keys: ['title'] })\n}\n\nconst getFilteredFunctions = (functions: Ifunction[], inputValue?: string) => {\n  if (inputValue === undefined || inputValue === null) return []\n  if (inputValue === '') return functions\n  return matchSorter(functions, inputValue, { keys: ['name'] })\n}\n\nconst arrow = '->'\n\nconst typeToName = (x: { type: string }, n: number): string => {\n  const suffix = n || ''\n  switch (x.type) {\n    case 'string':\n      return 'str' + suffix\n    case 'number':\n      return 'num' + suffix\n    case 'boolean':\n      return 'bool' + suffix\n    default:\n      return 'x'\n    // case 'function':\n    //   return ['f', 'g', 'h', 'i', 'j'][n]\n    // case 'object':\n    //   return 'o' + suffix\n\n    // case 'array':\n    //   return '' //TODO\n    // case 'undefined':\n    // case 'null':\n    //   return ''\n  }\n}\nconst getParamNames = (arr: Array<{ type: string }>): string[] => {\n  let result: string[] = []\n  let alreadySeenTypes: any = {}\n  arr.forEach(iType => {\n    const paramName = typeToName(iType, alreadySeenTypes[iType.type])\n    result.push(paramName)\n    alreadySeenTypes[iType.type] = (alreadySeenTypes[iType.type] || 0) + 1\n  })\n  return result\n}\n\nfunction findWithRegex(regex: any, contentBlock: ContentBlock, callback: any) {\n  const text = contentBlock.getText()\n  let matchArr, start\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index\n    callback(start, start + matchArr[0].length)\n  }\n}\n\nconst signatureDecorator = new CompositeDecorator([\n  {\n    //TypeBadge\n    strategy(contentBlock, cb, contentState) {\n      findWithRegex(\n        new RegExp(\n          `(${typeSuggestions.map(({ title }) => title).join('|')})`,\n          'gi',\n        ),\n        contentBlock,\n        cb,\n      )\n    },\n    component(props: any) {\n      return (\n        <TypeBadge\n          typeAsString={props.decoratedText}\n          children={props.children}\n          as='span'\n        />\n      )\n    },\n  },\n])\n\nconst HANDLE_REGEX = /@[\\w]+/g\n\nconst getStateValueFromFunc = (\n  descriptionDecorator: CompositeDecorator,\n  func?: Ifunction,\n): {\n  name: string\n  signature: EditorState\n  description: EditorState\n  code: string\n} => {\n  return {\n    name: func?.name || '',\n    signature: EditorState.createWithContent(\n      ContentState.createFromText(\n        func?.parameters\n          .concat(func.returns)\n          .map(p => p.type)\n          .join(` ${arrow} `) || '',\n      ),\n      signatureDecorator,\n    ),\n    description: EditorState.createWithContent(\n      ContentState.createFromText(func?.description || ''),\n      descriptionDecorator,\n    ),\n    code: func?.fn.toString() || '',\n  }\n}\n\ntype DocsCardState = {\n  name: string\n  signature: EditorState\n  description: EditorState\n  code: string\n}\n\nconst setOriginalState = (\n  originalState: React.MutableRefObject<{\n    name: string\n    signatureString: string\n    descriptionString: string\n    code: string\n  }>,\n  state: DocsCardState,\n) => {\n  const newOriginalState = {\n    name: state.name,\n    signatureString: state.signature.getCurrentContent().getPlainText(),\n    descriptionString: state.description.getCurrentContent().getPlainText(),\n    code: state.code,\n  }\n\n  originalState.current = newOriginalState\n}\n\n/**\n *\n *\n * DOCS CARD\n *\n *\n */\n\nconst DocsCard = ({\n  func,\n  dispatch,\n  index,\n  functions,\n  navigationType,\n  ...rest\n}: {\n  func?: Ifunction\n  dispatch: React.Dispatch<Action>\n  index: number\n  functions: Ifunction[]\n  navigationType?: NavigationType\n} & ChakraProps) => {\n  const descriptionDecorator = new CompositeDecorator([\n    {\n      //TypeBadge\n      strategy(contentBlock, cb, contentState) {\n        findWithRegex(HANDLE_REGEX, contentBlock, cb)\n      },\n      component(props: any) {\n        return (\n          <Button\n            as='span'\n            variant='link'\n            color='unison.aqua'\n            fontSize='inherit'\n            fontStyle='inherit'\n            style={{\n              direction: 'ltr',\n              unicodeBidi: 'bidi-override',\n            }}\n            data-offset-key={props.offsetKey}\n            onClick={e => {\n              dispatch({\n                type: 'openDocs',\n                openerIndex: index,\n                fnName: props.decoratedText.slice(1),\n              })\n            }}\n          >\n            {props.children}\n          </Button>\n        )\n      },\n    },\n  ])\n  const originalState = React.useRef<{\n    name: string\n    signatureString: string\n    descriptionString: string\n    code: string\n  }>({\n    name: '',\n    signatureString: '',\n    descriptionString: '',\n    code: '',\n  })\n  const [state, setState] = React.useState<DocsCardState>(() => {\n    const state = getStateValueFromFunc(descriptionDecorator, func)\n    setOriginalState(originalState, state)\n    return state\n  })\n\n  const [previousFunc, setPreviousFunc] = React.useState(func)\n  if (previousFunc !== func) {\n    //reference check on function from state.functions\n    setPreviousFunc(func)\n    const state = getStateValueFromFunc(descriptionDecorator, func)\n    setOriginalState(originalState, state)\n    setState(state)\n  }\n  const { name, signature, description, code } = state\n\n  const closeButtonRef = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    closeButtonRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }, [])\n\n  /* Name */\n  const onChangeName = (name: string) => setState(state => ({ ...state, name }))\n  const nameFontStyle = [defaultName, ''].includes(name) ? 'italic' : 'normal'\n  const nameColor = [defaultName, ''].includes(name) ? 'gray.400' : 'normal'\n\n  /* Description */\n  const descriptionHasText = description.getCurrentContent().hasText()\n  const descriptionFontStyle = descriptionHasText ? 'normal' : 'italic'\n  const descriptionColor = descriptionHasText ? 'normal' : 'gray.400'\n  const onChangeDescription = (description: EditorState) => {\n    setState(state => ({ ...state, description }))\n    /* autocomplete description */\n    const trigger = '@'\n    window.requestAnimationFrame(() => {\n      const selection = window.getSelection() as Selection\n      if (selection.rangeCount === 0) {\n        //focus is outside\n        setAutocompleteDescription(null)\n        return\n      }\n      const stateSelection = description.getSelection()\n      const contentState = description.getCurrentContent()\n      const block = contentState.getBlockForKey(stateSelection.getStartKey())\n      if (\n        !stateSelection.getHasFocus() ||\n        block.getEntityAt(stateSelection.getStartOffset() - 1)\n      ) {\n        // console.log('no entity')\n        setAutocompleteDescription(null)\n        return\n      }\n      console.log({ stateSelection, contentState, block })\n      const range = selection.getRangeAt(0)\n      // let text = range.startContainer.textContent!.substring(\n      //   //b|oolean -> 'b\n      //   0,\n      //   range.startOffset,\n      // )\n      const wholeWordText = range.startContainer.textContent as string //b|oolean -> 'boolean'\n      let index = /*text*/ wholeWordText.lastIndexOf(trigger)\n      if (index === -1) {\n        setAutocompleteDescription(null)\n        return\n      }\n      /*previously reassigned text here*/ let text = wholeWordText.substring(\n        index,\n      )\n      text = text === trigger ? '' : text.slice(1)\n\n      // const autocompleteRange = {\n      //   text, start:index,end: range.startOffset\n      // }\n\n      // console.log(3, { text })\n      const tempRange = window.getSelection()!.getRangeAt(0).cloneRange()\n      tempRange.setStart(tempRange.startContainer, index)\n      const rangeRect = tempRange.getBoundingClientRect()\n      let [left, top] = [rangeRect.left, rangeRect.bottom]\n      //\n      console.log({\n        left,\n        top,\n        text,\n        wholeWordText,\n        startIndex: index,\n        selectedIndex: 0,\n      })\n      setAutocompleteDescription({\n        left,\n        top,\n        text,\n        // wholeWordText,\n        startIndex: index,\n        selectedIndex: 0,\n      })\n    })\n  }\n  // const descriptionEditorRef = React.useRef(null)\n  const [\n    autocompleteDescription,\n    setAutocompleteDescription,\n  ] = React.useState<any>(null)\n  const filteredFunctions = getFilteredFunctions(\n    functions,\n    autocompleteDescription?.text,\n  )\n  const descriptionEditorRef = React.useRef<DraftEditor>(null)\n  const handleDescriptionKeyCommand = (\n    command: 'up' | 'down' | 'close' | 'select' | string,\n    clickIndex?: number,\n  ) => {\n    if (filteredFunctions.length === 0) return 'not-handled'\n    switch (command) {\n      case 'up': {\n        setAutocompleteDescription((state: any) => ({\n          ...state,\n          selectedIndex:\n            state.selectedIndex === 0 ? 0 : state.selectedIndex - 1,\n        }))\n        return 'handled'\n      }\n      case 'down': {\n        setAutocompleteDescription((state: any) => ({\n          ...state,\n          selectedIndex:\n            state.selectedIndex === filteredSuggestions.length - 1\n              ? filteredSuggestions.length - 1\n              : state.selectedIndex + 1,\n        }))\n        return 'handled'\n      }\n      case 'close': {\n        descriptionEditorRef.current!.blur()\n        return 'handled'\n      }\n      case 'select': {\n        const trigger = '@'\n        const currentSelectionState = description.getSelection()\n        const anchorOffset /*end */ = currentSelectionState.getAnchorOffset()\n        const anchorKey = currentSelectionState.getAnchorKey()\n        const currentContent = description.getCurrentContent()\n        const currentBlock = currentContent.getBlockForKey(anchorKey)\n        const blockText = currentBlock.getText()\n        console.log({ autocompleteDescription })\n        console.log({\n          blockText,\n          // descriptionString,\n          anchorOffset,\n          anchorKey,\n        })\n        // const start = blockText.substring(0, end).lastIndexOf(trigger)\n        // return {\n        // editorState,\n        // start,\n        // end,\n        // trigger,\n        // selectedIndex: autocompleteSignature.selectedIndex,\n        // }\n\n        // add suggestion\n        const textToInsert =\n          trigger +\n          filteredFunctions[clickIndex ?? autocompleteDescription.selectedIndex]\n            .name\n        const newCurrentContent = currentContent.createEntity(\n          'FUNCTION',\n          'IMMUTABLE',\n        )\n        const entityKey = newCurrentContent.getLastCreatedEntityKey()\n        const mentionTextSelection = currentSelectionState.merge({\n          // anchorOffset: autocompleteDescription.startIndex,\n          anchorOffset: blockText.lastIndexOf(trigger),\n          focusOffset: anchorOffset,\n        })\n        let insertingContent = Modifier.replaceText(\n          description.getCurrentContent(),\n          mentionTextSelection,\n          textToInsert,\n          undefined,\n          // ['link', 'BOLD'],\n          entityKey,\n        )\n        const editorStateWithEntity = EditorState.push(\n          description,\n          insertingContent,\n          'apply-entity',\n        )\n        // const newEditorState = EditorState.push(\n        //   editorStateWithEntity,\n        //   ' ',\n        //   'insert-characters',\n        // )\n        setState(state => ({ ...state, description: editorStateWithEntity }))\n        setAutocompleteDescription(null)\n\n        // EditorState.forceSelection(\n        //   newEditorState,\n        //   insertingContent.getSelectionAfter(),\n        // ),\n\n        return 'handled'\n      }\n      default:\n        return 'not-handled'\n    }\n  }\n\n  /* Signature */\n\n  // const [signatureEditorState, setSignatureEditorState] = React.useState(() =>\n  //   EditorState.createEmpty(signatureDecorator),\n  // )\n  const signatureEditorRef = React.useRef<DraftEditor>(null)\n  const signatureEditorParentRef = React.useRef<HTMLElement>(null)\n  const coordsSignatureEditor = React.useRef<any>(null)\n\n  const onChangeSignatureEditor = (e: EditorState) => {\n    let newEditorState: EditorState\n    switch (e.getLastChangeType()) {\n      case 'insert-characters':\n        const text = e.getCurrentContent().getFirstBlock().getText()\n        let newText = text\n        const triggerArrow = text.endsWith(',') || text.endsWith(' ')\n        if (triggerArrow) {\n          //TODO arrow component\n          const previousMeaningfulCharIsArrow = text\n            .replace(',', ' ')\n            .trimEnd()\n            .endsWith(arrow)\n          const previousCharIsClosingBracket = text\n            .substr(0, text.length - 1)\n            .endsWith('}')\n          if (previousMeaningfulCharIsArrow) {\n            newText = text //.substr(0, text.length - 1)\n          } else if (previousCharIsClosingBracket && text.endsWith(' ')) {\n            //abilities\n            newText = text\n          } else {\n            // only if last non-space or comma char is not arrow\n            newText = text.substr(0, text.length - 1).concat(` ${arrow} `)\n          }\n        }\n\n        newEditorState =\n          text === newText\n            ? e\n            : EditorState.moveFocusToEnd(\n                EditorState.push(\n                  e,\n                  ContentState.createFromText(newText),\n                  'insert-fragment',\n                ),\n              )\n        break\n      default:\n        newEditorState = e\n        break\n    }\n    setState(state => ({ ...state, signature: newEditorState }))\n\n    /* autocomplete signature */\n\n    window.requestAnimationFrame(() => {\n      const selection = window.getSelection() as Selection\n      if (selection.rangeCount === 0) {\n        //focus is outside\n        setAutocompleteSignature(null)\n        return\n      }\n      const stateSelection = newEditorState.getSelection()\n      // const contentState = newEditorState.getCurrentContent()\n      // const block = contentState.getBlockForKey(stateSelection.getStartKey())\n      if (\n        !stateSelection.getHasFocus() /*||\n        block.getEntityAt(stateSelection.getStartOffset() - 1*/\n      ) {\n        setAutocompleteSignature(null)\n        return\n      }\n      const range = selection.getRangeAt(0)\n      // let text = range.startContainer.textContent//!.substring(\n      //b|oolean -> 'b\n      //0,\n      //range.startOffset,\n      //)\n      // console.log(1, { text, stateSelection })\n      const wholeWordText = range.startContainer.textContent as string //b|oolean -> 'boolean'\n      let index = wholeWordText.length > 0 ? wholeWordText.lastIndexOf(' ') : 0\n      index = index === -1 ? 0 : index\n      const text = wholeWordText.substring(index).trim()\n\n      // console.log(3, { text })\n\n      let { left } = range.getBoundingClientRect()\n      const editorParent = signatureEditorParentRef.current as HTMLElement\n      const coords =\n        coordsSignatureEditor.current ?? editorParent.getBoundingClientRect()\n      coordsSignatureEditor.current = coords //TODO reset this cache\n      let top = coords.bottom\n      if (left === 0) {\n        left = coords.left\n      }\n\n      setAutocompleteSignature({\n        left,\n        top,\n        text,\n        wholeWordText,\n        startIndex: index,\n        selectedIndex: 0,\n      })\n    })\n  }\n  const handleKeyCommand = (\n    command: 'up' | 'down' | 'close' | 'select' | string,\n    clickIndex?: number,\n  ) => {\n    if (filteredSuggestions.length === 0) return 'not-handled'\n    switch (command) {\n      case 'up': {\n        setAutocompleteSignature((state: any) => ({\n          ...state,\n          selectedIndex:\n            state.selectedIndex === 0 ? 0 : state.selectedIndex - 1,\n        }))\n        return 'handled'\n      }\n      case 'down': {\n        setAutocompleteSignature((state: any) => ({\n          ...state,\n          selectedIndex:\n            state.selectedIndex === filteredSuggestions.length - 1\n              ? filteredSuggestions.length - 1\n              : state.selectedIndex + 1,\n        }))\n        return 'handled'\n      }\n      case 'close': {\n        signatureEditorRef.current!.blur()\n        return 'handled'\n      }\n      case 'select': {\n        const currentSelectionState = signature.getSelection()\n        const anchorOffset /*end */ = currentSelectionState.getAnchorOffset()\n        const anchorKey = currentSelectionState.getAnchorKey()\n        const currentContent = signature.getCurrentContent()\n        const currentBlock = currentContent.getBlockForKey(anchorKey)\n        const blockText = currentBlock.getText()\n        console.log({\n          blockText,\n          signatureString,\n          text: autocompleteSignature.text,\n          wholeWordText: autocompleteSignature.wholeWordText,\n          anchorOffset,\n          anchorKey,\n        })\n        // const start = blockText.substring(0, end).lastIndexOf(trigger)\n        // return {\n        // editorState,\n        // start,\n        // end,\n        // trigger,\n        // selectedIndex: autocompleteSignature.selectedIndex,\n        // }\n\n        // add suggestion\n        const newCurrentContent = currentContent.createEntity(\n          'TYPE',\n          'IMMUTABLE',\n        )\n        const entityKey = newCurrentContent.getLastCreatedEntityKey()\n\n        //\n        let index = blockText.length > 0 ? blockText.lastIndexOf(' ') : 0\n        index = index === -1 ? 0 : index\n\n        const fnName =\n          filteredSuggestions[clickIndex ?? autocompleteSignature.selectedIndex]\n            .title\n        const textToInsert = index === 0 ? fnName : ' ' + fnName\n        const mentionTextSelection = currentSelectionState.merge({\n          // anchorOffset: autocompleteSignature.startIndex,\n          anchorOffset: index,\n          focusOffset: anchorOffset,\n        })\n        let insertingContent = Modifier.replaceText(\n          signature.getCurrentContent(),\n          mentionTextSelection,\n          textToInsert,\n          undefined,\n          // ['link', 'BOLD'],\n          entityKey,\n        )\n        const newEditorState = EditorState.push(\n          signature,\n          insertingContent,\n          'apply-entity',\n        )\n        setState(state => ({ ...state, signature: newEditorState }))\n        setAutocompleteSignature(null)\n        // EditorState.forceSelection(\n        //   newEditorState,\n        //   insertingContent.getSelectionAfter(),\n        // ),\n\n        return 'handled'\n      }\n      default:\n        return 'not-handled'\n    }\n  }\n\n  const [autocompleteSignature, setAutocompleteSignature] = React.useState<any>(\n    null,\n  )\n  const filteredSuggestions = getFilteredTypeSuggestions(\n    typeSuggestions,\n    autocompleteSignature?.text,\n  )\n\n  /* Code */\n\n  const onChangeCode = (code: string) => setState(state => ({ ...state, code }))\n  const signatureString = signature.getCurrentContent().getPlainText()\n  const paramsAndReturns = getParamsAndReturns(signatureString)\n  const params = paramsAndReturns.slice(0, paramsAndReturns.length - 1)\n  const paramNames = getParamNames(params)\n  const editorValue =\n    code || `function ${name || 'name'}(${paramNames.join(', ')}) {\\n\\n}`\n\n  // const [signatureTouched, setSignatureTouched] = React.useState<boolean>(false)\n  const signatureError = !isSignatureCorrect(paramsAndReturns)\n\n  const hasChanges =\n    name !== originalState.current.name ||\n    signatureString !== originalState.current.signatureString ||\n    description.getCurrentContent().getPlainText() !==\n      originalState.current.descriptionString ||\n    code !== originalState.current.code\n\n  const onSaveButtonClick = () => {\n    const fn = safeEval(code)\n    const validParams = isSignatureCorrect(paramsAndReturns)\n    if (!fn || !validParams) {\n      return //TODO alert\n    }\n    const parameters = paramsAndReturns.slice(\n      0,\n      paramsAndReturns.length - 1,\n    ) as Itype[] //TODO cast\n    const returns = paramsAndReturns.slice(-1).pop() as Itype\n    dispatch({\n      type: 'createFunction',\n      function: {\n        name,\n        parameters,\n        returns,\n        fn,\n        description: description.getCurrentContent().getPlainText(),\n      },\n      index,\n    })\n  }\n\n  const onClearButtonClick = useCallback(() => {\n    const state = getStateValueFromFunc(descriptionDecorator, undefined)\n    setOriginalState(originalState, state)\n    setState(state)\n    dispatch({ type: 'clearDocsCard', index })\n  }, [originalState, index])\n\n  return (\n    <Box\n      // boxShadow={'base'}\n      backgroundColor='white'\n      padding={1}\n      // minWidth='48%'\n      // minHeight='99vh'\n      minHeight='100%'\n      // position='relative'\n      display='flex'\n      flexDirection='column'\n      {...rest}\n    >\n      <Flex paddingLeft={2} alignItems='center'>\n        <Heading fontSize='xl' fontStyle='italic' color='unison.purple'>\n          Docs\n        </Heading>\n        {navigationType === 'history' ? (\n          <DocsNavigationArrows></DocsNavigationArrows>\n        ) : null}\n        <Spacer></Spacer>\n        <ClearButton\n          onClick={onClearButtonClick}\n          fadeIn={hasChanges}\n        ></ClearButton>\n        <SaveButton\n          onClick={onSaveButtonClick}\n          fadeIn={hasChanges}\n          disabled={signatureError}\n        ></SaveButton>\n        <DocsExplanation />\n        {navigationType ? (\n          <DocsNavigationTypeSelector\n            dispatch={dispatch}\n            navigationType={navigationType}\n          ></DocsNavigationTypeSelector>\n        ) : null}\n        <IconButton\n          /* Close Button */\n          aria-label='Close card'\n          icon={<CloseIcon />}\n          variant='ghost'\n          size='sm'\n          onClick={() => dispatch({ type: 'closeDocsCard', index })}\n          /* Scrolling behavior */\n          ref={closeButtonRef}\n          sx={{\n            scrollMarginRight: '20px',\n          }}\n        />\n      </Flex>\n      <Divider marginTop={2}></Divider>\n      <Droppable droppableId='DocsCard'>\n        {(provided, snapshot) => {\n          return (\n            <Box\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              // minWidth={'50%'}\n              flex={1}\n              minHeight='100%'\n              height='100%'\n              overflow='auto'\n              paddingX={2}\n              paddingY={2}\n            >\n              <EditableText\n                /* NAME */\n                value={name}\n                onChange={onChangeName}\n                placeholder={defaultName}\n                fontSize='2xl'\n                textColor={nameColor}\n                fontStyle={nameFontStyle}\n                marginBottom={3}\n              />\n\n              {/* SIGNATURE */}\n              <HStack>\n                <Code fontSize='sm' padding={0.5}>\n                  <Editable\n                    as='span'\n                    placeholder={defaultName}\n                    fontStyle={nameFontStyle}\n                    // width={name.length * 12 + 12 + 'px'}\n                    width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    // minWidth={(name || defaultName).length * 12 + 12 + 'px'}\n                    value={name}\n                    textColor={nameColor}\n                    onChange={onChangeName}\n                    paddingX={1}\n                  >\n                    <EditablePreview\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    />\n                    <EditableInput\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                      _focus={{\n                        outline: '',\n                      }}\n                    />\n                  </Editable>\n                </Code>\n\n                <Text as='span' fontSize='sm'>\n                  :{' '}\n                </Text>\n                <Code\n                  // SIGNATURE EDITOR\n                  fontSize='sm'\n                  width='100%'\n                  paddingX={1}\n                  paddingY={1}\n                  as='span'\n                  ref={signatureEditorParentRef}\n                  // position='relative'\n                >\n                  <DraftEditor\n                    editorState={signature}\n                    ref={signatureEditorRef}\n                    onChange={onChangeSignatureEditor}\n                    keyBindingFn={autocompleteKeyBindingFn}\n                    handleKeyCommand={e => handleKeyCommand(e)}\n\n                    // onBlur={(e: any) => {\n                    //   setSignatureTouched(true)\n                    // }}\n                  />\n                  {filteredSuggestions.length > 0 ? (\n                    <TypeSuggestionList\n                      typeSuggestions={filteredSuggestions}\n                      selectedIndex={autocompleteSignature.selectedIndex}\n                      left={autocompleteSignature.left}\n                      top={autocompleteSignature.top}\n                    ></TypeSuggestionList>\n                  ) : null}\n                </Code>\n              </HStack>\n\n              <Text\n                /* DESCRIPTION */\n                className='description'\n                marginTop={5}\n                fontSize='xl'\n                fontStyle={descriptionFontStyle}\n                color={descriptionColor}\n                backgroundColor='yellow.50'\n                padding={3}\n              >\n                <DraftEditor\n                  ref={descriptionEditorRef}\n                  placeholder='Description'\n                  editorState={description}\n                  onChange={onChangeDescription}\n                  keyBindingFn={autocompleteKeyBindingFn}\n                  handleKeyCommand={e => handleDescriptionKeyCommand(e)}\n                ></DraftEditor>\n                {filteredFunctions.length > 0 ? (\n                  <FunctionSuggestionList\n                    onClick={(clickIndex: number) =>\n                      handleDescriptionKeyCommand('select', clickIndex)\n                    }\n                    functionSuggestions={filteredFunctions}\n                    selectedIndex={autocompleteDescription.selectedIndex}\n                    left={autocompleteDescription.left}\n                    top={autocompleteDescription.top}\n                  ></FunctionSuggestionList>\n                ) : null}\n              </Text>\n              {/* <Tabs marginTop={5}>\n                <TabList>\n                  <Tab>Regular editor</Tab>\n                  <Tab>Structured editor</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel> */}\n              <Box marginTop={5}>\n                <MonacoEditor\n                  value={editorValue}\n                  onChange={(_: any, v: any) => {\n                    onChangeCode(v)\n                  }}\n                ></MonacoEditor>\n              </Box>\n\n              {/* </TabPanel>\n                  <TabPanel>\n                    <Code>{editorValue}</Code>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs> */}\n\n              {provided.placeholder}\n            </Box>\n          )\n        }}\n      </Droppable>\n    </Box>\n  )\n}\nexport default DocsCard\n","import * as React from 'react'\nimport {\n  ControlledEditor,\n  ControlledEditorOnChange,\n} from '@monaco-editor/react'\nfunction Editor({\n  value,\n  onChange,\n}: {\n  value: string\n  onChange: ControlledEditorOnChange\n}) {\n  // function onChange(newValue: any, e: any) {\n  //   console.log('onChange', newValue, e)\n  // }\n\n  // const code = this.state.code;\n  const options: { lineNumbers: 'off'; minimap: { enabled: boolean } } = {\n    // selectOnLineNumbers: true,\n    minimap: { enabled: false },\n    lineNumbers: 'off',\n  }\n  return (\n    <ControlledEditor\n      width='100%'\n      height='30vh'\n      language='javascript'\n      theme='vs-light'\n      value={value}\n      options={options}\n      onChange={onChange}\n      // editorDidMount={(editor, monaco) =>\n      //   console.log('editorDidMount', { editor, monaco })\n      // }\n    />\n  )\n}\nexport default Editor\n","import * as React from 'react'\nimport {\n  EditableProps,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  forwardRef,\n} from '@chakra-ui/react'\n\nconst EditableText = forwardRef((props: EditableProps, ref) => (\n  <Editable {...props}>\n    <EditablePreview />\n    <EditableInput\n      ref={ref}\n      _focus={{\n        outline: '',\n      }}\n    />\n  </Editable>\n))\n\nexport default EditableText\n","import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport type { Ieffect, Itype, Ifunction } from './interfaces'\nimport {\n  Box,\n  Code,\n  forwardRef,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  Kbd,\n  ListItem,\n  UnorderedList,\n  Center,\n  useTheme,\n  InputRightElement,\n  InputRightAddon,\n  HStack,\n} from '@chakra-ui/react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TreeView from '@material-ui/lab/TreeView'\nimport TreeItem from '@material-ui/lab/TreeItem'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ArrowForwardIcon,\n  SearchIcon,\n} from '@chakra-ui/icons'\nimport { FaShapes } from 'react-icons/fa'\n// import { VscSymbolMisc as FaShapes } from 'react-icons/vsc'\nimport { GiMineExplosion } from 'react-icons/gi'\n// import { IoShapes } from 'react-icons/io' //RiFunctionLine, RiFunctionFill //IoShapesOutline\nimport './sideBarStyles.css'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport MouseTrap from 'mousetrap'\n// import { FlowFunctionView } from './FlowCard'\nimport PopoverExplanation from './PopoverExplanation'\n\ntype IsideBarItem =\n  | {\n      nodeId: 'functions'\n      label: 'Functions'\n      items: Array<Ifunction>\n    }\n  | {\n      nodeId: 'types'\n      label: 'Data Types'\n      items: Array<Itype>\n    }\n  | {\n      nodeId: 'effects'\n      label: 'Effects'\n      items: Array<Ieffect>\n    }\n\nexport const FunctionItem = (props: Ifunction) => {\n  return (\n    <Text\n      wrap='nowrap'\n      color='unison.purple'\n      _hover={{ color: 'unison.lightPurple' }}\n    >\n      <Code\n        fontSize='sm'\n        // fontWeight='700'\n        paddingX={1}\n        paddingY={0.5}\n        rounded='base'\n        backgroundColor='transparent'\n        color='inherit'\n      >\n        {props.name}\n      </Code>\n      <Text as='span'>: </Text>\n      <Text as={'span'} flexWrap='nowrap'>\n        {props.parameters.map((p, i) => (\n          <Text as='span' key={i}>\n            <TypeBadge typeAsString={p.type} />\n            <ArrowForwardIcon marginX={1} />\n          </Text>\n        ))}\n      </Text>\n      <TypeBadge typeAsString={props.returns.type} />\n    </Text>\n  )\n}\n\nconst getFunctionRenderItem = (props: Ifunction) => (\n  provided: any,\n  snapshot: any,\n  rubric: any,\n) => {\n  return (\n    <div\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n    >\n      <div>\n        <FunctionItem {...props} />\n        {/* <FlowFunctionView item={{ ...props }} /> */}\n      </div>\n    </div>\n  )\n}\nconst useTreeItemStyles = makeStyles({\n  root: {\n    marginBottom: '5px',\n  },\n  content: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n      cursor: 'grabbing',\n    },\n  },\n})\n\nconst FunctionTreeItem = (\n  props: Ifunction & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { root, content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      classes={{ root, content: props.isAnyItemDragging ? content : undefined }}\n      nodeId={props.nodeId}\n      label={\n        <Droppable\n          droppableId={props.nodeId}\n          renderClone={getFunctionRenderItem(props)}\n          isDropDisabled={true}\n        >\n          {(provided, snapshot) => {\n            const shouldRenderClone =\n              props.nodeId === snapshot.draggingFromThisWith\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {shouldRenderClone ? (\n                  <div className='react-beautiful-dnd-copy'>\n                    <FunctionItem {...props}></FunctionItem>\n                  </div>\n                ) : (\n                  <Draggable draggableId={props.nodeId} index={0}>\n                    {(provided, snapshot) => {\n                      return (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <FunctionItem {...props}></FunctionItem>\n                        </div>\n                      )\n                    }}\n                  </Draggable>\n                )}\n                {/* {provided.placeholder} */}\n              </div>\n            )\n          }}\n        </Droppable>\n      }\n    ></TreeItem>\n  )\n}\nconst TypeTreeItem = (\n  props: Itype & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      nodeId={props.nodeId}\n      classes={{ content: props.isAnyItemDragging ? content : undefined }}\n      label={<TypeBadge typeAsString={props.type}></TypeBadge>}\n    />\n  )\n}\n\nconst Sidebar = React.memo(\n  forwardRef(\n    (\n      {\n        items,\n        isAnyItemDragging,\n        dispatch,\n        searchValue,\n      }: {\n        items: Array<IsideBarItem>\n        isAnyItemDragging: boolean\n        dispatch: React.Dispatch<Action>\n        searchValue: string\n      },\n      ref,\n    ) => {\n      const theme = useTheme()\n      const {\n        colors: {\n          unison: { purple, lightPurple, aqua },\n        },\n      } = theme\n\n      //Search\n      const [isHoveringSearch, setIsHoveringSearch] = React.useState(false)\n      const [isFocusedSearch, setFocusedSearch] = React.useState(false)\n      const onMouseEnterSearch = React.useCallback(() => {\n        setIsHoveringSearch(true)\n      }, [])\n      const onMouseLeaveSearch = React.useCallback(() => {\n        setIsHoveringSearch(false)\n      }, [])\n\n      return (\n        <Box\n          height='100%'\n          flex={1}\n          backgroundColor={'purple.50'}\n          paddingTop={4}\n        >\n          <InputGroup\n            width='100%'\n            whiteSpace='nowrap'\n            padding={1}\n            display='flex'\n            onMouseEnter={onMouseEnterSearch}\n            onMouseLeave={onMouseLeaveSearch}\n            // _focusWithin={{ color: 'teal.600' }}\n          >\n            <InputLeftElement\n              pointerEvents='none'\n              children={\n                <SearchIcon\n                  color={\n                    isFocusedSearch\n                      ? aqua\n                      : isHoveringSearch\n                      ? lightPurple\n                      : purple\n                  }\n                />\n              } //TODO teal\n            />\n            <Input\n              ref={ref}\n              placeholder='Search'\n              variant='outline'\n              _hover={{ borderBottomColor: lightPurple }}\n              focusBorderColor={'unison.aqua'}\n              size='md'\n              borderRadius='0%'\n              borderTop='none'\n              borderLeft='none'\n              borderRight='none'\n              borderBottom={`2px solid ${purple}`}\n              value={searchValue}\n              onFocus={() => {\n                if (!ref || !('current' in ref)) return\n                ref.current.setSelectionRange(0, ref.current.value.length)\n                setFocusedSearch(true)\n              }}\n              onBlur={() => setFocusedSearch(false)}\n              onChange={e =>\n                dispatch({ type: 'sideBarSearch', value: e.target.value })\n              }\n            />\n            {isHoveringSearch ? (\n              <HStack\n                background='transparent'\n                position='absolute'\n                right={2}\n                top={2}\n                pointerEvents='none'\n              >\n                <Kbd>ctrl</Kbd>\n                <Text>/</Text>\n                <Kbd>⌘</Kbd>\n                <Text>+</Text>\n                <Kbd>B</Kbd>\n              </HStack>\n            ) : null}\n          </InputGroup>\n          <Center>\n            <PopoverExplanation label='Sidebar explanation' title='Sidebar'>\n              <UnorderedList>\n                <ListItem>\n                  Drag functions and drop them onto Flow Card or Docs Card\n                </ListItem>\n                <ListItem>\n                  <Kbd>up</Kbd>, <Kbd>down</Kbd>, <Kbd>left</Kbd>,{' '}\n                  <Kbd>right</Kbd> to move in Sidebar\n                </ListItem>\n                <ListItem>\n                  <Kbd>space</Kbd> to drag, <Kbd>right</Kbd> then{' '}\n                  <Kbd>space</Kbd> to drop\n                </ListItem>\n                <ListItem>\n                  Datatypes and Effects are not interactive at this point\n                </ListItem>\n              </UnorderedList>\n            </PopoverExplanation>\n          </Center>\n\n          <TreeView\n            selected={[]}\n            aria-label='Functions, types and effects'\n            defaultCollapseIcon={<ChevronDownIcon color='unison.purple' />}\n            defaultExpandIcon={<ChevronRightIcon color='unison.purple' />}\n            onNodeFocus={(e, v) => {\n              const draggable: any = document.querySelector(\n                `[data-rbd-draggable-id=\"${v}\"]`,\n              )\n\n              if (draggable) {\n                const focused = document.querySelectorAll('.Mui-focused')\n                focused.forEach(e => {\n                  e.classList.remove('Mui-focused')\n                })\n                const div =\n                  draggable.parentElement?.parentElement?.parentElement\n                const li = div?.parentElement\n                const parentMenu =\n                  li?.parentElement?.parentElement?.parentElement?.parentElement\n                const previous = li?.previousElementSibling\n                const next = li?.nextElementSibling\n\n                if (!draggable.bound) {\n                  draggable.bound = true\n                  MouseTrap(draggable).bind('left', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    div?.classList.remove('Mui-focused')\n                    parentMenu?.focus()\n                  })\n                  MouseTrap(draggable).bind('down', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (next) {\n                      next.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.nextElementSibling?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                  MouseTrap(draggable).bind('up', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (previous) {\n                      previous.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                }\n\n                div?.classList.add('Mui-focused')\n                draggable.focus()\n              }\n            }}\n          >\n            {items &&\n              items.map(item => {\n                const label = (\n                  <Text fontSize='lg' color={'unison.purple'}>\n                    {item.label}\n                  </Text>\n                )\n                return (\n                  <TreeItem\n                    nodeId={item.nodeId}\n                    key={item.nodeId}\n                    label={\n                      <HStack>\n                        {item.nodeId === 'functions' ? (\n                          <Text fontWeight='bold' fontSize='xl' color={purple}>\n                            λ\n                          </Text>\n                        ) : item.nodeId === 'types' ? (\n                          <FaShapes color={purple} />\n                        ) : item.nodeId === 'effects' ? (\n                          <GiMineExplosion color={purple} />\n                        ) : null}\n                        {label}\n                      </HStack>\n                    }\n                  >\n                    {(() => {\n                      switch (item.nodeId) {\n                        case 'functions':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.name}`\n                            return (\n                              <FunctionTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'types':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.type}`\n                            return (\n                              <TypeTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'effects':\n                          return null //@TODO\n                        default:\n                          let _: never = item\n                      }\n                    })()}\n                  </TreeItem>\n                )\n              })}\n          </TreeView>\n        </Box>\n      )\n    },\n  ),\n)\n\nexport default Sidebar\n","import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport { Ifunction, Itype } from './interfaces'\nimport {\n  Box,\n  Flex,\n  Spacer,\n  Code,\n  HStack,\n  VStack,\n  forwardRef,\n  Divider,\n  Button,\n  Input,\n  NumberInput,\n  NumberInputField,\n  Text,\n  Heading,\n  Grid,\n  GridItem,\n  Fade,\n  ChakraProps,\n  UnorderedList,\n  ListItem,\n  Switch,\n} from '@chakra-ui/react'\nimport { ArrowDownIcon, ArrowForwardIcon, DeleteIcon } from '@chakra-ui/icons'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport PopoverExplanation from './PopoverExplanation'\nimport './flowCardStyles.css'\n\nconst TypeAndValue = React.memo(\n  ({\n    type,\n    value,\n    onChange,\n    direction,\n  }: {\n    type: Itype['type']\n    value: any\n    onChange?: (v: string | number | boolean) => void\n    direction: 'row' | 'column'\n  }) => {\n    return (\n      <Flex direction={direction} justifyContent='center' alignItems='center'>\n        <TypeBadge typeAsString={type} />\n        {(() => {\n          if (!onChange) {\n            return (\n              <Code>\n                {type === 'boolean' ? (value ? 'true' : 'false') : value}\n              </Code>\n            )\n          }\n          switch (type) {\n            case 'string':\n              return (\n                <Input\n                  size='sm'\n                  value={value}\n                  variant='outline'\n                  backgroundColor='white'\n                  focusBorderColor={'unison.aqua'}\n                  rounded='base'\n                  onChange={e => {\n                    onChange(e.target.value)\n                  }}\n                ></Input>\n              )\n            case 'number':\n              return (\n                <NumberInput\n                  size='sm'\n                  value={value}\n                  variant='outline'\n                  backgroundColor='white'\n                  focusBorderColor={'unison.aqua'}\n                  rounded='base'\n                  onChange={(s, n) => {\n                    if (isNaN(Number(n))) {\n                      return\n                    }\n                    onChange(n)\n                  }}\n                  allowMouseWheel\n                >\n                  <NumberInputField />\n                  {/* <NumberInputStepper> */}\n                  {/* <NumberIncrementStepper /> */}\n                  {/* <NumberDecrementStepper /> */}\n                  {/* </NumberInputStepper> */}\n                </NumberInput>\n              )\n            case 'boolean':\n              return (\n                <>\n                  <Switch\n                    colorScheme={'purple'}\n                    isChecked={value}\n                    onChange={e => {\n                      onChange(e.target.checked)\n                    }}\n                  ></Switch>\n                  <Text>{value ? 'true' : 'false'}</Text>\n                </>\n              )\n            default:\n              return null\n          }\n        })()}\n      </Flex>\n    )\n  },\n)\n\nconst getParamValues = (\n  items: IfunctionWithId[],\n  v: string | number | boolean,\n  paramIndex: number | 'last',\n) => {\n  let previousReturn = null\n  let newItems: IfunctionWithId[] = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n    const parameters = [...item.parameters]\n    if (i === 0) {\n      //donde se ha producido el cambio\n      const param =\n        paramIndex === 'last'\n          ? parameters[parameters.length - 1]\n          : parameters[paramIndex]\n      param.value = v\n    }\n    const previouslastParam: Itype | undefined =\n      parameters[parameters.length - 1]\n\n    if (previouslastParam) {\n      parameters[parameters.length - 1] = {\n        ...previouslastParam,\n        value:\n          previousReturn === null ? previouslastParam?.value : previousReturn,\n      }\n    }\n\n    //TODO typecheck\n\n    let returnValue\n    try {\n      returnValue = item.fn(...parameters.map(p => p.value))\n    } catch (error) {\n      console.log({ error })\n      break\n    }\n    console.log('break')\n\n    newItems.push({\n      ...item,\n      parameters,\n      returns: { ...item.returns, value: returnValue },\n    })\n\n    previousReturn = returnValue\n  }\n\n  return newItems\n}\n\nfunction sliceInTwo<A>(i: number, as: A[]) {\n  return [as.slice(0, i), as.slice(i)]\n}\n\nconst C_TypeAndValue = React.memo(\n  ({\n    fnId,\n    direction,\n    paramIndex,\n    noInput = false,\n  }: {\n    fnId: string\n    direction: 'row' | 'column'\n    paramIndex: number | 'last' | 'return'\n    noInput?: boolean\n  }) => {\n    const { fns, setFns } = React.useContext(ParameterContext)\n    const { parameters, returns, id } = fns.find(({ id }) => id === fnId)!\n    const param =\n      paramIndex === 'return'\n        ? returns\n        : paramIndex === 'last'\n        ? parameters[parameters.length - 1]\n        : parameters[paramIndex]\n\n    const onChange =\n      noInput || paramIndex === 'return'\n        ? undefined\n        : (v: string | number | boolean) => {\n            const [previousFns, affectedFns] = sliceInTwo(\n              fns.findIndex(({ id }) => id === fnId),\n              fns,\n            )\n            const newValues = getParamValues(affectedFns, v, paramIndex)\n            console.log({ previousFns, affectedFns, newValues })\n            setFns(previousFns.concat(newValues))\n          }\n\n    return (\n      <TypeAndValue\n        type={param.type}\n        value={param.value}\n        onChange={onChange}\n        direction={direction}\n      />\n    )\n  },\n)\n\nexport const FlowFunctionView = React.memo(\n  forwardRef(\n    (\n      {\n        item,\n        // style,\n        // onChangeParam,\n        isFirstFunctionInFlow,\n        ...rest\n      }: {\n        item: Ifunction & { id: string }\n        // style?: React.CSSProperties\n        isFirstFunctionInFlow: boolean\n        // onChangeParam: (_: {\n        //   paramValue: string | number | boolean\n        //   paramIndex: number\n        // }) => void\n      },\n      ref,\n    ) => {\n      const hasZeroParams = item.parameters.length === 0\n      const hasOneParam = item.parameters.length === 1\n      return (\n        <Grid\n          {...rest}\n          ref={ref}\n          backgroundColor='gray.200' //TODO\n          rounded='md'\n          marginBottom={1}\n          padding={1}\n          templateColumns='auto 25%'\n          width='100%'\n          gap={1}\n        >\n          <GridItem\n            width='100%'\n            display='flex'\n            flexDirection='row'\n            alignItems='center'\n          >\n            <Code justifySelf='flex-start' backgroundColor='transparent'>\n              {item.name}\n            </Code>\n\n            {hasZeroParams || hasOneParam\n              ? null\n              : item.parameters\n                  .slice(0, item.parameters.length - 1)\n                  .map((param, i) => {\n                    const css =\n                      i === item.parameters.length - 2\n                        ? { transform: 'rotate(-45deg)' }\n                        : null\n                    return (\n                      <HStack\n                        justifySelf='flex-end'\n                        width='100%'\n                        display='flex'\n                        alignItems='center'\n                        justifyContent='flex-end'\n                        key={i}\n                      >\n                        <C_TypeAndValue\n                          fnId={item.id}\n                          paramIndex={i}\n                          direction='column'\n                        />{' '}\n                        <ArrowForwardIcon css={css} />\n                      </HStack>\n                    )\n                  })}\n          </GridItem>\n          <GridItem width='100%'>\n            <VStack>\n              {hasZeroParams ? (\n                <Code>()</Code>\n              ) : (\n                <C_TypeAndValue\n                  fnId={item.id}\n                  paramIndex='last'\n                  direction='column'\n                  noInput={!isFirstFunctionInFlow}\n                />\n              )}\n              <ArrowDownIcon></ArrowDownIcon>\n              <C_TypeAndValue\n                fnId={item.id}\n                noInput\n                paramIndex='return'\n                direction='column'\n              />\n            </VStack>\n          </GridItem>\n        </Grid>\n      )\n    },\n  ),\n)\n\nconst getFnsValuesFromItems = (\n  items: Array<IfunctionWithId>,\n  previousItems: Array<IfunctionWithId> = [],\n) => {\n  let previousReturn = null\n  let newItems: IfunctionWithId[] = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = previousItems.find(pi => pi.id === items[i].id) ?? items[i]\n    const parameters = [...item.parameters]\n    const previouslastParam: Itype | undefined =\n      parameters[parameters.length - 1]\n    if (previouslastParam) {\n      parameters[parameters.length - 1] = {\n        ...previouslastParam,\n        value:\n          previousReturn === null ? previouslastParam?.value : previousReturn,\n      }\n    }\n\n    //TODO typecheck, show error\n    console.log({ parameters })\n    let returnValue\n    let error\n    try {\n      returnValue = item.fn(...parameters.map(p => p.value))\n    } catch (err) {\n      error = err\n      console.log({ error })\n    }\n\n    console.log('break')\n\n    //TODO only push if no error\n    newItems.push({\n      ...item,\n      parameters,\n      returns: { ...item.returns, value: returnValue },\n    })\n\n    previousReturn = returnValue\n  }\n\n  return newItems\n}\n\nconst ParameterContext = React.createContext<{\n  fns: Array<IfunctionWithId>\n  setFns: React.Dispatch<React.SetStateAction<IfunctionWithId[]>>\n}>({ fns: [], setFns() {} })\n\ntype IfunctionWithId = Ifunction & { id: string }\n\nconst FlowFunctionsList = React.memo(\n  ({ items }: { items: Array<IfunctionWithId> }) => {\n    const [fns, setFns] = React.useState(getFnsValuesFromItems(items))\n    const [previousItems, setPreviousItems] = React.useState(items)\n    if (previousItems !== items) {\n      setPreviousItems(items)\n      setFns(previousValues => getFnsValuesFromItems(items, previousValues))\n    }\n\n    //Recoil?\n    //items deberia venir sin parameter values - se calculan en el setState o en el render? en el setState\n    // que pasa cuando viene una fn nueva?\n    // can FlowFunctionView never reupdate after initial render? not rerender if isFiFIFlow changes\n\n    return (\n      <ParameterContext.Provider value={{ fns, setFns }}>\n        {items.map((item, i) => {\n          return (\n            <Draggable key={item.id} draggableId={item.id} index={i}>\n              {(provided, snapshot) => {\n                return (\n                  <Fade in={true}>\n                    <FlowFunctionView\n                      isFirstFunctionInFlow={i === 0}\n                      item={item}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      // style={provided.draggableProps.style}\n                    />\n                  </Fade>\n                )\n              }}\n            </Draggable>\n          )\n        })}\n      </ParameterContext.Provider>\n    )\n  },\n)\n\nconst FlowCard = React.memo(\n  forwardRef(\n    (\n      props: {\n        items: Array<Ifunction & { id: string }>\n        dispatch: React.Dispatch<Action>\n      } & ChakraProps,\n      ref,\n    ) => {\n      const { items, dispatch, ...rest } = props\n      return (\n        <Box\n          ref={ref}\n          boxShadow={'base'}\n          padding={1}\n          minHeight='100%'\n          // height='100%'\n          // width={'49%'}\n          // minWidth='48%'\n          // position='relative'\n          backgroundColor='white'\n          display='flex'\n          flexDirection='column'\n          {...rest}\n        >\n          <Flex paddingLeft={2} alignItems='center'>\n            <Heading fontSize='xl' fontStyle='italic' color='unison.purple'>\n              Flow\n            </Heading>\n            <Spacer></Spacer>\n\n            <Fade in={items.length > 0}>\n              <Button\n                color='unison.darkPink'\n                sx={{ '&:hover': { backgroundColor: 'red.50' } }}\n                variant='ghost'\n                leftIcon={<DeleteIcon />}\n                onClick={() => {\n                  dispatch({ type: 'clearFlowCard' })\n                }}\n              >\n                Clear\n              </Button>\n            </Fade>\n\n            <PopoverExplanation label='Flow card explanation' title='Flow card'>\n              <UnorderedList>\n                <ListItem>\n                  Flow is a special view for the flow function (left-to-right\n                  variadic compose). This is a stab at a \"functional Scratch\" to\n                  visually explore function composition.\n                </ListItem>\n              </UnorderedList>\n              <ListItem>\n                Last argument and return type line up vertically to reinforce\n                the pipeline metaphor.\n              </ListItem>\n              <ListItem>\n                JavaScript is executed and shown on the right. There's no type\n                checking in place yet.\n              </ListItem>\n            </PopoverExplanation>\n          </Flex>\n          <Divider marginTop={2}></Divider>\n          <Droppable droppableId='FlowCard'>\n            {(provided, snapshot) => {\n              return (\n                <Box\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  // minWidth={'50%'}\n                  flex={1}\n                  minHeight='100%'\n                  height='100%'\n                  overflow='auto'\n                  paddingX={2}\n                  paddingY={4}\n                >\n                  <FlowFunctionsList items={items}></FlowFunctionsList>\n                  {provided.placeholder}\n                </Box>\n              )\n            }}\n          </Droppable>\n        </Box>\n      )\n    },\n  ),\n)\n\nexport default FlowCard\n","import * as React from 'react'\nimport { Box, Button, Center, Flex, HStack, ScaleFade } from '@chakra-ui/react'\nimport { StateContext } from '../state'\nimport FlowCard from './FlowCard'\nimport DocsCard from './DocsCard/DocsCard'\nimport { AddIcon } from '@chakra-ui/icons'\nconst { useContext } = React\n\nconst CardHStack = () => {\n  const scrollContainerRef = React.useRef<HTMLDivElement>(null)\n  const flowCardRef = React.useRef<HTMLElement>(null)\n  const [boxShadows, setBoxShadows] = React.useState(0)\n\n  React.useLayoutEffect(() => {\n    const width = flowCardRef.current?.offsetWidth\n    // console.log({ width })\n    const listener = (e: any) => {\n      if (!width) return\n      // console.log(e.target.scrollLeft)\n      const scrollAmount = e.target.scrollLeft\n      const newBoxShadows =\n        scrollAmount < 10 ? -1 : Math.ceil(scrollAmount / (width - 40)) //discount left:40px\n      // console.log({ newBoxShadows })\n      if (newBoxShadows !== boxShadows) {\n        setBoxShadows(newBoxShadows)\n      }\n    }\n\n    const scrollContainer = scrollContainerRef.current\n    if (scrollContainer) scrollContainer.addEventListener('scroll', listener)\n    return () => {\n      if (scrollContainer) {\n        scrollContainer.removeEventListener('scroll', listener)\n      }\n    }\n  }, [boxShadows])\n  const { state, dispatch } = useContext(StateContext)\n  return (\n    <Flex\n      overflowX='auto'\n      overflowY='hidden'\n      flexGrow={1}\n      height='100%'\n      backgroundColor='purple.50'\n      ref={scrollContainerRef}\n    >\n      <HStack\n        spacing={0}\n        height='100%'\n        //AndyM\n        width={(state.docCards.length + 1) /*(flowCard)*/ * 39 + 'vw'}\n        display='flex'\n        flex-grow={1}\n        position='relative'\n        transition='width 100ms cubic-bezier(0.19, 1, 0.22, 1)'\n      >\n        <FlowCard\n          transition='box-shadow 100ms linear,opacity 75ms linear,transform 200ms cubic-bezier(0.19, 1, 0.22, 1);'\n          ref={flowCardRef}\n          items={state.flowCardFunctions}\n          dispatch={dispatch}\n          //AndyM\n          // transition='box-shadow 100ms linear,opacity 75ms linear,transform 200ms cubic-bezier(0.19, 1, 0.22, 1);'\n          flexShrink={0}\n          width='39vw'\n          // maxWidth='625px'\n          top='0px'\n          position='sticky'\n          flexGrow={1}\n          overflowY='auto'\n          borderLeft='1px solid rgba(0,0,0,0.05)'\n          left={'0px'}\n        ></FlowCard>\n        {state.docCards.length > 0 ? (\n          state.docCardsNavigationType === 'history' ? (\n            <DocsCard\n              index={state.docCardsSelectedIndex}\n              func={(() => {\n                const doc = state.docCards[state.docCardsSelectedIndex]\n                console.log(state.docCards, state.docCardsSelectedIndex)\n                return doc.type === 'editing'\n                  ? state.functions.find(f => f.name === doc.fnName)\n                  : undefined\n              })()}\n              dispatch={dispatch}\n              functions={state.functions}\n              navigationType={'history'}\n              //AndyM\n              transition='box-shadow 100ms linear,opacity 75ms linear,transform 200ms cubic-bezier(0.19, 1, 0.22, 1);'\n              flexShrink={0}\n              width='39vw'\n              // maxWidth='625px'\n              top='0px'\n              position='sticky'\n              flexGrow={1}\n              overflowY='auto'\n              borderLeft='1px solid rgba(0,0,0,0.05)'\n              left={40 + 'px'}\n            />\n          ) : (\n            state.docCards.map((doc, i) => {\n              const func =\n                doc.type === 'editing'\n                  ? state.functions.find(f => f.name === doc.fnName)\n                  : undefined\n              return (\n                <DocsCard\n                  key={i}\n                  index={i}\n                  func={func}\n                  dispatch={dispatch}\n                  functions={state.functions}\n                  navigationType={\n                    i === 0 ? state.docCardsNavigationType : undefined\n                  }\n                  //AndyM\n                  transition='box-shadow 100ms linear,opacity 75ms linear,transform 200ms cubic-bezier(0.19, 1, 0.22, 1);'\n                  flexShrink={0}\n                  width='39vw'\n                  // maxWidth='625px'\n                  top='0px'\n                  position='sticky'\n                  flexGrow={1}\n                  overflowY='auto'\n                  borderLeft='1px solid rgba(0,0,0,0.05)'\n                  left={(i + 1) * 40 + 'px'}\n                  boxShadow={\n                    i < boxShadows\n                      ? '0px 0px 15px 3px rgba(0,0,0,0.1)'\n                      : '0px 0px 15px 3px rgba(0,0,0,0)'\n                  }\n                />\n              )\n            })\n          )\n        ) : (\n          <Box width='39vw' flexGrow={1} flexShrink={0}>\n            <Center>\n              <ScaleFade in={true}>\n                <Button\n                  leftIcon={<AddIcon />}\n                  colorScheme='teal'\n                  variant='ghost'\n                  fontSize='xl'\n                  onClick={() => dispatch({ type: 'newDocsCard' })}\n                >\n                  New function\n                </Button>\n              </ScaleFade>\n            </Center>\n          </Box>\n        )}\n      </HStack>\n    </Flex>\n  )\n}\nexport default CardHStack\n","import * as React from 'react'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport {\n  Box,\n  Button,\n  Center,\n  ScaleFade,\n  useTheme,\n  useToken,\n} from '@chakra-ui/react'\nimport SideBar from './components/Sidebar'\nimport CardHStack from './components/CardHStack'\nimport SplitPane from 'react-split-pane'\nimport FlowCard from './components/FlowCard'\nimport { StateContext, useAppReducer } from './state'\nimport DocsCard from './components/DocsCard/DocsCard'\nimport { matchSorter } from 'match-sorter'\nimport './styles.css'\nimport { HotKeys } from 'react-hotkeys'\nimport { AddIcon } from '@chakra-ui/icons'\n\nexport const App = () => {\n  const [state, dispatch] = useAppReducer()\n  const onDragEnd = React.useCallback(\n    dropResult => {\n      console.log({ dropResult })\n      if (\n        //SideBar to FlowCard\n        dropResult.source.droppableId !== 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromSideBarOnFlowCard',\n          index: dropResult.destination.index,\n          draggableId: dropResult.draggableId,\n        })\n      } else if (\n        // FlowCard to FlowCard\n        dropResult.source.droppableId === 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromFlowCardToFlowCard',\n          sourceIndex: dropResult.source.index,\n          destinationIndex: dropResult.destination.index,\n        })\n      } else if (dropResult.destination?.droppableId === 'DocsCard') {\n        dispatch({\n          type: 'dropFnFromSideBarToDocsCard',\n          draggableId: dropResult.draggableId,\n        })\n      } else {\n        dispatch({ type: 'dropOutside' })\n\n        //Regain focus after dropping outside - TODO does not work if dragged and esc pressed\n        const li: any = document.querySelector(\n          `[id$='${dropResult.draggableId}']`,\n        )\n        if (li) {\n          li.focus()\n        }\n      }\n    },\n    [dispatch],\n  )\n  const sideBarRef = React.useRef()\n  const purple = useToken('colors', 'unison.purple')\n\n  return (\n    <StateContext.Provider value={{ state, dispatch }}>\n      <HotKeys //TODO substitute for mousetrap + useEffect\n        keyMap={{ focusSidebar: ['ctrl+b', 'command+b'] }} //TODO parameterize\n        handlers={{\n          focusSidebar() {\n            let a = sideBarRef as any\n            a.current.focus()\n          },\n        }}\n      >\n        <DragDropContext\n          onDragStart={() => {\n            dispatch({ type: 'isDragging' })\n          }}\n          onDragEnd={onDragEnd}\n        >\n          <SplitPane\n            style={{\n              // overflow: 'auto',\n              height: '100vh',\n              borderTop: `6px solid ${purple}`,\n            }}\n            defaultSize='20%'\n            minSize={100}\n            maxSize={-300}\n            split='vertical'\n            pane2Style={{\n              overflowX: 'auto',\n              // overflow: 'auto',\n            }}\n          >\n            <SideBar\n              ref={sideBarRef}\n              searchValue={state.searchValue}\n              dispatch={dispatch}\n              isAnyItemDragging={state.isSideBarItemDragging}\n              items={[\n                {\n                  nodeId: 'functions',\n                  label: 'Functions',\n                  items: matchSorter(state.functions, state.searchValue, {\n                    keys: ['name'],\n                  }),\n                },\n                {\n                  nodeId: 'types',\n                  label: 'Data Types',\n                  items: matchSorter(state.dataTypes, state.searchValue, {\n                    keys: ['type'],\n                  }),\n                },\n                {\n                  nodeId: 'effects',\n                  label: 'Effects',\n                  items: matchSorter(state.effects, state.searchValue, {\n                    keys: ['name'],\n                  }),\n                },\n              ]}\n            ></SideBar>\n            <CardHStack></CardHStack>\n          </SplitPane>\n        </DragDropContext>\n      </HotKeys>\n    </StateContext.Provider>\n  )\n}\n//\"calc(100vh - 3rem)\"\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { extendTheme } from '@chakra-ui/react'\n\nconst purple = '#520066'\n\nexport default extendTheme({\n  styles: {\n    global: {\n      html: {\n        backgroundColor: purple,\n        minWidth: '860px',\n        '*:focus': {\n          outline: 'none !important',\n          boxShadow: 'none !important',\n        },\n      },\n    },\n  },\n  number: 3,\n  bool: false,\n  shadows: {\n    outline: 'none',\n  },\n  colors: {\n    unison: {\n      purple,\n      lightPurple: '#8f228f',\n      aqua: '#3cd6b7',\n      limegreen: '#88cc00',\n      green: '#008f30',\n      yellow: '#ffc41f',\n      orange: '#ff8800',\n      pink: '#ff4756',\n      lightblue: '#00adeb',\n      blue: '#0951e0',\n      darkblue: '#00018f',\n      gray: '#616c77',\n      //derived:\n      darkOrange: '#572E00',\n      darkGreen: '#005C1F',\n      darkPink: '#C4333F',\n    },\n  },\n})\n\n/*\ncolors:\n  - name: 'lightpurple'\n    base: '#8f228f'\n  - name: 'purple'\n    base: '#520066'\n\n  - name: 'aqua'\n    base: '#3cd6b7'\n  - name: 'limegreen'\n    base: '#88cc00'\n  - name: 'green'\n    base: '#008f30'\n\n  - name: 'yellow'\n    base: '#ffc41f'\n  - name: 'orange'\n    base: '#ff8800'\n  - name: 'pink'\n    base: '#ff4756'\n\n  - name: 'lightblue'\n    base: '#00adeb'\n  - name: 'blue'\n    base: '#0951e0'\n  - name: 'darkblue'\n    base: '#00018f'\n\n  - name: 'black'\n    base: 'black'\n  - name: 'white'\n    base: 'white'\n  - name: 'gray'\n    base: '#616c77'\n\n\n      \n@import 'data/colors.yml'; // $colors\n\n$tones: (\n  xxx-dark:  ( mix: 'shade', percentage: 80% ),\n  xx-dark:   ( mix: 'shade', percentage: 55% ),\n  x-dark:    ( mix: 'shade', percentage: 45% ),\n  dark:      ( mix: 'shade', percentage: 20% ),\n  mid:       ( mix: 'tint',  percentage: 20% ),\n  light:     ( mix: 'tint',  percentage: 45% ),\n  x-light:   ( mix: 'tint',  percentage: 60% ),\n  xx-light:  ( mix: 'tint',  percentage: 75% ),\n  xxx-light: ( mix: 'tint',  percentage: 90% )\n);\n\n$UCpalettes: generate-palettes($colors, $tones);\n\n@function palette($name, $tone: 'base') {\n  $palette: map-get($UCpalettes, $name);\n  $color: map-get($palette, $tone);\n  @return $color;\n}\n*/\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ColorModeScript, extendTheme, ChakraProvider } from '@chakra-ui/react'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import * as React from 'react'\nimport { Code, CodeProps, TextProps, useTheme } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\n\nconst TypeBadge = ({\n  typeAsString,\n  // fontSize,\n  as,\n  children,\n  rounded,\n}: {\n  typeAsString: Itype['type']\n  // fontSize?: CodeProps['fontSize']\n  as?: CodeProps['as']\n  rounded?: CodeProps['rounded']\n  children?: any\n}) => {\n  // const {\n  //   colors: {\n  //     unison: { orange, yellow },\n  //   },\n  // } = useTheme()\n\n  return (\n    <Code\n      as={as}\n      // fontSize={fontSize}\n      // paddingX={1}\n      // paddingY={0.5}\n      sx={\n        {\n          string: { color: 'unison.darkOrange', backgroundColor: 'yellow.100' },\n          number: {\n            color: 'unison.darkGreen',\n            backgroundColor: 'green.100',\n          },\n          boolean: { color: 'unison.pink', backgroundColor: 'pink.100' },\n          function: { color: 'unison.purple', backgroundColor: 'purple.100' },\n          object: { color: 'black', backgroundColor: 'gray.100' },\n          array: { color: 'black', backgroundColor: 'gray.100' },\n          undefined: { color: 'black', backgroundColor: 'gray.100' },\n          null: { color: 'black', backgroundColor: 'gray.100' },\n        }[typeAsString]\n      }\n      rounded={rounded ?? 'base'}\n    >\n      {children ?? typeAsString}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n","import * as React from 'react'\nimport {\n  Fade,\n  Button,\n  Box,\n  Switch,\n  IconButton,\n  HStack,\n  ListItem,\n  UnorderedList,\n  Text,\n  Link,\n} from '@chakra-ui/react'\nimport {\n  ArrowUpDownIcon,\n  CheckIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  CloseIcon,\n  DeleteIcon,\n} from '@chakra-ui/icons'\nimport PopoverExplanation from '../PopoverExplanation'\nimport TypeBadge from '../TypeBadge'\nimport { Itype } from '../interfaces'\nimport { FunctionItem } from '../Sidebar'\nimport { GoVersions } from 'react-icons/go'\nimport { Action, StateContext } from '../../state'\nconst { useContext } = React\n\nexport const SaveButton = ({\n  onClick,\n  fadeIn,\n  disabled,\n}: {\n  onClick: () => void\n  fadeIn: boolean\n  disabled: boolean\n}) =>\n  fadeIn ? (\n    <Fade in={true}>\n      {/* Save button */}\n      <Button\n        color={disabled ? 'gray.300' : 'unison.green'}\n        sx={{ '&:hover': { backgroundColor: 'green.50' } }}\n        variant='ghost'\n        leftIcon={<CheckIcon />}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        Save\n      </Button>\n    </Fade>\n  ) : null\n\nexport const ClearButton = ({\n  onClick,\n  fadeIn,\n}: {\n  onClick: () => void\n  fadeIn: boolean\n}) =>\n  fadeIn ? (\n    <Fade in={true}>\n      <Button\n        color='unison.darkPink'\n        sx={{ '&:hover': { backgroundColor: 'red.50' } }}\n        variant='ghost'\n        leftIcon={<DeleteIcon />}\n        onClick={onClick}\n      >\n        Clear\n      </Button>\n    </Fade>\n  ) : null\n\nexport const DocsExplanation = () => (\n  <PopoverExplanation label='Docs card explanation' title='Docs card'>\n    <UnorderedList>\n      <ListItem>\n        Docs is an editable view of the documentation for a function.\n      </ListItem>\n      <ListItem>\n        The signature input will autocomplete types (string/boolean/number so\n        far) and arrows but won't prevent invalid states, which will disable the\n        \"Save\" button.{' '}\n      </ListItem>\n      <ListItem>\n        The description can reference other functions with \"@\" (triggers\n        autocomplete) and navigate to them by clicking on the link. We could\n        imagine adding tests and examples here.\n      </ListItem>\n      <ListItem>Navigation can be </ListItem>\n      <UnorderedList styleType='none'>\n        <ListItem>\n          <ArrowUpDownIcon\n            size={'xs'}\n            sx={{ transform: 'rotate(90deg)' }}\n          ></ArrowUpDownIcon>{' '}\n          browser history style\n        </ListItem>\n        <ListItem>\n          <GoVersions\n            style={{ width: '16px', height: '16px', display: 'inline' }}\n          ></GoVersions>{' '}\n          panes style (like\n          <Link\n            href='https://notes.andymatuschak.org/About_these_notes'\n            color='unison.purple'\n            _hover={{ color: 'unison.lightPurple' }}\n          >\n            {' '}\n            Andy Matuschak's notes\n          </Link>\n          )\n        </ListItem>\n      </UnorderedList>\n    </UnorderedList>\n  </PopoverExplanation>\n)\n\nexport const TypeSuggestionList = ({\n  typeSuggestions,\n  selectedIndex,\n  left,\n  top,\n}: {\n  typeSuggestions: {\n    title: Itype['type']\n  }[]\n  selectedIndex: number\n  left: number\n  top: number\n}) => (\n  <Box\n    as='ul'\n    position='fixed'\n    left={left}\n    top={top}\n    listStyleType='none'\n    padding={1}\n    boxShadow='lg'\n    backgroundColor='white'\n    rounded='sm'\n    zIndex={1000}\n  >\n    {typeSuggestions.map((s, i) => (\n      <Box\n        as='li'\n        key={s.title}\n        display='block'\n        textAlign='center'\n        paddingX={1}\n        paddingY={1}\n        backgroundColor={\n          i === selectedIndex\n            ? 'unison.aqua'\n            : s.title === 'string'\n            ? 'yellow.100'\n            : s.title === 'number'\n            ? 'green.100'\n            : s.title === 'boolean'\n            ? 'pink.100'\n            : 'white'\n        }\n      >\n        <TypeBadge rounded={'none'} typeAsString={s.title}>\n          {s.title}\n        </TypeBadge>\n      </Box>\n    ))}\n  </Box>\n)\n\nexport const FunctionSuggestionList = ({\n  functionSuggestions,\n  selectedIndex,\n  left,\n  top,\n  onClick,\n}: {\n  functionSuggestions: {\n    name: string\n  }[]\n  selectedIndex: number\n  left: number\n  top: number\n  onClick: (index: number) => void\n}) => (\n  <Box\n    as='ul'\n    position='fixed'\n    left={left}\n    top={top}\n    listStyleType='none'\n    padding={1}\n    boxShadow='lg'\n    backgroundColor='white'\n    rounded='sm'\n    zIndex={1000}\n  >\n    {functionSuggestions.map((s, i) => (\n      <Box\n        onClick={() => onClick(i)}\n        as='li'\n        key={s.name}\n        display='block'\n        textAlign='center'\n        paddingX={1}\n        paddingY={1}\n        backgroundColor={i === selectedIndex ? 'unison.aqua' : 'white'}\n        rounded={'base'}\n      >\n        {s.name}\n      </Box>\n    ))}\n  </Box>\n)\n\nexport const DocsNavigationTypeSelector = ({\n  navigationType,\n  dispatch,\n}: {\n  navigationType: 'history' | 'panes'\n  dispatch: React.Dispatch<Action>\n}) => {\n  return (\n    <IconButton\n      onClick={() => {\n        dispatch({\n          type: 'changeNavigationType',\n          navigationType: navigationType === 'history' ? 'panes' : 'history',\n        })\n      }}\n      variant='ghost'\n      sx={{\n        color: 'unison.purple',\n        '&:hover': {\n          color: 'unison.aqua',\n        },\n      }}\n      aria-label='Change navigation type'\n      size='md'\n      icon={\n        navigationType === 'panes' ? (\n          <ArrowUpDownIcon\n            sx={{ transform: 'rotate(90deg)' }}\n          ></ArrowUpDownIcon>\n        ) : (\n          <GoVersions></GoVersions>\n        )\n      }\n    ></IconButton>\n\n    /* <Switch\n        size='sm'\n        isChecked={navigationType === 'panes'}\n        marginX={1}\n        onChange={() => {\n          dispatch({\n            type: 'changeNavigationType',\n            navigationType: navigationType === 'history' ? 'panes' : 'history',\n          })\n        }}\n      ></Switch> */\n  )\n}\n\nconst getButtonStyles = (isDisabled: boolean) => ({\n  variant: 'ghost',\n  sx: isDisabled\n    ? {\n        color: 'grey.300',\n      }\n    : {\n        color: 'unison.purple',\n        '&:hover': {\n          color: 'unison.aqua',\n        },\n      },\n})\n\nexport const DocsNavigationArrows = () => {\n  const { state, dispatch } = useContext(StateContext)\n  const size = '6'\n  const backDisabled = state.docCardsSelectedIndex === 0\n  const forwardDisabled =\n    state.docCardsSelectedIndex === state.docCards.length - 1\n  return (\n    <HStack>\n      <IconButton\n        onClick={() => {\n          dispatch({\n            type: 'docsNavigate',\n            to: 'back',\n          })\n        }}\n        aria-label='Navigate back'\n        {...getButtonStyles(backDisabled)}\n        disabled={backDisabled}\n        icon={<ChevronLeftIcon w={size} h={size}></ChevronLeftIcon>}\n      ></IconButton>\n\n      <IconButton\n        margin={0}\n        onClick={() => {\n          dispatch({\n            type: 'docsNavigate',\n            to: 'forwards',\n          })\n        }}\n        disabled={forwardDisabled}\n        aria-label='Navigate forwads'\n        {...getButtonStyles(forwardDisabled)}\n        icon={<ChevronRightIcon w={size} h={size}></ChevronRightIcon>}\n      ></IconButton>\n    </HStack>\n  )\n}\n","import produce from 'immer'\nimport * as React from 'react'\nimport { v4 as uuid } from 'uuid'\nimport { Ifunction, Ieffect, Itype } from './components/interfaces'\nimport DocsCard from './components/DocsCard/DocsCard'\n\ntype Reducer<A, B> = (a: A, b: B) => A\n\n/* See https://github.com/jefflombard/use-reducer-logger */\nconst getCurrentTimeFormatted = () => {\n  const currentTime = new Date()\n  const hours = currentTime.getHours()\n  const minutes = currentTime.getMinutes()\n  const seconds = currentTime.getSeconds()\n  const milliseconds = currentTime.getMilliseconds()\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`\n}\nconst useLoggerReducer = <A, B extends { type: string | number }>(\n  reducer: Reducer<A, B>,\n  initialState: A,\n) => {\n  const reducerWithLogger = React.useCallback(\n    (state: A, action: B): A => {\n      const next = reducer(state, action)\n      console.group(\n        `%cAction: %c${action.type} %cat ${getCurrentTimeFormatted()}`,\n        'color: lightgreen; font-weight: bold;',\n        'color: white; font-weight: bold;',\n        'color: lightblue; font-weight: lighter;',\n      )\n      console.log(\n        '%cPrevious State:',\n        'color: #9E9E9E; font-weight: 700;',\n        state,\n      )\n      console.log('%cAction:', 'color: #00A7F7; font-weight: 700;', action)\n      console.log('%cNext State:', 'color: #47B04B; font-weight: 700;', next)\n      console.groupEnd()\n      return next\n    },\n    [reducer],\n  )\n\n  return React.useReducer(reducerWithLogger, initialState)\n}\n\nconst initialFunctions: Array<Ifunction> = [\n  {\n    name: 'add',\n    parameters: [{ type: 'number' }, { type: 'number' }],\n    returns: { type: 'number' },\n    fn: function add(x: any, y: any) {\n      return x + y\n    },\n    description: 'Adds two numbers together',\n  },\n  {\n    name: 'id',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'string' },\n    fn: function id(s: any) {\n      return s\n    },\n    description: 'monomorphic id for string',\n  },\n  {\n    name: 'greaterThan',\n    parameters: [{ type: 'number' }, { type: 'number' }],\n    returns: { type: 'boolean' },\n    fn: function greaterThan(n: number, m: number) {\n      return m > n\n    },\n    description: 'Number is greater than another',\n  },\n  {\n    name: 'length',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'number' },\n    fn: function length(s: any) {\n      return s.length\n    },\n    description: 'Takes a string and returns how many characters it has',\n  },\n  {\n    name: 'upperCase',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'string' },\n    fn: function (s: any) {\n      return s.toUpperCase()\n    },\n    description:\n      'Takes a string and returns is with all characters in uppercase',\n  },\n]\nconst initialDataTypes: Array<Itype> = [\n  { type: 'string' },\n  { type: 'number' },\n  { type: 'boolean' },\n]\nconst initialEffects: Array<Ieffect> = []\n\nexport type Action =\n  | { type: 'isDragging' }\n  | { type: 'createFunction'; function: Ifunction; index: number }\n  | { type: 'dropOutside' }\n  | { type: 'dropFnFromSideBarOnFlowCard'; index: number; draggableId: string }\n  | {\n      type: 'dropFnFromFlowCardToFlowCard'\n      sourceIndex: number\n      destinationIndex: number\n    }\n  | { type: 'clearFlowCard' }\n  | { type: 'sideBarSearch'; value: string }\n  | { type: 'dropFnFromSideBarToDocsCard'; draggableId: string }\n  | { type: 'openDocs'; fnName: string; openerIndex: number }\n  | { type: 'closeDocsCard'; index: number }\n  | { type: 'clearDocsCard'; index: number }\n  | { type: 'newDocsCard' }\n  | { type: 'changeNavigationType'; navigationType: NavigationType }\n  | { type: 'docsNavigate'; to: 'forwards' | 'back' }\n// | {\n//     type: 'changeFunctionParamValue'\n//     paramValue: string | number | boolean\n//     paramIndex: number\n//     functionId: string\n//   }\nexport type NavigationType = 'history' | 'panes'\ntype DocsType = { type: 'creating' } | { type: 'editing'; fnName: string }\n\ntype State = {\n  functions: Ifunction[]\n  dataTypes: Itype[]\n  effects: Ieffect[]\n  isSideBarItemDragging: boolean\n  flowCardFunctions: Array<Ifunction & { id: string }>\n  docCardsNavigationType: NavigationType\n  docCardsSelectedIndex: number\n  docCards: Array<DocsType>\n  searchValue: string\n}\n\nconst initialState: State = {\n  functions: initialFunctions,\n  dataTypes: initialDataTypes,\n  effects: initialEffects,\n  isSideBarItemDragging: false,\n  flowCardFunctions: [],\n  docCardsNavigationType: 'panes',\n  docCardsSelectedIndex: 0,\n  docCards: [\n    { type: 'creating' },\n    // { type: 'editing', fnName: 'add' },\n    // { type: 'editing', fnName: 'id' },\n  ],\n  searchValue: '',\n}\n\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const listCopy = [...list]\n  const [removed] = listCopy.splice(startIndex, 1)\n  listCopy.splice(endIndex, 0, removed)\n  return listCopy\n}\nconst insert = <A>(list: Array<A>, index: number, item: A) => {\n  const listCopy = [...list]\n  listCopy.splice(index, 0, item)\n  return listCopy\n}\n\nconst changeAtIndex = <A>(list: Array<A>, index: number, item: A) => {\n  const listCopy = [...list]\n  listCopy.splice(index, 1, item)\n  return listCopy\n}\n\nconst getDefaultValue = (p: Itype) => {\n  return p.type === 'string'\n    ? ''\n    : p.type === 'number'\n    ? 0\n    : p.type === 'boolean'\n    ? false\n    : p.type === 'object'\n    ? ''\n    : p.type === 'undefined'\n    ? undefined\n    : p.type === 'null'\n    ? undefined\n    : ''\n}\nconst findFunction = ({\n  state,\n  name,\n  id,\n}: {\n  state: State\n  name: string\n  id: string\n}) => {\n  const fn = state.functions.find(f => f.name === name) as Ifunction\n  const parameters = fn.parameters.map(p => {\n    const value = getDefaultValue(p)\n    return {\n      ...p,\n      value,\n    }\n  })\n  const returns = { ...fn.returns, value: getDefaultValue(fn.returns) }\n  return { ...fn, parameters, returns, id }\n}\n\n// return {\n//   ...state,\n//   isSideBarItemDragging: false,\n//   flowCardFunctions: insert(state.flowCardFunctions, action.index, {\n//     name: action.draggableId.split('_')[1],\n//     id: uuid(),\n//   }),\n// }\n\n// export const fnSelector = (state: State) => ({\n//   name,\n//   id,\n// }: {\n//   name: string\n//   id: string\n// }) => {\n//   const fn = state.functions.find(f => f.name === name) as Ifunction\n//   return { ...fn, id }\n// }\n\nconst incrementWithinBounds = (i: number, as: any[]) =>\n  i === as.length - 1 ? i : i + 1\nconst decrementPositiveNumber = (i: number) => (i === 0 ? i : i - 1)\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'isDragging':\n      return { ...state, isSideBarItemDragging: true }\n    case 'createFunction':\n      const fnIndex = state.functions.findIndex(\n        f => f.name === action.function.name,\n      )\n      return fnIndex === -1\n        ? {\n            ...state,\n            functions: state.functions\n              .concat(action.function)\n              .sort((a, b) => a.name.localeCompare(b.name)),\n            docCards: changeAtIndex(state.docCards, action.index, {\n              type: 'editing',\n              fnName: action.function.name,\n            }),\n          }\n        : {\n            ...state,\n            functions: changeAtIndex(state.functions, fnIndex, action.function),\n          }\n    case 'dropOutside':\n      return { ...state, isSideBarItemDragging: false }\n    case 'dropFnFromSideBarOnFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: insert(\n          state.flowCardFunctions,\n          action.index,\n          findFunction({\n            state,\n            name: action.draggableId.split('_')[1],\n            id: uuid(),\n          }),\n        ),\n      }\n    case 'dropFnFromFlowCardToFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: reorder(\n          state.flowCardFunctions,\n          action.sourceIndex,\n          action.destinationIndex,\n        ),\n      }\n    case 'clearFlowCard':\n      return {\n        ...state,\n        flowCardFunctions: [],\n      }\n    case 'sideBarSearch':\n      return {\n        ...state,\n        searchValue: action.value,\n      }\n    case 'dropFnFromSideBarToDocsCard':\n      return {\n        ...state,\n        docCards: [\n          { type: 'editing', fnName: action.draggableId.split('_')[1] },\n        ],\n        docCardsSelectedIndex: 0,\n      }\n    case 'openDocs': {\n      if (\n        /*fn doesn't exist*/\n        !state.functions.find(f => f.name === action.fnName) ??\n        /* already open */\n        state.docCards.find(\n          d => d.type === 'editing' && d.fnName === action.fnName,\n        )\n      ) {\n        return state\n      }\n      const docCards = state.docCards.slice(0, action.openerIndex + 1).concat({\n        type: 'editing',\n        fnName: action.fnName,\n      })\n      const docCardsSelectedIndex = incrementWithinBounds(\n        state.docCardsSelectedIndex,\n        docCards,\n      )\n      return {\n        ...state,\n        docCardsSelectedIndex,\n        docCards,\n      }\n    }\n    case 'closeDocsCard': {\n      if (state.docCardsNavigationType === 'history') {\n        return {\n          ...state,\n          docCards: [],\n          docCardsSelectedIndex: 0,\n        }\n      }\n      const docCards = state.docCards.filter((_, i) => i !== action.index)\n      const docCardsSelectedIndex = decrementPositiveNumber(\n        state.docCardsSelectedIndex,\n      )\n      return {\n        ...state,\n        docCards,\n        docCardsSelectedIndex,\n      }\n    }\n    case 'clearDocsCard':\n      return {\n        ...state,\n        docCards: changeAtIndex(state.docCards, action.index, {\n          type: 'creating',\n        }),\n      }\n    case 'newDocsCard':\n      return {\n        ...state,\n        docCards: [{ type: 'creating' }],\n      }\n    case 'changeNavigationType':\n      return {\n        ...state,\n        docCardsNavigationType: action.navigationType,\n        docCardsSelectedIndex: state.docCards.length - 1,\n      }\n    case 'docsNavigate': {\n      const docCardsSelectedIndex =\n        action.to === 'forwards'\n          ? incrementWithinBounds(state.docCardsSelectedIndex, state.docCards)\n          : decrementPositiveNumber(state.docCardsSelectedIndex)\n\n      return {\n        ...state,\n        docCardsSelectedIndex,\n      }\n    }\n  }\n}\n\nexport const StateContext = React.createContext<{\n  state: State\n  dispatch: React.Dispatch<Action>\n}>({ state: initialState, dispatch() {} })\n\nexport const useAppReducer =\n  process.env.NODE_ENV === 'development'\n    ? () => useLoggerReducer(reducer, initialState)\n    : () => React.useReducer(reducer, initialState)\n","import { QuestionIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport {\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverHeader,\n  PopoverBodyProps,\n  Tooltip,\n} from '@chakra-ui/react'\nimport React from 'react'\n\nconst PopoverExplanation = (props: {\n  children: PopoverBodyProps['children']\n  label: string\n  title: string\n}) => {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <IconButton\n          aria-label={props.label}\n          icon={\n            <Tooltip label={props.label} aria-label={props.label} hasArrow>\n              {/* <QuestionOutlineIcon /> */}\n              <QuestionIcon />\n            </Tooltip>\n          }\n          size='lg'\n          // colorScheme='purple'\n          color='unison.purple'\n          variant='ghost'\n          sx={{\n            '&:hover': {\n              color: 'unison.aqua',\n            },\n          }}\n        />\n      </PopoverTrigger>\n\n      {/* <PopoverContent borderColor='unison.purple'> */}\n      <PopoverContent>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader>{props.title}</PopoverHeader>\n        <PopoverBody>{props.children}</PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport default PopoverExplanation\n"],"sourceRoot":""}