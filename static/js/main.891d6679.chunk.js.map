{"version":3,"sources":["components/PopoverExplanation.tsx","components/DocsCard/DocsCard.tsx","components/Editor.tsx","components/EditableText.tsx","components/Sidebar.tsx","components/CardHStack.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","theme.ts","index.tsx","components/TypeBadge.tsx","components/DocsCard/components.tsx","state.ts"],"names":["PopoverExplanation","props","aria-label","label","icon","hasArrow","size","color","variant","sx","title","children","hasCommandModifier","KeyBindingUtil","useCallback","React","autocompleteKeyBindingFn","e","key","getDefaultKeyBinding","defaultName","typeSuggestions","safeEval","s","eval","error","getParamsAndReturns","split","arrow","map","type","trim","isSignatureCorrect","paramsAndReturns","length","every","p","includes","getFilteredTypeSuggestions","typeSuggestions_","inputValue","undefined","some","matchSorter","keys","getFilteredFunctions","functions","typeToName","x","n","suffix","getParamNames","arr","result","alreadySeenTypes","forEach","iType","paramName","push","findWithRegex","regex","contentBlock","callback","matchArr","start","text","getText","exec","index","signatureDecorator","CompositeDecorator","strategy","cb","contentState","RegExp","join","component","typeAsString","decoratedText","as","HANDLE_REGEX","getStateValueFromFunc","descriptionDecorator","func","name","signature","EditorState","createWithContent","ContentState","createFromText","parameters","concat","returns","description","code","fn","toString","setOriginalState","originalState","state","newOriginalState","signatureString","getCurrentContent","getPlainText","descriptionString","current","DocsCard","dispatch","navigationType","fontSize","fontStyle","style","direction","unicodeBidi","data-offset-key","offsetKey","onClick","openerIndex","fnName","slice","setState","previousFunc","setPreviousFunc","closeButtonRef","scrollIntoView","behavior","onChangeName","nameFontStyle","nameColor","onChangeDescription","descriptionHasText","hasText","descriptionFontStyle","descriptionColor","autocompleteDescription","signatureEditorRef","signatureEditorParentRef","coordsSignatureEditor","onChangeSignatureEditor","newEditorState","getLastChangeType","getFirstBlock","newText","endsWith","previousMeaningfulCharIsArrow","replace","trimEnd","previousCharIsClosingBracket","substr","moveFocusToEnd","window","requestAnimationFrame","selection","getSelection","rangeCount","getHasFocus","range","getRangeAt","wholeWordText","startContainer","textContent","lastIndexOf","substring","left","getBoundingClientRect","editorParent","coords","top","bottom","setAutocompleteState","startIndex","selectedIndex","handleKeyCommand","command","filteredSuggestions","blur","currentSelectionState","anchorOffset","getAnchorOffset","anchorKey","getAnchorKey","currentContent","blockText","getBlockForKey","console","log","autocompleteState","textToInsert","entityKey","createEntity","getLastCreatedEntityKey","mentionTextSelection","merge","focusOffset","insertingContent","Modifier","replaceText","params","paramNames","editorValue","signatureError","hasChanges","onClearButtonClick","backgroundColor","padding","minHeight","display","flexDirection","transition","flexShrink","width","maxWidth","position","flexGrow","overflowY","borderLeft","paddingLeft","alignItems","fadeIn","validParams","pop","function","disabled","ref","scrollMarginRight","marginTop","droppableId","provided","snapshot","innerRef","droppableProps","flex","height","overflow","paddingX","paddingY","value","onChange","placeholder","textColor","marginBottom","_focus","outline","editorState","keyBindingFn","className","_","v","onChangeCode","Editor","language","theme","options","minimap","enabled","lineNumbers","EditableText","forwardRef","FunctionItem","wrap","_hover","rounded","flexWrap","i","TypeBadge","ArrowForward","marginX","getFunctionRenderItem","rubric","draggableProps","dragHandleProps","useTreeItemStyles","makeStyles","root","content","cursor","FunctionTreeItem","TreeItem","classes","isAnyItemDragging","nodeId","renderClone","isDropDisabled","shouldRenderClone","draggingFromThisWith","draggableId","TypeTreeItem","Sidebar","items","searchValue","useTheme","colors","unison","purple","lightPurple","aqua","isHoveringSearch","setIsHoveringSearch","isFocusedSearch","setFocusedSearch","onMouseEnterSearch","onMouseLeaveSearch","paddingTop","whiteSpace","onMouseEnter","onMouseLeave","pointerEvents","Search","borderBottomColor","focusBorderColor","borderRadius","borderTop","borderRight","borderBottom","onFocus","setSelectionRange","onBlur","target","background","right","TreeView","selected","defaultCollapseIcon","ChevronDown","defaultExpandIcon","ChevronRight","onNodeFocus","draggable","document","querySelector","querySelectorAll","classList","remove","div","parentElement","li","parentMenu","previous","previousElementSibling","next","nextElementSibling","bound","MouseTrap","bind","focus","add","item","fontWeight","innerItem","id","CardHStack","overflowX","count","flex-grow","App","useAppReducer","onDragEnd","dropResult","source","destination","sourceIndex","destinationIndex","sideBarRef","useToken","Provider","keyMap","focusSidebar","handlers","onDragStart","defaultSize","minSize","maxSize","pane2Style","isSideBarItemDragging","dataTypes","effects","docCards","docCardsNavigationType","docCardsSelectedIndex","doc","find","f","in","leftIcon","Add","colorScheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","extendTheme","styles","global","html","minWidth","boxShadow","number","bool","shadows","limegreen","green","yellow","orange","pink","lightblue","blue","darkblue","gray","darkOrange","darkGreen","darkPink","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","string","boolean","object","array","null","useContext","SaveButton","ClearButton","DocsExplanation","TypeSuggestionList","listStyleType","zIndex","textAlign","DocsNavigationTypeSelector","transform","getButtonStyles","isDisabled","DocsNavigationArrows","StateContext","backDisabled","forwardDisabled","to","w","h","margin","initialState","toUpperCase","y","m","flowCardFunctions","reorder","list","endIndex","listCopy","splice","removed","insert","changeAtIndex","getDefaultValue","findFunction","incrementWithinBounds","decrementPositiveNumber","reducer","action","fnIndex","findIndex","uuid","d","filter"],"mappings":"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","file":"static/js/main.891d6679.chunk.js","sourcesContent":["import { QuestionIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport {\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverHeader,\n  PopoverBodyProps,\n  Tooltip,\n} from '@chakra-ui/react'\nimport React from 'react'\n\nconst PopoverExplanation = (props: {\n  children: PopoverBodyProps['children']\n  label: string\n  title: string\n}) => {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <IconButton\n          aria-label={props.label}\n          icon={\n            <Tooltip label={props.label} aria-label={props.label} hasArrow>\n              {/* <QuestionOutlineIcon /> */}\n              <QuestionIcon />\n            </Tooltip>\n          }\n          size='lg'\n          // colorScheme='purple'\n          color='unison.purple'\n          variant='ghost'\n          sx={{\n            '&:hover': {\n              color: 'unison.aqua',\n            },\n          }}\n        />\n      </PopoverTrigger>\n\n      {/* <PopoverContent borderColor='unison.purple'> */}\n      <PopoverContent>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader>{props.title}</PopoverHeader>\n        <PopoverBody>{props.children}</PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport default PopoverExplanation\n","import * as React from 'react'\nimport {\n  HStack,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  Text,\n  Code,\n  IconButton,\n  Box,\n  Divider,\n  Flex,\n  Heading,\n  Spacer,\n  Button,\n  Fade,\n} from '@chakra-ui/react'\n// import { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'\nimport { CloseIcon, ArrowUpDownIcon } from '@chakra-ui/icons'\nimport MonacoEditor from '../Editor'\n\nimport { Itype, Ifunction } from '../interfaces'\nimport { matchSorter } from 'match-sorter'\nimport TypeBadge from '../TypeBadge'\nimport EditableText from '../EditableText'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { Action, NavigationType } from '../../state'\nimport {\n  CompositeDecorator,\n  Editor as DraftEditor,\n  EditorState,\n  ContentState,\n  Entity,\n  Modifier,\n} from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport './draftEditorStyles.css'\nimport AutocompleteInput from '../autocomplete-react-draft/src/index'\n// import SuggestionList from './autocomplete-react-draft/src/suggestions'\nimport { getDefaultKeyBinding, KeyBindingUtil } from 'draft-js'\nimport {\n  ClearButton,\n  DocsExplanation,\n  DocsNavigationArrows,\n  DocsNavigationTypeSelector,\n  SaveButton,\n  TypeSuggestionList,\n} from './components'\nconst { hasCommandModifier } = KeyBindingUtil\n\nconst { useCallback } = React\n\nconst autocompleteKeyBindingFn = (e: any): string | null => {\n  //TODO e type\n  switch (e.key) {\n    case 'ArrowDown':\n      return 'down'\n    case 'ArrowUp':\n      return 'up'\n    case 'Escape':\n      return 'close'\n    case 'Enter':\n      return 'select'\n    case 'Tab':\n      return 'select'\n    default:\n      return getDefaultKeyBinding(e)\n  }\n}\n\nconst defaultName = 'name'\n// const defaultType = '_'\nconst typeSuggestions: Array<{ title: Itype['type'] /*| 'New type' */ }> = [\n  { title: 'string' },\n  { title: 'boolean' },\n  { title: 'number' },\n]\n\nconst safeEval = (s: string) => {\n  try {\n    return eval(`(() => ${s})()`)\n  } catch (error) {\n    return null\n  }\n}\nconst getParamsAndReturns = (s: string) =>\n  s.split(arrow).map(s => ({ type: s.trim() }))\n\nconst isSignatureCorrect = (\n  paramsAndReturns: Array<{ type: string }>,\n): paramsAndReturns is Array<Itype> =>\n  paramsAndReturns.length > 1 &&\n  paramsAndReturns.every(p => ['boolean', 'number', 'string'].includes(p.type))\n\nconst getFilteredTypeSuggestions = (\n  typeSuggestions_: typeof typeSuggestions,\n  inputValue?: string,\n) => {\n  if (inputValue === undefined || inputValue === null) return []\n  if (inputValue === '' || inputValue === ' ') return typeSuggestions\n  if (typeSuggestions.some(s => s.title === inputValue)) return []\n  return matchSorter(typeSuggestions_, inputValue, { keys: ['title'] })\n}\n\nconst getFilteredFunctions = (functions: Ifunction[], inputValue?: string) => {\n  if (inputValue === undefined || inputValue === null) return []\n  if (inputValue === '') return functions\n  return matchSorter(functions, inputValue, { keys: ['name'] })\n}\n\nconst arrow = '->'\n\nconst typeToName = (x: { type: string }, n: number): string => {\n  const suffix = n || ''\n  switch (x.type) {\n    case 'string':\n      return 'str' + suffix\n    case 'number':\n      return 'num' + suffix\n    case 'boolean':\n      return 'bool' + suffix\n    default:\n      return 'x'\n    // case 'function':\n    //   return ['f', 'g', 'h', 'i', 'j'][n]\n    // case 'object':\n    //   return 'o' + suffix\n\n    // case 'array':\n    //   return '' //TODO\n    // case 'undefined':\n    // case 'null':\n    //   return ''\n  }\n}\nconst getParamNames = (arr: Array<{ type: string }>): string[] => {\n  let result: string[] = []\n  let alreadySeenTypes: any = {}\n  arr.forEach(iType => {\n    const paramName = typeToName(iType, alreadySeenTypes[iType.type])\n    result.push(paramName)\n    alreadySeenTypes[iType.type] = (alreadySeenTypes[iType.type] || 0) + 1\n  })\n  return result\n}\n\nfunction findWithRegex(regex: any, contentBlock: any, callback: any) {\n  const text = contentBlock.getText()\n  let matchArr, start\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index\n    callback(start, start + matchArr[0].length)\n  }\n}\n\nconst signatureDecorator = new CompositeDecorator([\n  {\n    //TypeBadge\n    strategy(contentBlock, cb, contentState) {\n      findWithRegex(\n        new RegExp(\n          `(${typeSuggestions.map(({ title }) => title).join('|')})`,\n          'gi',\n        ),\n        contentBlock,\n        cb,\n      )\n    },\n    component(props: any) {\n      return (\n        <TypeBadge\n          typeAsString={props.decoratedText}\n          children={props.children}\n          as='span'\n        />\n      )\n    },\n  },\n])\n\nconst HANDLE_REGEX = /@[\\w]+/g\n\nconst getStateValueFromFunc = (\n  descriptionDecorator: CompositeDecorator,\n  func?: Ifunction,\n): {\n  name: string\n  signature: EditorState\n  description: EditorState\n  code: string\n} => {\n  return {\n    name: func?.name || '',\n    signature: EditorState.createWithContent(\n      ContentState.createFromText(\n        func?.parameters\n          .concat(func.returns)\n          .map(p => p.type)\n          .join(` ${arrow} `) || '',\n      ),\n      signatureDecorator,\n    ),\n    description: EditorState.createWithContent(\n      ContentState.createFromText(func?.description || ''),\n      descriptionDecorator,\n    ),\n    code: func?.fn.toString() || '',\n  }\n}\n\ntype DocsCardState = {\n  name: string\n  signature: EditorState\n  description: EditorState\n  code: string\n}\n\nconst setOriginalState = (\n  originalState: React.MutableRefObject<{\n    name: string\n    signatureString: string\n    descriptionString: string\n    code: string\n  }>,\n  state: DocsCardState,\n) => {\n  const newOriginalState = {\n    name: state.name,\n    signatureString: state.signature.getCurrentContent().getPlainText(),\n    descriptionString: state.description.getCurrentContent().getPlainText(),\n    code: state.code,\n  }\n\n  originalState.current = newOriginalState\n}\n\n/**\n *\n *\n * DOCS CARD\n *\n *\n */\n\nconst DocsCard = ({\n  func,\n  dispatch,\n  index,\n  functions,\n  navigationType,\n}: {\n  func?: Ifunction\n  dispatch: React.Dispatch<Action>\n  index: number\n  functions: Ifunction[]\n  navigationType?: NavigationType\n}) => {\n  const descriptionDecorator = new CompositeDecorator([\n    {\n      //TypeBadge\n      strategy(contentBlock, cb, contentState) {\n        findWithRegex(HANDLE_REGEX, contentBlock, cb)\n      },\n      component(props: any) {\n        return (\n          <Button\n            as='span'\n            variant='link'\n            color='unison.aqua'\n            fontSize='inherit'\n            fontStyle='inherit'\n            style={{\n              direction: 'ltr',\n              unicodeBidi: 'bidi-override',\n            }}\n            data-offset-key={props.offsetKey}\n            onClick={e => {\n              dispatch({\n                type: 'openDocs',\n                openerIndex: index,\n                fnName: props.decoratedText.slice(1),\n              })\n            }}\n          >\n            {props.children}\n          </Button>\n        )\n      },\n    },\n  ])\n  const originalState = React.useRef<{\n    name: string\n    signatureString: string\n    descriptionString: string\n    code: string\n  }>({\n    name: '',\n    signatureString: '',\n    descriptionString: '',\n    code: '',\n  })\n  const [state, setState] = React.useState<DocsCardState>(() => {\n    const state = getStateValueFromFunc(descriptionDecorator, func)\n    setOriginalState(originalState, state)\n    return state\n  })\n\n  const [previousFunc, setPreviousFunc] = React.useState(func)\n  if (previousFunc !== func) {\n    //reference check on function from state.functions\n    setPreviousFunc(func)\n    const state = getStateValueFromFunc(descriptionDecorator, func)\n    setOriginalState(originalState, state)\n    setState(state)\n  }\n  const { name, signature, description, code } = state\n\n  const closeButtonRef = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    closeButtonRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }, [])\n\n  /* Name */\n  const onChangeName = (name: string) => setState(state => ({ ...state, name }))\n  const nameFontStyle = [defaultName, ''].includes(name) ? 'italic' : 'normal'\n  const nameColor = [defaultName, ''].includes(name) ? 'gray.400' : 'normal'\n\n  /* Description */\n  const onChangeDescription = (description: EditorState) =>\n    setState(state => ({ ...state, description }))\n  const descriptionHasText = description.getCurrentContent().hasText()\n  const descriptionFontStyle = descriptionHasText ? 'normal' : 'italic'\n  const descriptionColor = descriptionHasText ? 'normal' : 'gray.400'\n  // const descriptionEditorRef = React.useRef(null)\n  const [\n    autocompleteDescription,\n    setAutocompleteDescription,\n  ] = React.useState<any>(null)\n  const filteredFunctions = getFilteredFunctions(\n    functions,\n    autocompleteDescription?.text,\n  )\n\n  /* Signature */\n\n  // const [signatureEditorState, setSignatureEditorState] = React.useState(() =>\n  //   EditorState.createEmpty(signatureDecorator),\n  // )\n  const signatureEditorRef = React.useRef<DraftEditor>(null)\n  const signatureEditorParentRef = React.useRef<HTMLElement>(null)\n  const coordsSignatureEditor = React.useRef<any>(null)\n\n  const onChangeSignatureEditor = (e: EditorState) => {\n    let newEditorState: EditorState\n    switch (e.getLastChangeType()) {\n      case 'insert-characters':\n        const text = e.getCurrentContent().getFirstBlock().getText()\n        let newText = text\n        const triggerArrow = text.endsWith(',') || text.endsWith(' ')\n        if (triggerArrow) {\n          //TODO arrow component\n          const previousMeaningfulCharIsArrow = text\n            .replace(',', ' ')\n            .trimEnd()\n            .endsWith(arrow)\n          const previousCharIsClosingBracket = text\n            .substr(0, text.length - 1)\n            .endsWith('}')\n          if (previousMeaningfulCharIsArrow) {\n            newText = text //.substr(0, text.length - 1)\n          } else if (previousCharIsClosingBracket && text.endsWith(' ')) {\n            //abilities\n            newText = text\n          } else {\n            // only if last non-space or comma char is not arrow\n            newText = text.substr(0, text.length - 1).concat(` ${arrow} `)\n          }\n        }\n\n        newEditorState =\n          text === newText\n            ? e\n            : EditorState.moveFocusToEnd(\n                EditorState.push(\n                  e,\n                  ContentState.createFromText(newText),\n                  'insert-fragment',\n                ),\n              )\n        break\n      default:\n        newEditorState = e\n        break\n    }\n    setState(state => ({ ...state, signature: newEditorState }))\n\n    /* autocomplete */\n\n    window.requestAnimationFrame(() => {\n      const selection = window.getSelection() as Selection\n      if (selection.rangeCount === 0) {\n        //focus is outside\n        setAutocompleteState(null)\n        return\n      }\n      const stateSelection = newEditorState.getSelection()\n      // const contentState = newEditorState.getCurrentContent()\n      // const block = contentState.getBlockForKey(stateSelection.getStartKey())\n      if (\n        !stateSelection.getHasFocus() /*||\n        block.getEntityAt(stateSelection.getStartOffset() - 1*/\n      ) {\n        setAutocompleteState(null)\n        return\n      }\n      const range = selection.getRangeAt(0)\n      // let text = range.startContainer.textContent//!.substring(\n      //b|oolean -> 'b\n      //0,\n      //range.startOffset,\n      //)\n      // console.log(1, { text, stateSelection })\n      const wholeWordText = range.startContainer.textContent as string //b|oolean -> 'boolean'\n      let index = wholeWordText.length > 0 ? wholeWordText.lastIndexOf(' ') : 0\n      index = index === -1 ? 0 : index\n      const text = wholeWordText.substring(index).trim()\n\n      // console.log(3, { text })\n\n      let { left } = range.getBoundingClientRect()\n      const editorParent = signatureEditorParentRef.current as HTMLElement\n      const coords =\n        coordsSignatureEditor.current ?? editorParent.getBoundingClientRect()\n      coordsSignatureEditor.current = coords //TODO reset this cache\n      let top = coords.bottom\n      if (left === 0) {\n        left = coords.left\n      }\n\n      setAutocompleteState({\n        left,\n        top,\n        text,\n        wholeWordText,\n        startIndex: index,\n        selectedIndex: 0,\n      })\n    })\n  }\n  const handleKeyCommand = (command: 'up' | 'down' | 'close' | 'select') => {\n    switch (command) {\n      case 'up': {\n        setAutocompleteState((state: any) => ({\n          ...state,\n          selectedIndex:\n            state.selectedIndex === 0 ? 0 : state.selectedIndex - 1,\n        }))\n        return 'handled'\n      }\n      case 'down': {\n        setAutocompleteState((state: any) => ({\n          ...state,\n          selectedIndex:\n            state.selectedIndex === filteredSuggestions.length - 1\n              ? filteredSuggestions.length - 1\n              : state.selectedIndex + 1,\n        }))\n        return 'handled'\n      }\n      case 'close': {\n        signatureEditorRef.current!.blur()\n        return 'handled'\n      }\n      case 'select': {\n        const currentSelectionState = signature.getSelection()\n        const anchorOffset /*end */ = currentSelectionState.getAnchorOffset()\n        const anchorKey = currentSelectionState.getAnchorKey()\n        const currentContent = signature.getCurrentContent()\n        const currentBlock = currentContent.getBlockForKey(anchorKey)\n        const blockText = currentBlock.getText()\n        console.log({\n          blockText,\n          signatureString,\n          text: autocompleteState.text,\n          wholeWordText: autocompleteState.wholeWordText,\n          anchorOffset,\n          anchorKey,\n        })\n        // const start = blockText.substring(0, end).lastIndexOf(trigger)\n        // return {\n        // editorState,\n        // start,\n        // end,\n        // trigger,\n        // selectedIndex: autocompleteState.selectedIndex,\n        // }\n\n        // add suggestion\n        const textToInsert =\n          filteredSuggestions[autocompleteState.selectedIndex].title\n        const newCurrentContent = currentContent.createEntity(\n          'TYPE',\n          'IMMUTABLE',\n        )\n        const entityKey = newCurrentContent.getLastCreatedEntityKey()\n        const mentionTextSelection = currentSelectionState.merge({\n          anchorOffset: autocompleteState.startIndex,\n          focusOffset: anchorOffset,\n        })\n        let insertingContent = Modifier.replaceText(\n          signature.getCurrentContent(),\n          mentionTextSelection,\n          textToInsert,\n          undefined,\n          // ['link', 'BOLD'],\n          entityKey,\n        )\n        const newEditorState = EditorState.push(\n          signature,\n          insertingContent,\n          'apply-entity',\n        )\n        setState(state => ({ ...state, signature: newEditorState }))\n\n        // EditorState.forceSelection(\n        //   newEditorState,\n        //   insertingContent.getSelectionAfter(),\n        // ),\n\n        return 'handled'\n      }\n      default:\n        return 'not-handled'\n    }\n  }\n\n  const [autocompleteState, setAutocompleteState] = React.useState<any>(null)\n  const filteredSuggestions = getFilteredTypeSuggestions(\n    typeSuggestions,\n    autocompleteState?.text,\n  )\n\n  /* Code */\n\n  const onChangeCode = (code: string) => setState(state => ({ ...state, code }))\n  const signatureString = signature.getCurrentContent().getPlainText()\n  const paramsAndReturns = getParamsAndReturns(signatureString)\n  const params = paramsAndReturns.slice(0, paramsAndReturns.length - 1)\n  const paramNames = getParamNames(params)\n  const editorValue =\n    code || `function ${name || 'name'}(${paramNames.join(', ')}) {\\n\\n}`\n\n  // const [signatureTouched, setSignatureTouched] = React.useState<boolean>(false)\n  const signatureError = !isSignatureCorrect(paramsAndReturns)\n\n  const hasChanges =\n    name !== originalState.current.name ||\n    signatureString !== originalState.current.signatureString ||\n    description.getCurrentContent().getPlainText() !==\n      originalState.current.descriptionString ||\n    code !== originalState.current.code\n\n  const onSaveButtonClick = () => {\n    const fn = safeEval(code)\n    const validParams = isSignatureCorrect(paramsAndReturns)\n    if (!fn || !validParams) {\n      return //TODO alert\n    }\n    const parameters = paramsAndReturns.slice(\n      0,\n      paramsAndReturns.length - 1,\n    ) as Itype[] //TODO cast\n    const returns = paramsAndReturns.slice(-1).pop() as Itype\n    dispatch({\n      type: 'createFunction',\n      function: {\n        name,\n        parameters,\n        returns,\n        fn,\n        description: description.getCurrentContent().getPlainText(),\n      },\n      index,\n    })\n  }\n\n  const onClearButtonClick = useCallback(() => {\n    const state = getStateValueFromFunc(descriptionDecorator, undefined)\n    setOriginalState(originalState, state)\n    setState(state)\n    dispatch({ type: 'clearDocsCard', index })\n  }, [originalState, index])\n\n  return (\n    <Box\n      // boxShadow={'base'}\n      backgroundColor='white'\n      padding={1}\n      // minWidth='48%'\n      // minHeight='99vh'\n      minHeight='100%'\n      // position='relative'\n      display='flex'\n      flexDirection='column'\n      //AndyM\n\n      transition='box-shadow 100ms linear,opacity 75ms linear,transform 200ms cubic-bezier(0.19, 1, 0.22, 1);'\n      flexShrink={0}\n      width='39vw'\n      maxWidth='625px'\n      top='0px'\n      position='sticky'\n      flexGrow={1}\n      overflowY='auto'\n      borderLeft='1px solid rgba(0,0,0,0.05)'\n      left={index * 40 + 'px'}\n    >\n      <Flex paddingLeft={2} alignItems='center'>\n        <Heading fontSize='xl' fontStyle='italic' color='unison.purple'>\n          Docs\n        </Heading>\n        {navigationType === 'history' ? (\n          <DocsNavigationArrows></DocsNavigationArrows>\n        ) : null}\n        <Spacer></Spacer>\n        <ClearButton\n          onClick={onClearButtonClick}\n          fadeIn={hasChanges}\n        ></ClearButton>\n        <SaveButton\n          onClick={onSaveButtonClick}\n          fadeIn={hasChanges}\n          disabled={signatureError}\n        ></SaveButton>\n        <DocsExplanation />\n        {navigationType ? (\n          <DocsNavigationTypeSelector\n            dispatch={dispatch}\n            navigationType={navigationType}\n          ></DocsNavigationTypeSelector>\n        ) : null}\n        <IconButton\n          /* Close Button */\n          aria-label='Close card'\n          icon={<CloseIcon />}\n          variant='ghost'\n          size='sm'\n          onClick={() => dispatch({ type: 'closeDocsCard', index })}\n          /* Scrolling behavior */\n          ref={closeButtonRef}\n          sx={{\n            scrollMarginRight: '20px',\n          }}\n        />\n      </Flex>\n      <Divider marginTop={2}></Divider>\n      <Droppable droppableId='DocsCard'>\n        {(provided, snapshot) => {\n          return (\n            <Box\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              // minWidth={'50%'}\n              flex={1}\n              minHeight='100%'\n              height='100%'\n              overflow='auto'\n              paddingX={2}\n              paddingY={2}\n            >\n              <EditableText\n                /* NAME */\n                value={name}\n                onChange={onChangeName}\n                placeholder={defaultName}\n                fontSize='2xl'\n                textColor={nameColor}\n                fontStyle={nameFontStyle}\n                marginBottom={3}\n              />\n\n              {/* SIGNATURE */}\n              <HStack>\n                <Code fontSize='sm' padding={0.5}>\n                  <Editable\n                    as='span'\n                    placeholder={defaultName}\n                    fontStyle={nameFontStyle}\n                    // width={name.length * 12 + 12 + 'px'}\n                    width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    // minWidth={(name || defaultName).length * 12 + 12 + 'px'}\n                    value={name}\n                    textColor={nameColor}\n                    onChange={onChangeName}\n                    paddingX={1}\n                  >\n                    <EditablePreview\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    />\n                    <EditableInput\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                      _focus={{\n                        outline: '',\n                      }}\n                    />\n                  </Editable>\n                </Code>\n\n                <Text as='span' fontSize='sm'>\n                  :{' '}\n                </Text>\n                <Code\n                  // SIGNATURE EDITOR\n                  fontSize='sm'\n                  width='100%'\n                  paddingX={1}\n                  paddingY={1}\n                  as='span'\n                  ref={signatureEditorParentRef}\n                  // position='relative'\n                >\n                  <DraftEditor\n                    editorState={signature}\n                    ref={signatureEditorRef}\n                    onChange={onChangeSignatureEditor}\n                    keyBindingFn={autocompleteKeyBindingFn}\n                    handleKeyCommand={handleKeyCommand}\n\n                    // onBlur={(e: any) => {\n                    //   setSignatureTouched(true)\n                    // }}\n                  />\n                  {filteredSuggestions.length > 0 ? (\n                    <TypeSuggestionList\n                      typeSuggestions={filteredSuggestions}\n                      selectedIndex={autocompleteState.selectedIndex}\n                      left={autocompleteState.left}\n                      top={autocompleteState.top}\n                    ></TypeSuggestionList>\n                  ) : null}\n                </Code>\n              </HStack>\n\n              <Text\n                /* DESCRIPTION */\n                className='description'\n                marginTop={5}\n                fontSize='xl'\n                fontStyle={descriptionFontStyle}\n                color={descriptionColor}\n                backgroundColor='yellow.50'\n                padding={3}\n              >\n                <DraftEditor\n                  placeholder='Description'\n                  editorState={description}\n                  onChange={onChangeDescription}\n                ></DraftEditor>\n              </Text>\n              {/* <Tabs marginTop={5}>\n                <TabList>\n                  <Tab>Regular editor</Tab>\n                  <Tab>Structured editor</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel> */}\n              <Box marginTop={5}>\n                <MonacoEditor\n                  value={editorValue}\n                  onChange={(_: any, v: any) => {\n                    onChangeCode(v)\n                  }}\n                ></MonacoEditor>\n              </Box>\n\n              {/* </TabPanel>\n                  <TabPanel>\n                    <Code>{editorValue}</Code>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs> */}\n\n              {provided.placeholder}\n            </Box>\n          )\n        }}\n      </Droppable>\n    </Box>\n  )\n}\nexport default DocsCard\n","import * as React from 'react'\nimport {\n  ControlledEditor,\n  ControlledEditorOnChange,\n} from '@monaco-editor/react'\nfunction Editor({\n  value,\n  onChange,\n}: {\n  value: string\n  onChange: ControlledEditorOnChange\n}) {\n  // function onChange(newValue: any, e: any) {\n  //   console.log('onChange', newValue, e)\n  // }\n\n  // const code = this.state.code;\n  const options: { lineNumbers: 'off'; minimap: { enabled: boolean } } = {\n    // selectOnLineNumbers: true,\n    minimap: { enabled: false },\n    lineNumbers: 'off',\n  }\n  return (\n    <ControlledEditor\n      width='100%'\n      height='30vh'\n      language='javascript'\n      theme='vs-light'\n      value={value}\n      options={options}\n      onChange={onChange}\n      // editorDidMount={(editor, monaco) =>\n      //   console.log('editorDidMount', { editor, monaco })\n      // }\n    />\n  )\n}\nexport default Editor\n","import * as React from 'react'\nimport {\n  EditableProps,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  forwardRef,\n} from '@chakra-ui/react'\n\nconst EditableText = forwardRef((props: EditableProps, ref) => (\n  <Editable {...props}>\n    <EditablePreview />\n    <EditableInput\n      ref={ref}\n      _focus={{\n        outline: '',\n      }}\n    />\n  </Editable>\n))\n\nexport default EditableText\n","import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport type { Ieffect, Itype, Ifunction } from './interfaces'\nimport {\n  Box,\n  Code,\n  forwardRef,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  Kbd,\n  ListItem,\n  UnorderedList,\n  Center,\n  useTheme,\n  InputRightElement,\n  InputRightAddon,\n  HStack,\n} from '@chakra-ui/react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TreeView from '@material-ui/lab/TreeView'\nimport TreeItem from '@material-ui/lab/TreeItem'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ArrowForwardIcon,\n  SearchIcon,\n} from '@chakra-ui/icons'\nimport { FaShapes } from 'react-icons/fa'\n// import { VscSymbolMisc as FaShapes } from 'react-icons/vsc'\nimport { GiMineExplosion } from 'react-icons/gi'\n// import { IoShapes } from 'react-icons/io' //RiFunctionLine, RiFunctionFill //IoShapesOutline\nimport './sideBarStyles.css'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport MouseTrap from 'mousetrap'\n// import { FlowFunctionView } from './FlowCard'\nimport PopoverExplanation from './PopoverExplanation'\n\ntype IsideBarItem =\n  | {\n      nodeId: 'functions'\n      label: 'Functions'\n      items: Array<Ifunction>\n    }\n  | {\n      nodeId: 'types'\n      label: 'Data Types'\n      items: Array<Itype>\n    }\n  | {\n      nodeId: 'effects'\n      label: 'Effects'\n      items: Array<Ieffect>\n    }\n\nexport const FunctionItem = (props: Ifunction) => {\n  return (\n    <Text\n      wrap='nowrap'\n      color='unison.purple'\n      _hover={{ color: 'unison.lightPurple' }}\n    >\n      <Code\n        fontSize='sm'\n        // fontWeight='700'\n        paddingX={1}\n        paddingY={0.5}\n        rounded='base'\n        backgroundColor='transparent'\n        color='inherit'\n      >\n        {props.name}\n      </Code>\n      <Text as='span'>: </Text>\n      <Text as={'span'} flexWrap='nowrap'>\n        {props.parameters.map((p, i) => (\n          <Text as='span' key={i}>\n            <TypeBadge typeAsString={p.type} />\n            <ArrowForwardIcon marginX={1} />\n          </Text>\n        ))}\n      </Text>\n      <TypeBadge typeAsString={props.returns.type} />\n    </Text>\n  )\n}\n\nconst getFunctionRenderItem = (props: Ifunction) => (\n  provided: any,\n  snapshot: any,\n  rubric: any,\n) => {\n  return (\n    <div\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n    >\n      <div>\n        <FunctionItem {...props} />\n        {/* <FlowFunctionView item={{ ...props }} /> */}\n      </div>\n    </div>\n  )\n}\nconst useTreeItemStyles = makeStyles({\n  root: {\n    marginBottom: '5px',\n  },\n  content: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n      cursor: 'grabbing',\n    },\n  },\n})\n\nconst FunctionTreeItem = (\n  props: Ifunction & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { root, content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      classes={{ root, content: props.isAnyItemDragging ? content : undefined }}\n      nodeId={props.nodeId}\n      label={\n        <Droppable\n          droppableId={props.nodeId}\n          renderClone={getFunctionRenderItem(props)}\n          isDropDisabled={true}\n        >\n          {(provided, snapshot) => {\n            const shouldRenderClone =\n              props.nodeId === snapshot.draggingFromThisWith\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {shouldRenderClone ? (\n                  <div className='react-beautiful-dnd-copy'>\n                    <FunctionItem {...props}></FunctionItem>\n                  </div>\n                ) : (\n                  <Draggable draggableId={props.nodeId} index={0}>\n                    {(provided, snapshot) => {\n                      return (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <FunctionItem {...props}></FunctionItem>\n                        </div>\n                      )\n                    }}\n                  </Draggable>\n                )}\n                {/* {provided.placeholder} */}\n              </div>\n            )\n          }}\n        </Droppable>\n      }\n    ></TreeItem>\n  )\n}\nconst TypeTreeItem = (\n  props: Itype & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      nodeId={props.nodeId}\n      classes={{ content: props.isAnyItemDragging ? content : undefined }}\n      label={<TypeBadge typeAsString={props.type}></TypeBadge>}\n    />\n  )\n}\n\nconst Sidebar = React.memo(\n  forwardRef(\n    (\n      {\n        items,\n        isAnyItemDragging,\n        dispatch,\n        searchValue,\n      }: {\n        items: Array<IsideBarItem>\n        isAnyItemDragging: boolean\n        dispatch: React.Dispatch<Action>\n        searchValue: string\n      },\n      ref,\n    ) => {\n      const theme = useTheme()\n      const {\n        colors: {\n          unison: { purple, lightPurple, aqua },\n        },\n      } = theme\n\n      //Search\n      const [isHoveringSearch, setIsHoveringSearch] = React.useState(false)\n      const [isFocusedSearch, setFocusedSearch] = React.useState(false)\n      const onMouseEnterSearch = React.useCallback(() => {\n        setIsHoveringSearch(true)\n      }, [])\n      const onMouseLeaveSearch = React.useCallback(() => {\n        setIsHoveringSearch(false)\n      }, [])\n\n      return (\n        <Box\n          height='100%'\n          flex={1}\n          backgroundColor={'purple.50'}\n          paddingTop={4}\n        >\n          <InputGroup\n            width='100%'\n            whiteSpace='nowrap'\n            padding={1}\n            display='flex'\n            onMouseEnter={onMouseEnterSearch}\n            onMouseLeave={onMouseLeaveSearch}\n            // _focusWithin={{ color: 'teal.600' }}\n          >\n            <InputLeftElement\n              pointerEvents='none'\n              children={\n                <SearchIcon\n                  color={\n                    isFocusedSearch\n                      ? aqua\n                      : isHoveringSearch\n                      ? lightPurple\n                      : purple\n                  }\n                />\n              } //TODO teal\n            />\n            <Input\n              ref={ref}\n              placeholder='Search'\n              variant='outline'\n              _hover={{ borderBottomColor: lightPurple }}\n              focusBorderColor={'unison.aqua'}\n              size='md'\n              borderRadius='0%'\n              borderTop='none'\n              borderLeft='none'\n              borderRight='none'\n              borderBottom={`2px solid ${purple}`}\n              value={searchValue}\n              onFocus={() => {\n                if (!ref || !('current' in ref)) return\n                ref.current.setSelectionRange(0, ref.current.value.length)\n                setFocusedSearch(true)\n              }}\n              onBlur={() => setFocusedSearch(false)}\n              onChange={e =>\n                dispatch({ type: 'sideBarSearch', value: e.target.value })\n              }\n            />\n            {isHoveringSearch ? (\n              <HStack\n                background='transparent'\n                position='absolute'\n                right={2}\n                top={2}\n                pointerEvents='none'\n              >\n                <Kbd>ctrl</Kbd>\n                <Text>/</Text>\n                <Kbd>⌘</Kbd>\n                <Text>+</Text>\n                <Kbd>B</Kbd>\n              </HStack>\n            ) : null}\n          </InputGroup>\n          <Center>\n            <PopoverExplanation label='Sidebar explanation' title='Sidebar'>\n              <UnorderedList>\n                <ListItem>\n                  Drag functions and drop them onto Flow Card or Docs Card\n                </ListItem>\n                <ListItem>\n                  <Kbd>up</Kbd>, <Kbd>down</Kbd>, <Kbd>left</Kbd>,{' '}\n                  <Kbd>right</Kbd> to move in Sidebar\n                </ListItem>\n                <ListItem>\n                  <Kbd>space</Kbd> to drag, <Kbd>right</Kbd> then{' '}\n                  <Kbd>space</Kbd> to drop\n                </ListItem>\n                <ListItem>\n                  Datatypes and Effects are not interactive at this point\n                </ListItem>\n              </UnorderedList>\n            </PopoverExplanation>\n          </Center>\n\n          <TreeView\n            selected={[]}\n            aria-label='Functions, types and effects'\n            defaultCollapseIcon={<ChevronDownIcon color='unison.purple' />}\n            defaultExpandIcon={<ChevronRightIcon color='unison.purple' />}\n            onNodeFocus={(e, v) => {\n              const draggable: any = document.querySelector(\n                `[data-rbd-draggable-id=\"${v}\"]`,\n              )\n\n              if (draggable) {\n                const focused = document.querySelectorAll('.Mui-focused')\n                focused.forEach(e => {\n                  e.classList.remove('Mui-focused')\n                })\n                const div =\n                  draggable.parentElement?.parentElement?.parentElement\n                const li = div?.parentElement\n                const parentMenu =\n                  li?.parentElement?.parentElement?.parentElement?.parentElement\n                const previous = li?.previousElementSibling\n                const next = li?.nextElementSibling\n\n                if (!draggable.bound) {\n                  draggable.bound = true\n                  MouseTrap(draggable).bind('left', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    div?.classList.remove('Mui-focused')\n                    parentMenu?.focus()\n                  })\n                  MouseTrap(draggable).bind('down', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (next) {\n                      next.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.nextElementSibling?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                  MouseTrap(draggable).bind('up', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (previous) {\n                      previous.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                }\n\n                div?.classList.add('Mui-focused')\n                draggable.focus()\n              }\n            }}\n          >\n            {items &&\n              items.map(item => {\n                const label = (\n                  <Text fontSize='lg' color={'unison.purple'}>\n                    {item.label}\n                  </Text>\n                )\n                return (\n                  <TreeItem\n                    nodeId={item.nodeId}\n                    key={item.nodeId}\n                    label={\n                      <HStack>\n                        {item.nodeId === 'functions' ? (\n                          <Text fontWeight='bold' fontSize='xl' color={purple}>\n                            λ\n                          </Text>\n                        ) : item.nodeId === 'types' ? (\n                          <FaShapes color={purple} />\n                        ) : item.nodeId === 'effects' ? (\n                          <GiMineExplosion color={purple} />\n                        ) : null}\n                        {label}\n                      </HStack>\n                    }\n                  >\n                    {(() => {\n                      switch (item.nodeId) {\n                        case 'functions':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.name}`\n                            return (\n                              <FunctionTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'types':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.type}`\n                            return (\n                              <TypeTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'effects':\n                          return null //@TODO\n                        default:\n                          let _: never = item\n                      }\n                    })()}\n                  </TreeItem>\n                )\n              })}\n          </TreeView>\n        </Box>\n      )\n    },\n  ),\n)\n\nexport default Sidebar\n","import * as React from 'react'\nimport { Flex, HStack } from '@chakra-ui/react'\n\nconst CardHStack = ({ children }: { children?: any }) => {\n  // const scrollContainer = React.useRef<HTMLDivElement>(null)\n  // React.useEffect(() => {\n  //   scrollContainer.current?.addEventListener('scroll', (e: any) =>\n  //     console.log('c', e.target?.scrollLeft),\n  //   )\n  // }, [])\n  return (\n    <Flex\n      overflowX='auto'\n      overflowY='hidden'\n      flexGrow={1}\n      height='100%'\n      backgroundColor='purple.50'\n      // ref={scrollContainer}\n    >\n      <HStack\n        height='100%'\n        //AndyM\n        width={React.Children.count(children) * 39 + 'vw'}\n        display='flex'\n        flex-grow={1}\n        position='relative'\n        transition='width 100ms cubic-bezier(0.19, 1, 0.22, 1)'\n      >\n        {children}\n      </HStack>\n    </Flex>\n  )\n}\nexport default CardHStack\n","import * as React from 'react'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport {\n  Box,\n  Button,\n  Center,\n  ScaleFade,\n  useTheme,\n  useToken,\n} from '@chakra-ui/react'\nimport SideBar from './components/Sidebar'\nimport CardHStack from './components/CardHStack'\nimport SplitPane from 'react-split-pane'\nimport FlowCard from './components/FlowCard'\nimport { StateContext, useAppReducer } from './state'\nimport DocsCard from './components/DocsCard/DocsCard'\nimport { matchSorter } from 'match-sorter'\nimport './styles.css'\nimport { HotKeys } from 'react-hotkeys'\nimport { AddIcon } from '@chakra-ui/icons'\n\nexport const App = () => {\n  const [state, dispatch] = useAppReducer()\n  const onDragEnd = React.useCallback(\n    dropResult => {\n      console.log({ dropResult })\n      if (\n        //SideBar to FlowCard\n        dropResult.source.droppableId !== 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromSideBarOnFlowCard',\n          index: dropResult.destination.index,\n          draggableId: dropResult.draggableId,\n        })\n      } else if (\n        // FlowCard to FlowCard\n        dropResult.source.droppableId === 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromFlowCardToFlowCard',\n          sourceIndex: dropResult.source.index,\n          destinationIndex: dropResult.destination.index,\n        })\n      } else if (dropResult.destination?.droppableId === 'DocsCard') {\n        dispatch({\n          type: 'dropFnFromSideBarToDocsCard',\n          draggableId: dropResult.draggableId,\n        })\n      } else {\n        dispatch({ type: 'dropOutside' })\n\n        //Regain focus after dropping outside - TODO does not work if dragged and esc pressed\n        const li: any = document.querySelector(\n          `[id$='${dropResult.draggableId}']`,\n        )\n        if (li) {\n          li.focus()\n        }\n      }\n    },\n    [dispatch],\n  )\n  const sideBarRef = React.useRef()\n  const purple = useToken('colors', 'unison.purple')\n\n  return (\n    <StateContext.Provider value={{ state, dispatch }}>\n      <HotKeys //TODO substitute for mousetrap + useEffect\n        keyMap={{ focusSidebar: ['ctrl+b', 'command+b'] }} //TODO parameterize\n        handlers={{\n          focusSidebar() {\n            let a = sideBarRef as any\n            a.current.focus()\n          },\n        }}\n      >\n        <DragDropContext\n          onDragStart={() => {\n            dispatch({ type: 'isDragging' })\n          }}\n          onDragEnd={onDragEnd}\n        >\n          <SplitPane\n            style={{\n              // overflow: 'auto',\n              height: '100vh',\n              borderTop: `6px solid ${purple}`,\n            }}\n            defaultSize='20%'\n            minSize={100}\n            maxSize={-300}\n            split='vertical'\n            pane2Style={{\n              overflowX: 'auto',\n              // overflow: 'auto',\n            }}\n          >\n            <SideBar\n              ref={sideBarRef}\n              searchValue={state.searchValue}\n              dispatch={dispatch}\n              isAnyItemDragging={state.isSideBarItemDragging}\n              items={[\n                {\n                  nodeId: 'functions',\n                  label: 'Functions',\n                  items: matchSorter(state.functions, state.searchValue, {\n                    keys: ['name'],\n                  }),\n                },\n                {\n                  nodeId: 'types',\n                  label: 'Data Types',\n                  items: matchSorter(state.dataTypes, state.searchValue, {\n                    keys: ['type'],\n                  }),\n                },\n                {\n                  nodeId: 'effects',\n                  label: 'Effects',\n                  items: matchSorter(state.effects, state.searchValue, {\n                    keys: ['name'],\n                  }),\n                },\n              ]}\n            ></SideBar>\n            <CardHStack>\n              {/* <FlowCard\n                items={state.flowCardFunctions}\n                dispatch={dispatch}\n                name=''\n              ></FlowCard> */}\n              {state.docCards.length > 0 ? (\n                state.docCardsNavigationType === 'history' ? (\n                  <DocsCard\n                    index={state.docCardsSelectedIndex}\n                    func={(() => {\n                      const doc = state.docCards[state.docCardsSelectedIndex]\n                      console.log(state.docCards, state.docCardsSelectedIndex)\n                      return doc.type === 'editing'\n                        ? state.functions.find(f => f.name === doc.fnName)\n                        : undefined\n                    })()}\n                    dispatch={dispatch}\n                    functions={state.functions}\n                    navigationType={'history'}\n                  />\n                ) : (\n                  state.docCards.map((doc, i) => {\n                    const func =\n                      doc.type === 'editing'\n                        ? state.functions.find(f => f.name === doc.fnName)\n                        : undefined\n                    return (\n                      <DocsCard\n                        key={i}\n                        index={i}\n                        func={func}\n                        dispatch={dispatch}\n                        functions={state.functions}\n                        navigationType={\n                          i === 0 ? state.docCardsNavigationType : undefined\n                        }\n                      />\n                    )\n                  })\n                )\n              ) : (\n                <Box width={'100%'}>\n                  <Center>\n                    <ScaleFade in={true}>\n                      <Button\n                        leftIcon={<AddIcon />}\n                        colorScheme='teal'\n                        variant='ghost'\n                        fontSize='xl'\n                        onClick={() => dispatch({ type: 'newDocsCard' })}\n                      >\n                        New function\n                      </Button>\n                    </ScaleFade>\n                  </Center>\n                </Box>\n              )}\n              {/* <Card>\n              <form>\n                <InputGroup size='sm'>\n                  <InputLeftAddon>\n                    <Code>function</Code>\n                  </InputLeftAddon>\n                  <Input></Input>\n                  <InputRightAddon>\n                    <Code>(</Code>\n                  </InputRightAddon>\n                </InputGroup>\n                <Menu isOpen={true}>\n                  <MenuButton as={Button}>Type</MenuButton>\n                  <MenuList>\n                    <MenuItem>+ New Type</MenuItem>\n                    <MenuItem>String</MenuItem>\n                    <MenuItem>Number</MenuItem>\n                  </MenuList>\n                </Menu>\n              </form>\n            </Card>\n            <Card>\n              <Editor></Editor>\n            </Card> */}\n            </CardHStack>\n          </SplitPane>\n        </DragDropContext>\n      </HotKeys>\n    </StateContext.Provider>\n  )\n}\n//\"calc(100vh - 3rem)\"\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { extendTheme } from '@chakra-ui/react'\n\nconst purple = '#520066'\n\nexport default extendTheme({\n  styles: {\n    global: {\n      html: {\n        backgroundColor: purple,\n        minWidth: '860px',\n        '*:focus': {\n          outline: 'none !important',\n          boxShadow: 'none !important',\n        },\n      },\n    },\n  },\n  number: 3,\n  bool: false,\n  shadows: {\n    outline: 'none',\n  },\n  colors: {\n    unison: {\n      purple,\n      lightPurple: '#8f228f',\n      aqua: '#3cd6b7',\n      limegreen: '#88cc00',\n      green: '#008f30',\n      yellow: '#ffc41f',\n      orange: '#ff8800',\n      pink: '#ff4756',\n      lightblue: '#00adeb',\n      blue: '#0951e0',\n      darkblue: '#00018f',\n      gray: '#616c77',\n      //derived:\n      darkOrange: '#572E00',\n      darkGreen: '#005C1F',\n      darkPink: '#C4333F',\n    },\n  },\n})\n\n/*\ncolors:\n  - name: 'lightpurple'\n    base: '#8f228f'\n  - name: 'purple'\n    base: '#520066'\n\n  - name: 'aqua'\n    base: '#3cd6b7'\n  - name: 'limegreen'\n    base: '#88cc00'\n  - name: 'green'\n    base: '#008f30'\n\n  - name: 'yellow'\n    base: '#ffc41f'\n  - name: 'orange'\n    base: '#ff8800'\n  - name: 'pink'\n    base: '#ff4756'\n\n  - name: 'lightblue'\n    base: '#00adeb'\n  - name: 'blue'\n    base: '#0951e0'\n  - name: 'darkblue'\n    base: '#00018f'\n\n  - name: 'black'\n    base: 'black'\n  - name: 'white'\n    base: 'white'\n  - name: 'gray'\n    base: '#616c77'\n\n\n      \n@import 'data/colors.yml'; // $colors\n\n$tones: (\n  xxx-dark:  ( mix: 'shade', percentage: 80% ),\n  xx-dark:   ( mix: 'shade', percentage: 55% ),\n  x-dark:    ( mix: 'shade', percentage: 45% ),\n  dark:      ( mix: 'shade', percentage: 20% ),\n  mid:       ( mix: 'tint',  percentage: 20% ),\n  light:     ( mix: 'tint',  percentage: 45% ),\n  x-light:   ( mix: 'tint',  percentage: 60% ),\n  xx-light:  ( mix: 'tint',  percentage: 75% ),\n  xxx-light: ( mix: 'tint',  percentage: 90% )\n);\n\n$UCpalettes: generate-palettes($colors, $tones);\n\n@function palette($name, $tone: 'base') {\n  $palette: map-get($UCpalettes, $name);\n  $color: map-get($palette, $tone);\n  @return $color;\n}\n*/\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ColorModeScript, extendTheme, ChakraProvider } from '@chakra-ui/react'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import * as React from 'react'\nimport { Code, CodeProps, TextProps, useTheme } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\n\nconst TypeBadge = ({\n  typeAsString,\n  // fontSize,\n  as,\n  children,\n  rounded,\n}: {\n  typeAsString: Itype['type']\n  // fontSize?: CodeProps['fontSize']\n  as?: CodeProps['as']\n  rounded?: CodeProps['rounded']\n  children?: any\n}) => {\n  // const {\n  //   colors: {\n  //     unison: { orange, yellow },\n  //   },\n  // } = useTheme()\n\n  return (\n    <Code\n      as={as}\n      // fontSize={fontSize}\n      // paddingX={1}\n      // paddingY={0.5}\n      sx={\n        {\n          string: { color: 'unison.darkOrange', backgroundColor: 'yellow.100' },\n          number: {\n            color: 'unison.darkGreen',\n            backgroundColor: 'green.100',\n          },\n          boolean: { color: 'unison.pink', backgroundColor: 'pink.100' },\n          function: { color: 'unison.purple', backgroundColor: 'purple.100' },\n          object: { color: 'black', backgroundColor: 'gray.100' },\n          array: { color: 'black', backgroundColor: 'gray.100' },\n          undefined: { color: 'black', backgroundColor: 'gray.100' },\n          null: { color: 'black', backgroundColor: 'gray.100' },\n        }[typeAsString]\n      }\n      rounded={rounded ?? 'base'}\n    >\n      {children ?? typeAsString}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n","import * as React from 'react'\nimport { Fade, Button, Box, Switch, IconButton, HStack } from '@chakra-ui/react'\nimport {\n  ArrowUpDownIcon,\n  CheckIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  CloseIcon,\n  DeleteIcon,\n} from '@chakra-ui/icons'\nimport PopoverExplanation from '../PopoverExplanation'\nimport TypeBadge from '../TypeBadge'\nimport { Itype } from '../interfaces'\nimport { FunctionItem } from '../Sidebar'\nimport { GoVersions } from 'react-icons/go'\nimport { Action, StateContext } from '../../state'\nconst { useContext } = React\n\nexport const SaveButton = ({\n  onClick,\n  fadeIn,\n  disabled,\n}: {\n  onClick: () => void\n  fadeIn: boolean\n  disabled: boolean\n}) =>\n  fadeIn ? (\n    <Fade in={true}>\n      {/* Save button */}\n      <Button\n        color={disabled ? 'gray.300' : 'unison.green'}\n        sx={{ '&:hover': { backgroundColor: 'green.50' } }}\n        variant='ghost'\n        leftIcon={<CheckIcon />}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        Save\n      </Button>\n    </Fade>\n  ) : null\n\nexport const ClearButton = ({\n  onClick,\n  fadeIn,\n}: {\n  onClick: () => void\n  fadeIn: boolean\n}) =>\n  fadeIn ? (\n    <Fade in={true}>\n      <Button\n        color='unison.darkPink'\n        sx={{ '&:hover': { backgroundColor: 'red.50' } }}\n        variant='ghost'\n        leftIcon={<DeleteIcon />}\n        onClick={onClick}\n      >\n        Clear\n      </Button>\n    </Fade>\n  ) : null\n\nexport const DocsExplanation = () => (\n  <PopoverExplanation label='Docs card explanation' title='Docs card'>\n    Docs is an editable view of the documentation for a function. The signature\n    input will autocomplete types (string/boolean/number so far) and arrows but\n    will not prevent invalid states, which will disable the \"Save\" button. The\n    description can reference other functions with \"@\" (triggers autocomplete)\n    and navigate to them by clicking on the link. Navigation can be \"browser\n    history style\" or \"panes style\".\n  </PopoverExplanation>\n)\n\nexport const TypeSuggestionList = ({\n  typeSuggestions,\n  selectedIndex,\n  left,\n  top,\n}: {\n  typeSuggestions: {\n    title: Itype['type']\n  }[]\n  selectedIndex: number\n  left: number\n  top: number\n}) => (\n  <Box\n    as='ul'\n    position='fixed'\n    left={left}\n    top={top}\n    listStyleType='none'\n    padding={1}\n    boxShadow='lg'\n    backgroundColor='white'\n    rounded='sm'\n    zIndex={1000}\n  >\n    {typeSuggestions.map((s, i) => (\n      <Box\n        as='li'\n        key={s.title}\n        display='block'\n        textAlign='center'\n        paddingX={1}\n        paddingY={1}\n        backgroundColor={\n          i === selectedIndex\n            ? 'unison.aqua'\n            : s.title === 'string'\n            ? 'yellow.100'\n            : s.title === 'number'\n            ? 'green.100'\n            : s.title === 'boolean'\n            ? 'pink.100'\n            : 'white'\n        }\n      >\n        <TypeBadge rounded={'none'} typeAsString={s.title}>\n          {s.title}\n        </TypeBadge>\n      </Box>\n    ))}\n  </Box>\n)\n\nexport const FunctionSuggestionList = ({\n  functionSuggestions,\n  selectedIndex,\n  left,\n  top,\n}: {\n  functionSuggestions: {\n    name: string\n  }[]\n  selectedIndex: number\n  left: number\n  top: number\n}) => (\n  <Box\n    as='ul'\n    position='fixed'\n    left={left}\n    top={top}\n    listStyleType='none'\n    padding={1}\n    boxShadow='lg'\n    backgroundColor='white'\n    rounded='sm'\n    zIndex={1000}\n  >\n    {functionSuggestions.map((s, i) => (\n      <Box\n        as='li'\n        key={s.name}\n        display='block'\n        textAlign='center'\n        paddingX={1}\n        paddingY={1}\n        backgroundColor={i === selectedIndex ? 'unison.aqua' : 'white'}\n        rounded={'base'}\n      >\n        {s.name}\n      </Box>\n    ))}\n  </Box>\n)\n\nexport const DocsNavigationTypeSelector = ({\n  navigationType,\n  dispatch,\n}: {\n  navigationType: 'history' | 'panes'\n  dispatch: React.Dispatch<Action>\n}) => {\n  return (\n    <IconButton\n      onClick={() => {\n        dispatch({\n          type: 'changeNavigationType',\n          navigationType: navigationType === 'history' ? 'panes' : 'history',\n        })\n      }}\n      variant='ghost'\n      sx={{\n        color: 'unison.purple',\n        '&:hover': {\n          color: 'unison.aqua',\n        },\n      }}\n      aria-label='Change navigation type'\n      size='md'\n      icon={\n        navigationType === 'panes' ? (\n          <ArrowUpDownIcon\n            sx={{ transform: 'rotate(90deg)' }}\n          ></ArrowUpDownIcon>\n        ) : (\n          <GoVersions></GoVersions>\n        )\n      }\n    ></IconButton>\n\n    /* <Switch\n        size='sm'\n        isChecked={navigationType === 'panes'}\n        marginX={1}\n        onChange={() => {\n          dispatch({\n            type: 'changeNavigationType',\n            navigationType: navigationType === 'history' ? 'panes' : 'history',\n          })\n        }}\n      ></Switch> */\n  )\n}\n\nconst getButtonStyles = (isDisabled: boolean) => ({\n  variant: 'ghost',\n  sx: isDisabled\n    ? {\n        color: 'grey.300',\n      }\n    : {\n        color: 'unison.purple',\n        '&:hover': {\n          color: 'unison.aqua',\n        },\n      },\n})\n\nexport const DocsNavigationArrows = () => {\n  const { state, dispatch } = useContext(StateContext)\n  const size = '6'\n  const backDisabled = state.docCardsSelectedIndex === 0\n  const forwardDisabled =\n    state.docCardsSelectedIndex === state.docCards.length - 1\n  return (\n    <HStack>\n      <IconButton\n        onClick={() => {\n          dispatch({\n            type: 'docsNavigate',\n            to: 'back',\n          })\n        }}\n        aria-label='Navigate back'\n        {...getButtonStyles(backDisabled)}\n        disabled={backDisabled}\n        icon={<ChevronLeftIcon w={size} h={size}></ChevronLeftIcon>}\n      ></IconButton>\n\n      <IconButton\n        margin={0}\n        onClick={() => {\n          dispatch({\n            type: 'docsNavigate',\n            to: 'forwards',\n          })\n        }}\n        disabled={forwardDisabled}\n        aria-label='Navigate forwads'\n        {...getButtonStyles(forwardDisabled)}\n        icon={<ChevronRightIcon w={size} h={size}></ChevronRightIcon>}\n      ></IconButton>\n    </HStack>\n  )\n}\n","import produce from 'immer'\nimport * as React from 'react'\nimport { v4 as uuid } from 'uuid'\nimport { Ifunction, Ieffect, Itype } from './components/interfaces'\nimport DocsCard from './components/DocsCard/DocsCard'\n\ntype Reducer<A, B> = (a: A, b: B) => A\n\n/* See https://github.com/jefflombard/use-reducer-logger */\nconst getCurrentTimeFormatted = () => {\n  const currentTime = new Date()\n  const hours = currentTime.getHours()\n  const minutes = currentTime.getMinutes()\n  const seconds = currentTime.getSeconds()\n  const milliseconds = currentTime.getMilliseconds()\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`\n}\nconst useLoggerReducer = <A, B extends { type: string | number }>(\n  reducer: Reducer<A, B>,\n  initialState: A,\n) => {\n  const reducerWithLogger = React.useCallback(\n    (state: A, action: B): A => {\n      const next = reducer(state, action)\n      console.group(\n        `%cAction: %c${action.type} %cat ${getCurrentTimeFormatted()}`,\n        'color: lightgreen; font-weight: bold;',\n        'color: white; font-weight: bold;',\n        'color: lightblue; font-weight: lighter;',\n      )\n      console.log(\n        '%cPrevious State:',\n        'color: #9E9E9E; font-weight: 700;',\n        state,\n      )\n      console.log('%cAction:', 'color: #00A7F7; font-weight: 700;', action)\n      console.log('%cNext State:', 'color: #47B04B; font-weight: 700;', next)\n      console.groupEnd()\n      return next\n    },\n    [reducer],\n  )\n\n  return React.useReducer(reducerWithLogger, initialState)\n}\n\nconst initialFunctions: Array<Ifunction> = [\n  {\n    name: 'length',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'number' },\n    fn: function length(s: any) {\n      return s.length\n    },\n    description: 'Takes a string and returns how many characters it has',\n  },\n  {\n    name: 'upperCase',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'string' },\n    fn: function (s: any) {\n      return s.toUpperCase()\n    },\n    description:\n      'Takes a string and returns is with all characters in uppercase',\n  },\n  {\n    name: 'add',\n    parameters: [{ type: 'number' }, { type: 'number' }],\n    returns: { type: 'number' },\n    fn: function add(x: any, y: any) {\n      return x + y\n    },\n    description: 'Adds two numbers together',\n  },\n  // {\n  //   name: 'map',\n  //   parameters: [\n  //     { type: 'function', parameterName: 'f' },\n  //     { type: 'array', of: { typeParam: 'A' }, parameterName: 'as' },\n  //   ],\n  //   returns: { type: 'array', of: { typeParam: 'B' } },\n  //   code: 'function map(f,as){return as.map(f)}',\n  //   description: 'Applies a function to each element of an array',\n  // },\n  {\n    name: 'id',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'string' },\n    fn: function id(s: any) {\n      return s\n    },\n    description: 'monomorphic id for string',\n  },\n  {\n    name: 'greaterThan',\n    parameters: [{ type: 'number' }, { type: 'number' }],\n    returns: { type: 'boolean' },\n    fn: function greaterThan(n: number, m: number) {\n      return m > n\n    },\n    description: 'Number is greater than another',\n  },\n]\nconst initialDataTypes: Array<Itype> = [\n  { type: 'string' },\n  { type: 'number' },\n  { type: 'boolean' },\n]\nconst initialEffects: Array<Ieffect> = []\n\nexport type Action =\n  | { type: 'isDragging' }\n  | { type: 'createFunction'; function: Ifunction; index: number }\n  | { type: 'dropOutside' }\n  | { type: 'dropFnFromSideBarOnFlowCard'; index: number; draggableId: string }\n  | {\n      type: 'dropFnFromFlowCardToFlowCard'\n      sourceIndex: number\n      destinationIndex: number\n    }\n  | { type: 'clearFlowCard' }\n  | { type: 'sideBarSearch'; value: string }\n  | { type: 'dropFnFromSideBarToDocsCard'; draggableId: string }\n  | { type: 'openDocs'; fnName: string; openerIndex: number }\n  | { type: 'closeDocsCard'; index: number }\n  | { type: 'clearDocsCard'; index: number }\n  | { type: 'newDocsCard' }\n  | { type: 'changeNavigationType'; navigationType: NavigationType }\n  | { type: 'docsNavigate'; to: 'forwards' | 'back' }\n// | {\n//     type: 'changeFunctionParamValue'\n//     paramValue: string | number | boolean\n//     paramIndex: number\n//     functionId: string\n//   }\nexport type NavigationType = 'history' | 'panes'\ntype DocsType = { type: 'creating' } | { type: 'editing'; fnName: string }\n\ntype State = {\n  functions: Ifunction[]\n  dataTypes: Itype[]\n  effects: Ieffect[]\n  isSideBarItemDragging: boolean\n  flowCardFunctions: Array<Ifunction & { id: string }>\n  docCardsNavigationType: NavigationType\n  docCardsSelectedIndex: number\n  docCards: Array<DocsType>\n  searchValue: string\n}\n\nconst initialState: State = {\n  functions: initialFunctions,\n  dataTypes: initialDataTypes,\n  effects: initialEffects,\n  isSideBarItemDragging: false,\n  flowCardFunctions: [],\n  docCardsNavigationType: 'panes',\n  docCardsSelectedIndex: 0,\n  docCards: [\n    { type: 'creating' },\n    { type: 'editing', fnName: 'add' },\n    { type: 'editing', fnName: 'id' },\n  ],\n  searchValue: '',\n}\n\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const listCopy = [...list]\n  const [removed] = listCopy.splice(startIndex, 1)\n  listCopy.splice(endIndex, 0, removed)\n  return listCopy\n}\nconst insert = <A>(list: Array<A>, index: number, item: A) => {\n  const listCopy = [...list]\n  listCopy.splice(index, 0, item)\n  return listCopy\n}\n\nconst changeAtIndex = <A>(list: Array<A>, index: number, item: A) => {\n  const listCopy = [...list]\n  listCopy.splice(index, 1, item)\n  return listCopy\n}\n\nconst getDefaultValue = (p: Itype) => {\n  return p.type === 'string'\n    ? ''\n    : p.type === 'number'\n    ? 0\n    : p.type === 'boolean'\n    ? false\n    : p.type === 'object'\n    ? ''\n    : p.type === 'undefined'\n    ? undefined\n    : p.type === 'null'\n    ? undefined\n    : ''\n}\nconst findFunction = ({\n  state,\n  name,\n  id,\n}: {\n  state: State\n  name: string\n  id: string\n}) => {\n  const fn = state.functions.find(f => f.name === name) as Ifunction\n  const parameters = fn.parameters.map(p => {\n    const value = getDefaultValue(p)\n    return {\n      ...p,\n      value,\n    }\n  })\n  const returns = { ...fn.returns, value: getDefaultValue(fn.returns) }\n  return { ...fn, parameters, returns, id }\n}\n\n// return {\n//   ...state,\n//   isSideBarItemDragging: false,\n//   flowCardFunctions: insert(state.flowCardFunctions, action.index, {\n//     name: action.draggableId.split('_')[1],\n//     id: uuid(),\n//   }),\n// }\n\n// export const fnSelector = (state: State) => ({\n//   name,\n//   id,\n// }: {\n//   name: string\n//   id: string\n// }) => {\n//   const fn = state.functions.find(f => f.name === name) as Ifunction\n//   return { ...fn, id }\n// }\n\nconst incrementWithinBounds = (i: number, as: any[]) =>\n  i === as.length - 1 ? i : i + 1\nconst decrementPositiveNumber = (i: number) => (i === 0 ? i : i - 1)\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'isDragging':\n      return { ...state, isSideBarItemDragging: true }\n    case 'createFunction':\n      const fnIndex = state.functions.findIndex(\n        f => f.name === action.function.name,\n      )\n      return fnIndex === -1\n        ? {\n            ...state,\n            functions: state.functions.concat(action.function),\n            docCards: changeAtIndex(state.docCards, action.index, {\n              type: 'editing',\n              fnName: action.function.name,\n            }),\n          }\n        : {\n            ...state,\n            functions: changeAtIndex(state.functions, fnIndex, action.function),\n          }\n    case 'dropOutside':\n      return { ...state, isSideBarItemDragging: false }\n    case 'dropFnFromSideBarOnFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: insert(\n          state.flowCardFunctions,\n          action.index,\n          findFunction({\n            state,\n            name: action.draggableId.split('_')[1],\n            id: uuid(),\n          }),\n        ),\n      }\n    case 'dropFnFromFlowCardToFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: reorder(\n          state.flowCardFunctions,\n          action.sourceIndex,\n          action.destinationIndex,\n        ),\n      }\n    case 'clearFlowCard':\n      return {\n        ...state,\n        flowCardFunctions: [],\n      }\n    case 'sideBarSearch':\n      return {\n        ...state,\n        searchValue: action.value,\n      }\n    case 'dropFnFromSideBarToDocsCard':\n      return {\n        ...state,\n        docCards: [\n          { type: 'editing', fnName: action.draggableId.split('_')[1] },\n        ],\n        docCardsSelectedIndex: 0,\n      }\n    case 'openDocs': {\n      if (\n        /*fn doesn't exist*/\n        !state.functions.find(f => f.name === action.fnName) ??\n        /* already open */\n        state.docCards.find(\n          d => d.type === 'editing' && d.fnName === action.fnName,\n        )\n      ) {\n        return state\n      }\n      const docCards = state.docCards.slice(0, action.openerIndex + 1).concat({\n        type: 'editing',\n        fnName: action.fnName,\n      })\n      const docCardsSelectedIndex = incrementWithinBounds(\n        state.docCardsSelectedIndex,\n        docCards,\n      )\n      return {\n        ...state,\n        docCardsSelectedIndex,\n        docCards,\n      }\n    }\n    case 'closeDocsCard': {\n      if (state.docCardsNavigationType === 'history') {\n        return {\n          ...state,\n          docCards: [],\n          docCardsSelectedIndex: 0,\n        }\n      }\n      const docCards = state.docCards.filter((_, i) => i !== action.index)\n      const docCardsSelectedIndex = decrementPositiveNumber(\n        state.docCardsSelectedIndex,\n      )\n      return {\n        ...state,\n        docCards,\n        docCardsSelectedIndex,\n      }\n    }\n    case 'clearDocsCard':\n      return {\n        ...state,\n        docCards: changeAtIndex(state.docCards, action.index, {\n          type: 'creating',\n        }),\n      }\n    case 'newDocsCard':\n      return {\n        ...state,\n        docCards: [{ type: 'creating' }],\n      }\n    case 'changeNavigationType':\n      return {\n        ...state,\n        docCardsNavigationType: action.navigationType,\n        docCardsSelectedIndex: state.docCards.length - 1,\n      }\n    case 'docsNavigate': {\n      const docCardsSelectedIndex =\n        action.to === 'forwards'\n          ? incrementWithinBounds(state.docCardsSelectedIndex, state.docCards)\n          : decrementPositiveNumber(state.docCardsSelectedIndex)\n\n      return {\n        ...state,\n        docCardsSelectedIndex,\n      }\n    }\n  }\n}\n\nexport const StateContext = React.createContext<{\n  state: State\n  dispatch: React.Dispatch<Action>\n}>({ state: initialState, dispatch() {} })\n\nexport const useAppReducer =\n  process.env.NODE_ENV === 'development'\n    ? () => useLoggerReducer(reducer, initialState)\n    : () => React.useReducer(reducer, initialState)\n"],"sourceRoot":""}