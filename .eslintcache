[{"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx":"1","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx":"2","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts":"3","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts":"4","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx":"5","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx":"6","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx":"7","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx":"8","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx":"9","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx":"10","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts":"11","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx":"12","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx":"13","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx":"14","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts":"15","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx":"16"},{"size":953,"mtime":1607783634378,"results":"17","hashOfConfig":"18"},{"size":743,"mtime":1606395811243,"results":"19","hashOfConfig":"18"},{"size":5258,"mtime":1606395314403,"results":"20","hashOfConfig":"18"},{"size":416,"mtime":1606395314402,"results":"21","hashOfConfig":"18"},{"size":12888,"mtime":1607976675287,"results":"22","hashOfConfig":"18"},{"size":5021,"mtime":1607952162774,"results":"23","hashOfConfig":"18"},{"size":343,"mtime":1607860771406,"results":"24","hashOfConfig":"18"},{"size":1337,"mtime":1607962977962,"results":"25","hashOfConfig":"18"},{"size":13672,"mtime":1607978119808,"results":"26","hashOfConfig":"18"},{"size":605,"mtime":1606852903166,"results":"27","hashOfConfig":"18"},{"size":7617,"mtime":1607927076557,"results":"28","hashOfConfig":"18"},{"size":614,"mtime":1607926233772,"results":"29","hashOfConfig":"18"},{"size":1292,"mtime":1607922509708,"results":"30","hashOfConfig":"18"},{"size":393,"mtime":1607635865658,"results":"31","hashOfConfig":"18"},{"size":2033,"mtime":1607865814484,"results":"32","hashOfConfig":"18"},{"size":15637,"mtime":1607990718717,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"5rdob7",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx",["75"],"import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ColorModeScript, extendTheme, ChakraProvider } from '@chakra-ui/react'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n",["76","77"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx",[],["78","79"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts",[],["80","81"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx",["82","83","84","85"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx",["86"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx",["87","88"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx",["89","90","91","92","93","94","95","96","97","98"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts",["99","100"],"import produce from 'immer'\nimport * as React from 'react'\nimport { v4 as uuid } from 'uuid'\nimport { Ifunction, Ieffect, Itype } from './components/interfaces'\nimport DocsCard from './components/DocsCard'\n\ntype Reducer<A, B> = (a: A, b: B) => A\n\n/* See https://github.com/jefflombard/use-reducer-logger */\nconst getCurrentTimeFormatted = () => {\n  const currentTime = new Date()\n  const hours = currentTime.getHours()\n  const minutes = currentTime.getMinutes()\n  const seconds = currentTime.getSeconds()\n  const milliseconds = currentTime.getMilliseconds()\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`\n}\nconst useLoggerReducer = <A, B extends { type: string | number }>(\n  reducer: Reducer<A, B>,\n  initialState: A,\n) => {\n  const reducerWithLogger = React.useCallback(\n    (state: A, action: B): A => {\n      const next = reducer(state, action)\n      console.group(\n        `%cAction: %c${action.type} %cat ${getCurrentTimeFormatted()}`,\n        'color: lightgreen; font-weight: bold;',\n        'color: white; font-weight: bold;',\n        'color: lightblue; font-weight: lighter;',\n      )\n      console.log(\n        '%cPrevious State:',\n        'color: #9E9E9E; font-weight: 700;',\n        state,\n      )\n      console.log('%cAction:', 'color: #00A7F7; font-weight: 700;', action)\n      console.log('%cNext State:', 'color: #47B04B; font-weight: 700;', next)\n      console.groupEnd()\n      return next\n    },\n    [reducer],\n  )\n\n  return React.useReducer(reducerWithLogger, initialState)\n}\n\nconst initialFunctions: Array<Ifunction> = [\n  {\n    name: 'length',\n    parameters: [{ type: 'string', parameterName: 's' }],\n    returns: { type: 'number' },\n    fn: function length(s: any) {\n      return s.length\n    },\n    description: 'Takes a string and returns how many characters it has',\n  },\n  {\n    name: 'upperCase',\n    parameters: [{ type: 'string', parameterName: 's' }],\n    returns: { type: 'string' },\n    fn: function (s: any) {\n      return s.toUpperCase()\n    },\n    description:\n      'Takes a string and returns is with all characters in uppercase',\n  },\n  {\n    name: 'add',\n    parameters: [\n      { type: 'number', parameterName: 'x' },\n      { type: 'number', parameterName: 'y' },\n    ],\n    returns: { type: 'number' },\n    fn: function add(x: any, y: any) {\n      return x + y\n    },\n    description: 'Adds two numbers together',\n  },\n  // {\n  //   name: 'map',\n  //   parameters: [\n  //     { type: 'function', parameterName: 'f' },\n  //     { type: 'array', of: { typeParam: 'A' }, parameterName: 'as' },\n  //   ],\n  //   returns: { type: 'array', of: { typeParam: 'B' } },\n  //   code: 'function map(f,as){return as.map(f)}',\n  //   description: 'Applies a function to each element of an array',\n  // },\n  {\n    name: 'id',\n    parameters: [{ type: 'string', parameterName: 's1' }],\n    returns: { type: 'string' },\n    fn: function id(s: any) {\n      return s\n    },\n    description: 'monomorphic id for string',\n  },\n  {\n    name: 'greaterThan',\n    parameters: [\n      { type: 'number', parameterName: 'n' },\n      { type: 'number', parameterName: 'm' },\n    ],\n    returns: { type: 'boolean' },\n    fn: function greaterThan(n: number, m: number) {\n      return m > n\n    },\n    description: 'Number is greater than another',\n  },\n]\nconst initialDataTypes: Array<Itype> = [\n  { type: 'string' },\n  { type: 'number' },\n  { type: 'boolean' },\n]\nconst initialEffects: Array<Ieffect> = []\n\nexport type Action =\n  | { type: 'isDragging' }\n  | { type: 'createFunction'; function: Ifunction }\n  | { type: 'dropOutside' }\n  | { type: 'dropFnFromSideBarOnFlowCard'; index: number; draggableId: string }\n  | {\n      type: 'dropFnFromFlowCardToFlowCard'\n      sourceIndex: number\n      destinationIndex: number\n    }\n  | { type: 'clearFlowCard' }\n  | { type: 'sideBarSearch'; value: string }\n  | { type: 'dropFnFromSideBarToDocsCard'; draggableId: string }\n// | {\n//     type: 'changeFunctionParamValue'\n//     paramValue: string | number | boolean\n//     paramIndex: number\n//     functionId: string\n//   }\n\ntype DocsType = { type: 'creating' } | { type: 'editing'; fnName: string }\n\ntype State = {\n  functions: Ifunction[]\n  dataTypes: Itype[]\n  effects: Ieffect[]\n  isSideBarItemDragging: boolean\n  flowCardFunctions: Array<Ifunction & { id: string }>\n  docCards: Array<DocsType>\n  searchValue: string\n}\n\nconst initialState: State = {\n  functions: initialFunctions,\n  dataTypes: initialDataTypes,\n  effects: initialEffects,\n  isSideBarItemDragging: false,\n  flowCardFunctions: [],\n  docCards: [{ type: 'creating' }],\n  searchValue: '',\n}\n\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const listCopy = [...list]\n  const [removed] = listCopy.splice(startIndex, 1)\n  listCopy.splice(endIndex, 0, removed)\n  return listCopy\n}\nconst insert = <A>(list: Array<A>, index: number, item: A) => {\n  const listCopy = [...list]\n  listCopy.splice(index, 0, item)\n  return listCopy\n}\n\nconst getDefaultValue = (p: Itype) => {\n  return p.type === 'string'\n    ? ''\n    : p.type === 'number'\n    ? 0\n    : p.type === 'boolean'\n    ? false\n    : p.type === 'object'\n    ? ''\n    : p.type === 'undefined'\n    ? undefined\n    : p.type === 'null'\n    ? undefined\n    : ''\n}\nconst findFunction = ({\n  state,\n  name,\n  id,\n}: {\n  state: State\n  name: string\n  id: string\n}) => {\n  const fn = state.functions.find(f => f.name === name) as Ifunction\n  const parameters = fn.parameters.map(p => {\n    const value = getDefaultValue(p)\n    return {\n      ...p,\n      value,\n    }\n  })\n  const returns = { ...fn.returns, value: getDefaultValue(fn.returns) }\n  return { ...fn, parameters, returns, id }\n}\n\n// return {\n//   ...state,\n//   isSideBarItemDragging: false,\n//   flowCardFunctions: insert(state.flowCardFunctions, action.index, {\n//     name: action.draggableId.split('_')[1],\n//     id: uuid(),\n//   }),\n// }\n\n// export const fnSelector = (state: State) => ({\n//   name,\n//   id,\n// }: {\n//   name: string\n//   id: string\n// }) => {\n//   const fn = state.functions.find(f => f.name === name) as Ifunction\n//   return { ...fn, id }\n// }\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'isDragging':\n      return { ...state, isSideBarItemDragging: true }\n    case 'createFunction':\n      return { ...state, functions: state.functions.concat(action.function) }\n    case 'dropOutside':\n      return { ...state, isSideBarItemDragging: false }\n    case 'dropFnFromSideBarOnFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: insert(\n          state.flowCardFunctions,\n          action.index,\n          findFunction({\n            state,\n            name: action.draggableId.split('_')[1],\n            id: uuid(),\n          }),\n        ),\n      }\n    case 'dropFnFromFlowCardToFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: reorder(\n          state.flowCardFunctions,\n          action.sourceIndex,\n          action.destinationIndex,\n        ),\n      }\n    case 'clearFlowCard':\n      return {\n        ...state,\n        flowCardFunctions: [],\n      }\n    case 'sideBarSearch':\n      return {\n        ...state,\n        searchValue: action.value,\n      }\n    case 'dropFnFromSideBarToDocsCard':\n      return {\n        ...state,\n        docCards: [\n          { type: 'editing', fnName: action.draggableId.split('_')[1] },\n        ],\n      }\n  }\n}\n\nexport const useAppReducer =\n  process.env.NODE_ENV === 'development'\n    ? () => useLoggerReducer(reducer, initialState)\n    : () => React.useReducer(reducer, initialState)\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx",["101"],"import { QuestionIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport {\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverHeader,\n  PopoverBodyProps,\n  Tooltip,\n} from '@chakra-ui/react'\nimport React from 'react'\n\nconst PopoverExplanation = (props: {\n  children: PopoverBodyProps['children']\n  label: string\n  title: string\n}) => {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <IconButton\n          aria-label={props.label}\n          icon={\n            <Tooltip label={props.label} aria-label={props.label} hasArrow>\n              {/* <QuestionOutlineIcon /> */}\n              <QuestionIcon />\n            </Tooltip>\n          }\n          size='lg'\n          colorScheme='purple'\n          color='unison.purple'\n          variant='ghost'\n          sx={{\n            '&:hover': {\n              color: 'unison.aqua',\n            },\n          }}\n        />\n      </PopoverTrigger>\n\n      {/* <PopoverContent borderColor='unison.purple'> */}\n      <PopoverContent>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader>{props.title}</PopoverHeader>\n        <PopoverBody>{props.children}</PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport default PopoverExplanation\n",["102","103"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx",[],["104","105"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx",["106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123"],"import * as React from 'react'\nimport {\n  HStack,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  Text,\n  Textarea,\n  Code,\n  IconButton,\n  Box,\n  Divider,\n  Flex,\n  Heading,\n  Spacer,\n  Button,\n  Fade,\n} from '@chakra-ui/react'\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'\nimport { AddIcon, ArrowForwardIcon, CheckIcon } from '@chakra-ui/icons'\nimport Card from './Card'\n// import useAutocomplete from '@material-ui/lab/useAutocomplete'\n// import Autosuggest from 'react-autosuggest'\n// import { useCombobox, useMultipleSelection } from 'downshift'\nimport MonacoEditor from './Editor'\nimport { Itype, Ifunction } from './interfaces'\nimport { matchSorter } from 'match-sorter'\nimport TypeBadge from './TypeBadge'\nimport EditableText from './EditableText'\nimport PopoverExplanation from './PopoverExplanation'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { Action } from '../state'\nimport {\n  CompositeDecorator,\n  Editor as DraftEditor,\n  EditorState,\n  convertToRaw,\n  ContentState,\n} from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport './draftEditorStyles.css'\n\nconst defaultName = 'name'\nconst defaultType = '_'\nconst typeSuggestions: Array<{ title: Itype['type'] | 'New type' }> = [\n  { title: 'string' },\n  { title: 'boolean' },\n  { title: 'number' },\n]\nconst getFilteredTypeSuggestions = (\n  typeSuggestions_: typeof typeSuggestions,\n  inputValue: string,\n) => matchSorter(typeSuggestions_, inputValue, { keys: ['title'] })\n\nconst typeToName = (x: Itype | string, n: number): string => {\n  const suffix = n || ''\n  switch (x) {\n    case 'string':\n      return 's' + suffix\n    case 'number':\n      return 'n' + suffix\n    case 'boolean':\n      return 'bool' + suffix\n    case 'function':\n      return ['f', 'g', 'h', 'i', 'j'][n]\n    case 'object':\n      return 'o' + suffix\n    default:\n      return 'x'\n    case 'array':\n      return '' //TODO\n    case 'undefined':\n    case 'null':\n      return ''\n  }\n}\n\nfunction findWithRegex(regex: any, contentBlock: any, callback: any) {\n  const text = contentBlock.getText()\n  let matchArr, start\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index\n    callback(start, start + matchArr[0].length)\n  }\n}\n\nconst getStateValueFromFunc = (\n  func?: Ifunction,\n): { name: string; params: any[]; description: EditorState; code: string } => {\n  return {\n    name: func?.name || '',\n    params: [],\n    /*func?.parameterTypes\n      .map(type => ({ type }))\n      .concat({ type: func.returnType }) ||*/\n    // { type: defaultType },\n    // { type: defaultType },\n    description: EditorState.createWithContent(\n      ContentState.createFromText(func?.description || ''),\n    ),\n    code: func?.fn.toString() || '',\n  }\n}\n\nconst signatureDecorator = new CompositeDecorator([\n  {\n    //TypeBadge\n    strategy(contentBlock, cb, contentState) {\n      findWithRegex(\n        new RegExp(\n          `(${typeSuggestions.map(({ title }) => title).join('|')})`,\n          'gi',\n        ),\n        contentBlock,\n        cb,\n      )\n    },\n    component(props: any) {\n      return (\n        <TypeBadge\n          typeAsString={props.decoratedText}\n          children={props.children}\n          as='span'\n        />\n      )\n    },\n  },\n])\n\nconst descriptionDecorator = new CompositeDecorator([\n  {\n    //TypeBadge\n    strategy(contentBlock, cb, contentState) {\n      // findWithRegex(\n      //   new RegExp(\n      //     `(${typeSuggestions.map(({ title }) => title).join('|')})`,\n      //     'gi',\n      //   ),\n      //   contentBlock,\n      //   cb,\n      // )\n    },\n    component(props: any) {\n      // return (\n      //   <TypeBadge\n      //     typeAsString={props.decoratedText}\n      //     children={props.children}\n      //     as='span'\n      //   />\n      // )\n    },\n  },\n])\n\nconst DocsCard = ({\n  func,\n  dispatch,\n}: {\n  func?: Ifunction //& { parameterTypes: Itype | '_' }\n  dispatch: React.Dispatch<Action>\n}) => {\n  const [state, setState] = React.useState<{\n    name: string\n    params: any[]\n    description: EditorState\n    code: string\n  }>(() => getStateValueFromFunc(func))\n\n  const [previousFunc, setPreviousFunc] = React.useState(func)\n  if (previousFunc !== func) {\n    //reference check on function from state.functions\n    setPreviousFunc(func)\n    setState(getStateValueFromFunc(func))\n  }\n  const { name, params, description, code } = state\n\n  //Name\n  const onChangeName = (name: string) => setState(state => ({ ...state, name }))\n  const nameFontStyle = [defaultName, ''].includes(name) ? 'italic' : 'normal'\n  const nameColor = [defaultName, ''].includes(name) ? 'gray.400' : 'normal'\n\n  //Description\n  const onChangeDescription = (description: EditorState) =>\n    setState(state => ({ ...state, description }))\n  const descriptionHasText = description.getCurrentContent().hasText()\n  const descriptionFontStyle = descriptionHasText ? 'normal' : 'italic'\n  const descriptionColor = descriptionHasText ? 'normal' : 'gray.400'\n  const descriptionEditorRef = React.useRef(null)\n\n  //Signature\n  const onChangeParam = (v: string, i: number) => {\n    setState(state => {\n      const params = [...state.params]\n      const param = params[i]\n      params[i] = { type: v }\n      return { ...state, params }\n    })\n  }\n  const addParam = () => {\n    setState(state => ({\n      ...state,\n      params: state.params.concat({ type: defaultType }),\n    }))\n  }\n  const [signatureEditorState, setSignatureEditorState] = React.useState(() =>\n    EditorState.createEmpty(signatureDecorator),\n  )\n  const signatureEditorRef = React.useRef(null)\n\n  const onChangeSignatureEditor = (e: EditorState) => {\n    let newEditorState: EditorState\n    switch (e.getLastChangeType()) {\n      case 'insert-characters':\n        const arrow = '→'\n        const text = e.getCurrentContent().getFirstBlock().getText()\n        let newText = text\n        const triggerArrow = text.endsWith(',') || text.endsWith(' ')\n        if (triggerArrow) {\n          //TODO arrow component\n          const previousMeaningfulCharIsArrow = text\n            .replace(',', ' ')\n            .trimEnd()\n            .endsWith(arrow)\n          const previousCharIsClosingBracket = text\n            .substr(0, text.length - 1)\n            .endsWith('}')\n          if (previousMeaningfulCharIsArrow) {\n            newText = text.substr(0, text.length - 1)\n          } else if (previousCharIsClosingBracket && text.endsWith(' ')) {\n            //abilities\n            newText = text\n          } else {\n            // only if last non-space or comma char is not arrow\n            newText = text.substr(0, text.length - 1).concat(` ${arrow} `)\n          }\n        }\n\n        newEditorState =\n          text === newText\n            ? e\n            : EditorState.moveFocusToEnd(\n                EditorState.push(\n                  e,\n                  ContentState.createFromText(newText),\n                  'insert-fragment',\n                ),\n              )\n        break\n      default:\n        newEditorState = e\n        break\n    }\n\n    setSignatureEditorState(newEditorState)\n  }\n\n  const [typeSuggestionsList, setTypeSuggestionsList] = React.useState(\n    typeSuggestions,\n  )\n  const [inputValue, setInputValue] = React.useState('')\n\n  // const {\n  //   isOpen,\n  //   // getToggleButtonProps,\n  //   // getLabelProps,\n  //   getMenuProps,\n  //   getInputProps,\n  //   getComboboxProps,\n  //   highlightedIndex,\n  //   getItemProps,\n  //   // selectItem,\n  // } = useCombobox({\n  //   inputValue,\n  //   items: typeSuggestionsList,\n  //   onInputValueChange: ({ inputValue }) => {\n  //     console.log({ inputValue })\n  //     if (!inputValue) {\n  //       return\n  //     }\n  //     setTypeSuggestionsList(\n  //       getFilteredTypeSuggestions(typeSuggestionsList, inputValue),\n  //     )\n  //   },\n  // })\n\n  // const paramString: string = params.reduce(\n  //   (acc, p) => {\n  //     acc.typeCount[p.type] = acc.typeCount[p.type]\n  //       ? acc.typeCount[p.type] + 1\n  //       : 0\n  //     const prefix = acc.result === '' ? '' : ', '\n  //     acc.result = acc.result + typeToName(p.type, acc.typeCount[p.type])\n  //     return acc\n  //   },\n  //   { result: '', typeCount: {} },\n  // ).result\n\n  //Code\n  const onChangeCode = (code: string) => setState(state => ({ ...state, code }))\n  const editorValue =\n    code ||\n    `function ${name || '_'}(${params\n      .map(({ type }) => type)\n      .join(',')}) {\\n\\n}`\n\n  const hasChanges = true //TODO\n  const noErrors = true\n\n  return (\n    <Box\n      boxShadow={'base'}\n      // minWidth={'48%'} //@TODO prevent Yscroll another way\n      // minHeight='100%'\n      backgroundColor='white'\n      padding={1}\n      minWidth={'50%'}\n      minHeight='100vh'\n      height='100%'\n      position='relative'\n      display='flex'\n      flexDirection='column'\n    >\n      <Flex paddingLeft={2} alignItems='center'>\n        <Heading fontSize='xl' fontStyle='italic' color='unison.purple'>\n          Docs\n        </Heading>\n        <Spacer></Spacer>\n\n        <Fade in={hasChanges && noErrors}>\n          <Button\n            color='unison.green'\n            sx={{ '&:hover': { backgroundColor: 'green.50' } }}\n            variant='ghost'\n            leftIcon={<CheckIcon />}\n            onClick={() => {\n              // dispatch({ type: 'createFunction' })\n            }}\n          >\n            Save\n          </Button>\n        </Fade>\n\n        <PopoverExplanation label='Docs card explanation' title='Docs card'>\n          Docs is an editable view of the documentation for a function\n        </PopoverExplanation>\n      </Flex>\n      <Divider marginTop={2}></Divider>\n      <Droppable droppableId='DocsCard'>\n        {(provided, snapshot) => {\n          return (\n            <Box\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              // minWidth={'50%'}\n              flex={1}\n              minHeight='100%'\n              height='100%'\n              overflow='auto'\n              paddingX={2}\n              paddingY={2}\n            >\n              <EditableText\n                /* NAME */\n                value={name}\n                onChange={onChangeName}\n                placeholder={defaultName}\n                fontSize='2xl'\n                textColor={nameColor}\n                fontStyle={nameFontStyle}\n              />\n\n              {/* SIGNATURE */}\n              <HStack>\n                <Code fontSize='sm' padding={0.5}>\n                  <Editable\n                    as='span'\n                    placeholder={defaultName}\n                    fontStyle={nameFontStyle}\n                    // width={name.length * 12 + 12 + 'px'}\n                    width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    // minWidth={(name || defaultName).length * 12 + 12 + 'px'}\n                    value={name}\n                    textColor={nameColor}\n                    onChange={onChangeName}\n                    paddingX={1}\n                  >\n                    <EditablePreview\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    />\n                    <EditableInput\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                      _focus={{\n                        outline: '',\n                      }}\n                    />\n                  </Editable>\n                </Code>\n\n                <Text as='span' fontSize='sm'>\n                  :{' '}\n                </Text>\n                <Code\n                  // SIGNATURE EDITOR\n                  fontSize='sm'\n                  width='100%'\n                  paddingX={1}\n                  paddingY={1}\n                  as='span'\n                >\n                  <DraftEditor\n                    editorState={signatureEditorState}\n                    ref={signatureEditorRef}\n                    onChange={onChangeSignatureEditor}\n                  />\n                </Code>\n              </HStack>\n\n              <Code fontSize='xl' display='block' marginTop={2}>\n                {/* SIGNATURE 2 */}\n                {/* <EditableText\n                  ref={signature2Ref}\n                  placeholder={defaultName}\n                  fontStyle={nameFontStyle}\n                  width={(signature2 || defaultName).length * 12 + 12 + 'px'}\n                  maxWidth='100%'\n                  value={signature2}\n                  textColor={nameColor}\n                  onChange={onChangeSignature2}\n                /> */}\n              </Code>\n              <Text\n                /* DESCRIPTION */\n                className='description'\n                marginTop={5}\n                fontSize='xl'\n                fontStyle={descriptionFontStyle}\n                color={descriptionColor}\n                backgroundColor='yellow.50'\n                padding={3}\n              >\n                <DraftEditor\n                  placeholder='Description'\n                  editorState={description}\n                  onChange={onChangeDescription}\n                ></DraftEditor>\n              </Text>\n              <Tabs marginTop={5}>\n                <TabList>\n                  <Tab>Regular editor</Tab>\n                  <Tab>Structured editor</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel>\n                    <MonacoEditor value={editorValue}></MonacoEditor>\n                  </TabPanel>\n                  <TabPanel>\n                    <Code>{editorValue}</Code>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n\n              {provided.placeholder}\n            </Box>\n          )\n        }}\n      </Droppable>\n    </Box>\n  )\n}\nexport default DocsCard\n\n// {\n//   params.map((param, i) => (\n//     <React.Fragment key={i}>\n//       {i === 0 ? null : <ArrowForwardIcon></ArrowForwardIcon>}\n//       <Editable\n//         value={param.type}\n//         // placeholder={defaultType} //TODOr\n//         textColor={param.type === defaultType ? 'gray.400' : 'normal'}\n//         display='inline'\n//         width={param.type.length * 12 + 12 + 'px'}\n//         onChange={v => onChangeParam(v, i)}\n//         {...getComboboxProps()}\n//       >\n//         <EditablePreview />\n//         <EditableInput\n//           onFocus={() => onFocusInput(i)}\n//           _focus={{ outline: 'none' }}\n//           {...getInputProps()}\n//         />\n//         <ul\n//           {...getMenuProps()}\n//           style={{\n//             position: 'absolute',\n//             background: 'white',\n//             borderRadius: '10%',\n//             border: '1px solid gray',\n//             zIndex: '20000',\n//             color: 'black',\n//           }}\n//         >\n//           {isOpen &&\n//             i === focusedInputIndex &&\n//             typeSuggestions.map((item, index) => (\n//               <li\n//                 style={\n//                   highlightedIndex === index\n//                     ? { backgroundColor: '#bde4ff' }\n//                     : {}\n//                 }\n//                 key={`${item.title}${index}`}\n//                 {...getItemProps({ item, index })}\n//               >\n//                 {item.title === 'New type' ? (\n//                   <Code>{item.title}</Code>\n//                 ) : (\n//                   <TypeBadge typeAsString={item.title} />\n//                 )}\n//               </li>\n//             ))}\n//         </ul>\n//       </Editable>\n//       {i === params.length - 1 ? (\n//         <IconButton\n//           aria-label='Add parameter'\n//           icon={<AddIcon />}\n//           onClick={addParam}\n//         />\n//       ) : null}\n//     </React.Fragment>\n//   ))\n// }\n",{"ruleId":"124","severity":1,"message":"125","line":3,"column":27,"nodeType":"126","messageId":"127","endLine":3,"endColumn":38},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"132"},{"ruleId":"130","replacedBy":"133"},{"ruleId":"128","replacedBy":"134"},{"ruleId":"130","replacedBy":"135"},{"ruleId":"124","severity":1,"message":"136","line":17,"column":3,"nodeType":"126","messageId":"127","endLine":17,"endColumn":20},{"ruleId":"124","severity":1,"message":"137","line":18,"column":3,"nodeType":"126","messageId":"127","endLine":18,"endColumn":18},{"ruleId":"124","severity":1,"message":"138","line":200,"column":42,"nodeType":"126","messageId":"127","endLine":200,"endColumn":46},{"ruleId":"124","severity":1,"message":"139","line":401,"column":31,"nodeType":"126","messageId":"127","endLine":401,"endColumn":39},{"ruleId":"124","severity":1,"message":"140","line":3,"column":10,"nodeType":"126","messageId":"127","endLine":3,"endColumn":18},{"ruleId":"124","severity":1,"message":"141","line":2,"column":27,"nodeType":"126","messageId":"127","endLine":2,"endColumn":36},{"ruleId":"124","severity":1,"message":"140","line":2,"column":38,"nodeType":"126","messageId":"127","endLine":2,"endColumn":46},{"ruleId":"124","severity":1,"message":"142","line":7,"column":3,"nodeType":"126","messageId":"127","endLine":7,"endColumn":9},{"ruleId":"124","severity":1,"message":"143","line":18,"column":3,"nodeType":"126","messageId":"127","endLine":18,"endColumn":21},{"ruleId":"124","severity":1,"message":"144","line":19,"column":3,"nodeType":"126","messageId":"127","endLine":19,"endColumn":25},{"ruleId":"124","severity":1,"message":"145","line":20,"column":3,"nodeType":"126","messageId":"127","endLine":20,"endColumn":25},{"ruleId":"124","severity":1,"message":"146","line":22,"column":3,"nodeType":"126","messageId":"127","endLine":22,"endColumn":7},{"ruleId":"124","severity":1,"message":"147","line":31,"column":3,"nodeType":"126","messageId":"127","endLine":31,"endColumn":17},{"ruleId":"124","severity":1,"message":"148","line":195,"column":34,"nodeType":"126","messageId":"127","endLine":195,"endColumn":36},{"ruleId":"149","severity":1,"message":"150","line":289,"column":25,"nodeType":"151","endLine":293,"endColumn":27},{"ruleId":"149","severity":1,"message":"150","line":304,"column":17,"nodeType":"151","endLine":309,"endColumn":19},{"ruleId":"149","severity":1,"message":"150","line":312,"column":15,"nodeType":"151","endLine":317,"endColumn":17},{"ruleId":"124","severity":1,"message":"152","line":1,"column":8,"nodeType":"126","messageId":"127","endLine":1,"endColumn":15},{"ruleId":"124","severity":1,"message":"153","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":16},{"ruleId":"124","severity":1,"message":"154","line":1,"column":24,"nodeType":"126","messageId":"127","endLine":1,"endColumn":43},{"ruleId":"128","replacedBy":"155"},{"ruleId":"130","replacedBy":"156"},{"ruleId":"128","replacedBy":"157"},{"ruleId":"130","replacedBy":"158"},{"ruleId":"124","severity":1,"message":"159","line":8,"column":3,"nodeType":"126","messageId":"127","endLine":8,"endColumn":11},{"ruleId":"124","severity":1,"message":"160","line":10,"column":3,"nodeType":"126","messageId":"127","endLine":10,"endColumn":13},{"ruleId":"124","severity":1,"message":"161","line":20,"column":10,"nodeType":"126","messageId":"127","endLine":20,"endColumn":17},{"ruleId":"124","severity":1,"message":"162","line":20,"column":19,"nodeType":"126","messageId":"127","endLine":20,"endColumn":35},{"ruleId":"124","severity":1,"message":"163","line":21,"column":8,"nodeType":"126","messageId":"127","endLine":21,"endColumn":12},{"ruleId":"124","severity":1,"message":"164","line":37,"column":3,"nodeType":"126","messageId":"127","endLine":37,"endColumn":15},{"ruleId":"124","severity":1,"message":"165","line":50,"column":7,"nodeType":"126","messageId":"127","endLine":50,"endColumn":33},{"ruleId":"124","severity":1,"message":"166","line":55,"column":7,"nodeType":"126","messageId":"127","endLine":55,"endColumn":17},{"ruleId":"124","severity":1,"message":"167","line":130,"column":7,"nodeType":"126","messageId":"127","endLine":130,"endColumn":27},{"ruleId":"124","severity":1,"message":"168","line":188,"column":9,"nodeType":"126","messageId":"127","endLine":188,"endColumn":29},{"ruleId":"124","severity":1,"message":"169","line":191,"column":9,"nodeType":"126","messageId":"127","endLine":191,"endColumn":22},{"ruleId":"124","severity":1,"message":"170","line":194,"column":13,"nodeType":"126","messageId":"127","endLine":194,"endColumn":18},{"ruleId":"124","severity":1,"message":"171","line":199,"column":9,"nodeType":"126","messageId":"127","endLine":199,"endColumn":17},{"ruleId":"124","severity":1,"message":"172","line":257,"column":10,"nodeType":"126","messageId":"127","endLine":257,"endColumn":29},{"ruleId":"124","severity":1,"message":"173","line":257,"column":31,"nodeType":"126","messageId":"127","endLine":257,"endColumn":53},{"ruleId":"124","severity":1,"message":"174","line":260,"column":10,"nodeType":"126","messageId":"127","endLine":260,"endColumn":20},{"ruleId":"124","severity":1,"message":"175","line":260,"column":22,"nodeType":"126","messageId":"127","endLine":260,"endColumn":35},{"ruleId":"124","severity":1,"message":"176","line":299,"column":9,"nodeType":"126","messageId":"127","endLine":299,"endColumn":21},"@typescript-eslint/no-unused-vars","'extendTheme' is defined but never used.","Identifier","unusedVar","no-native-reassign",["177"],"no-negated-in-lhs",["178"],["177"],["178"],["177"],["178"],"'InputRightElement' is defined but never used.","'InputRightAddon' is defined but never used.","'pink' is assigned a value but never used.","'_' is assigned a value but never used.","'useTheme' is defined but never used.","'TextProps' is defined but never used.","'Center' is defined but never used.","'NumberInputStepper' is defined but never used.","'NumberIncrementStepper' is defined but never used.","'NumberDecrementStepper' is defined but never used.","'Text' is defined but never used.","'PlusSquareIcon' is defined but never used.","'id' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component C_TypeAndValue must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'produce' is defined but never used.","'DocsCard' is defined but never used.","'QuestionOutlineIcon' is defined but never used.",["177"],["178"],["177"],["178"],"'Textarea' is defined but never used.","'IconButton' is defined but never used.","'AddIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'Card' is defined but never used.","'convertToRaw' is defined but never used.","'getFilteredTypeSuggestions' is assigned a value but never used.","'typeToName' is assigned a value but never used.","'descriptionDecorator' is assigned a value but never used.","'descriptionEditorRef' is assigned a value but never used.","'onChangeParam' is assigned a value but never used.","'param' is assigned a value but never used.","'addParam' is assigned a value but never used.","'typeSuggestionsList' is assigned a value but never used.","'setTypeSuggestionsList' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setInputValue' is assigned a value but never used.","'onChangeCode' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]