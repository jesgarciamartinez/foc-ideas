[{"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx":"1","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx":"2","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts":"3","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts":"4","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx":"5","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/_App.js":"6","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx":"7","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx":"8","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx":"9","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx":"10","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx":"11","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts":"12","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FunctionCreationForm.tsx":"13","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx":"14","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx":"15","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx":"16"},{"size":850,"mtime":1607513057983,"results":"17","hashOfConfig":"18"},{"size":743,"mtime":1606395811243,"results":"19","hashOfConfig":"18"},{"size":5258,"mtime":1606395314403,"results":"20","hashOfConfig":"18"},{"size":416,"mtime":1606395314402,"results":"21","hashOfConfig":"22"},{"size":10691,"mtime":1607430781589,"results":"23","hashOfConfig":"18"},{"size":7738,"mtime":1606749524038,"results":"24","hashOfConfig":"18"},{"size":5460,"mtime":1607432182270,"results":"25","hashOfConfig":"18"},{"size":343,"mtime":1606814035751,"results":"26","hashOfConfig":"18"},{"size":847,"mtime":1607388161441,"results":"27","hashOfConfig":"18"},{"size":9999,"mtime":1607519592614,"results":"28","hashOfConfig":"22"},{"size":605,"mtime":1606852903166,"results":"29","hashOfConfig":"22"},{"size":6670,"mtime":1607518171616,"results":"30","hashOfConfig":"22"},{"size":8011,"mtime":1607518999580,"results":"31","hashOfConfig":"22"},{"size":614,"mtime":1607174110372,"results":"32","hashOfConfig":"18"},{"size":787,"mtime":1607414734778,"results":"33","hashOfConfig":"22"},{"size":346,"mtime":1607418143359,"results":"34","hashOfConfig":"18"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5rdob7",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g51n2v",{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts",[],["73","74"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx",["75"],"import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport type { Ieffect, ItypeView, Ifunction } from './interfaces'\nimport {\n  Box,\n  Code,\n  forwardRef,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  Kbd,\n  ListItem,\n  UnorderedList,\n  Center,\n} from '@chakra-ui/react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TreeView from '@material-ui/lab/TreeView'\nimport TreeItem from '@material-ui/lab/TreeItem'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ArrowForwardIcon,\n  SearchIcon,\n} from '@chakra-ui/icons'\nimport './cloneStyles.css'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport MouseTrap from 'mousetrap'\n// import { FlowFunctionView } from './FlowCard'\nimport PopoverExplanation from './PopoverExplanation'\n\n// const useTreeViewStyles = makeStyles({\n//   root: {\n//     height: '100%',\n//     flex: 1,\n//   },\n// })\n\ntype IsideBarItem =\n  | {\n      nodeId: 'functions'\n      label: 'Functions'\n      items: Array<Ifunction>\n    }\n  | {\n      nodeId: 'types'\n      label: 'Data Types'\n      items: Array<ItypeView>\n    }\n  | {\n      nodeId: 'effects'\n      label: 'Effects'\n      items: Array<Ieffect>\n    }\n\nexport default forwardRef(\n  (\n    {\n      items,\n      isAnyItemDragging,\n      dispatch,\n      searchValue,\n    }: {\n      items: Array<IsideBarItem>\n      isAnyItemDragging: boolean\n      dispatch: React.Dispatch<Action>\n      searchValue: string\n    },\n    ref,\n  ) => {\n    // const { root } = useTreeViewStyles()\n    return (\n      <Box height='100%' flex={1}>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents='none'\n            children={<SearchIcon color='gray.300' />}\n          />\n          <Input\n            ref={ref}\n            placeholder='Search'\n            size='md'\n            borderRadius='0%'\n            borderX='none'\n            value={searchValue}\n            onChange={e =>\n              dispatch({ type: 'sideBarSearch', value: e.target.value })\n            }\n          />\n        </InputGroup>\n        <Center>\n          <PopoverExplanation label='Sidebar explanation' title='Sidebar'>\n            <UnorderedList>\n              <ListItem>\n                Drag functions and drop them onto Flow Card or Docs Card\n              </ListItem>\n              <ListItem>\n                <Kbd>ctrl</Kbd> + <Kbd>B</Kbd> or <Kbd>âŒ˜</Kbd> + <Kbd>B</Kbd> to\n                focus sidebar search\n              </ListItem>\n              <ListItem>\n                <Kbd>up</Kbd>, <Kbd>down</Kbd>, <Kbd>left</Kbd>,{' '}\n                <Kbd>right</Kbd> to move in Sidebar\n              </ListItem>\n              <ListItem>\n                <Kbd>space</Kbd> to drag, <Kbd>right</Kbd> then <Kbd>space</Kbd>{' '}\n                to drop\n              </ListItem>\n            </UnorderedList>\n          </PopoverExplanation>\n        </Center>\n\n        <TreeView\n          selected={[]}\n          aria-label='Functions and types'\n          // className={root}\n          defaultCollapseIcon={<ChevronDownIcon />}\n          defaultExpandIcon={<ChevronRightIcon />}\n          onNodeFocus={(e, v) => {\n            console.log({ isAnyItemDragging, e, v })\n            const draggable: any = document.querySelector(\n              `[data-rbd-draggable-id=\"${v}\"]`,\n            )\n\n            if (draggable) {\n              const div = draggable.parentElement?.parentElement?.parentElement\n              const li = div?.parentElement\n              const parentMenu =\n                li?.parentElement?.parentElement?.parentElement?.parentElement\n              const previous = li?.previousElementSibling\n              const next = li?.nextElementSibling\n\n              if (!draggable.bound) {\n                draggable.bound = true\n                MouseTrap(draggable).bind('left', e => {\n                  if (isAnyItemDragging) {\n                    return\n                  }\n                  div?.classList.remove('Mui-focused')\n                  parentMenu?.focus()\n                })\n                MouseTrap(draggable).bind('down', e => {\n                  if (isAnyItemDragging) {\n                    return\n                  }\n                  if (next) {\n                    next.focus()\n                    div?.classList.remove('Mui-focused')\n                  } else {\n                    parentMenu?.nextElementSibling?.focus()\n                    div?.classList.remove('Mui-focused')\n                  }\n                })\n                MouseTrap(draggable).bind('up', e => {\n                  if (isAnyItemDragging) {\n                    return\n                  }\n                  if (previous) {\n                    previous.focus()\n                    div?.classList.remove('Mui-focused')\n                  } else {\n                    parentMenu?.focus()\n                    div?.classList.remove('Mui-focused')\n                  }\n                })\n              }\n\n              div?.classList.add('Mui-focused')\n              draggable.focus()\n            }\n          }}\n          // onNodeSelect={(e: any, v: string) => {\n          // console.log('select', { e, v })\n          // const draggable: HTMLInputElement | null = document.querySelector(\n          //   `[data-rbd-draggable-id=\"${v}\"]`,\n          // )\n          // if (draggable) {\n          //   draggable.focus()\n          // }\n          // if (!v.startsWith('functions')) {\n          //   return\n          // }\n          // const [label, name, action] = v.split('_')\n          // if (action === 'flow') {\n          //   dispatch({\n          //     type: 'dropFnFromSideBarOnFlowCard',\n          //     index: 0, //TODO\n          //     draggableId: `${label}_${name}`,\n          //   })\n          // } else if (action === 'docs') {\n          // }\n          // }}\n          // onNodeToggle={(e: any, v: any) => console.log('toggle', { e, v })}\n        >\n          {items &&\n            items.map(item => {\n              return (\n                <TreeItem\n                  nodeId={item.nodeId}\n                  key={item.nodeId}\n                  label={item.label}\n                >\n                  {(() => {\n                    switch (item.nodeId) {\n                      case 'functions':\n                        return item.items.map(innerItem => {\n                          const id = `${item.nodeId}_${innerItem.name}`\n                          return (\n                            <FunctionTreeItem\n                              {...innerItem}\n                              key={id}\n                              nodeId={id}\n                              isAnyItemDragging={!!isAnyItemDragging}\n                            />\n                          )\n                        })\n                      case 'types':\n                        return item.items.map(innerItem => {\n                          const id = `${item.nodeId}_${innerItem.name}`\n                          return (\n                            <TypeTreeItem\n                              {...innerItem}\n                              key={id}\n                              nodeId={id}\n                              isAnyItemDragging={!!isAnyItemDragging}\n                            />\n                          )\n                        })\n                      case 'effects':\n                        return null //@TODO\n                      default:\n                        let _: never = item\n                    }\n                  })()}\n                </TreeItem>\n              )\n            })}\n        </TreeView>\n      </Box>\n    )\n  },\n)\n\nconst FunctionItem = (props: Ifunction) => {\n  return (\n    <Text wrap='nowrap'>\n      <Code /*backgroundColor='white'*/>{props.name}</Code>\n      <Text as='span'>:</Text>\n      <Text as={'span'} flexWrap='nowrap'>\n        {props.parameters.map((p, i) => (\n          <Text as='span' key={i}>\n            <TypeBadge typeAsString={p.type} />{' '}\n            <Text as='span'>\n              {' '}\n              <ArrowForwardIcon />{' '}\n            </Text>\n          </Text>\n        ))}\n      </Text>\n      <Text as='span'>\n        <TypeBadge typeAsString={props.returns.type} />\n      </Text>\n    </Text>\n  )\n}\n\nconst getFunctionRenderItem = (props: Ifunction) => (\n  provided: any,\n  snapshot: any,\n  rubric: any,\n) => {\n  return (\n    <div\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n    >\n      <div>\n        <FunctionItem {...props} />\n        {/* <FlowFunctionView item={{ ...props }} /> */}\n      </div>\n    </div>\n  )\n}\nconst useTreeItemStyles = makeStyles({\n  root: {\n    marginBottom: '5px',\n  },\n  content: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n      cursor: 'grabbing',\n    },\n  },\n})\n\nconst FunctionTreeItem = (\n  props: Ifunction & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { root, content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      classes={{ root, content: props.isAnyItemDragging ? content : undefined }}\n      nodeId={props.nodeId}\n      label={\n        <Droppable\n          droppableId={props.nodeId}\n          renderClone={getFunctionRenderItem(props)}\n          isDropDisabled={true}\n        >\n          {(provided, snapshot) => {\n            const shouldRenderClone =\n              props.nodeId === snapshot.draggingFromThisWith\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {shouldRenderClone ? (\n                  <div className='react-beautiful-dnd-copy'>\n                    <FunctionItem {...props}></FunctionItem>\n                  </div>\n                ) : (\n                  <Draggable draggableId={props.nodeId} index={0}>\n                    {(provided, snapshot) => {\n                      return (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <FunctionItem {...props}></FunctionItem>\n                        </div>\n                      )\n                    }}\n                  </Draggable>\n                )}\n                {/* {provided.placeholder} */}\n              </div>\n            )\n          }}\n        </Droppable>\n      }\n    ></TreeItem>\n  )\n}\nconst TypeTreeItem = (\n  props: ItypeView & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      nodeId={props.nodeId}\n      classes={{ content: props.isAnyItemDragging ? content : undefined }}\n      label={`${props.type} ${props.name}`}\n    />\n  )\n}\n",["76","77"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/_App.js",["78"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx",["79"],"import * as React from 'react'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport { ChakraProvider, theme as _theme, extendTheme } from '@chakra-ui/react'\nimport SideBar from './components/Sidebar'\nimport CardHStack from './components/CardHStack'\nimport SplitPane from 'react-split-pane'\nimport FlowCard from './components/FlowCard'\nimport { useAppReducer } from './state'\nimport FunctionCreationForm from './components/FunctionCreationForm'\nimport { matchSorter } from 'match-sorter'\nimport './styles.css'\nimport { HotKeys } from 'react-hotkeys'\n// import { ColorModeSwitcher } from './ColorModeSwitcher'\n// import ts from 'typescript'\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      html: { minWidth: '860px' },\n    },\n  },\n})\n// const code = 'function add(n,m){ n + m }'\n// const sc = ts.createSourceFile('x.ts', code, ts.ScriptTarget.Latest, true)\n// console.info(sc)\n// let indent = 0\n// function print(node: ts.Node) {\n//   console.log(new Array(indent + 1).join(' ') + ts.SyntaxKind[node.kind])\n//   indent++\n//   ts.forEachChild(node, print)\n//   indent--\n// }\n\n// let result = ts.transpileModule(code, {\n//   compilerOptions: { module: ts.ModuleKind.CommonJS },\n// })\n\n// print(sc)\n\nexport const App = () => {\n  const [state, dispatch] = useAppReducer()\n  const onDragEnd = React.useCallback(\n    dropResult => {\n      console.log({ dropResult })\n      if (\n        //SideBar to FlowCard\n        dropResult.source.droppableId !== 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromSideBarOnFlowCard',\n          index: dropResult.destination.index,\n          draggableId: dropResult.draggableId,\n        })\n      } else if (\n        dropResult.source.droppableId === 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromFlowCardToFlowCard',\n          sourceIndex: dropResult.source.index,\n          destinationIndex: dropResult.destination.index,\n        })\n      } else {\n        dispatch({ type: 'dropOutside' })\n\n        //Regain focus after dropping outside - TODO does not work if dragged and esc pressed\n        const li: any = document.querySelector(\n          `[id$='${dropResult.draggableId}']`,\n        )\n        if (li) {\n          console.log({ li })\n          li.focus()\n        }\n      }\n    },\n    [dispatch],\n  )\n  const sideBarRef = React.useRef()\n  return (\n    <ChakraProvider theme={theme}>\n      <HotKeys\n        keyMap={{ focusSidebar: ['ctrl+b', 'command+b'] }} //TODO parameterize\n        handlers={{\n          focusSidebar() {\n            let a = sideBarRef as any\n            a.current.focus()\n          },\n        }}\n      >\n        <DragDropContext\n          onDragStart={() => {\n            dispatch({ type: 'isDragging' })\n          }}\n          onDragEnd={onDragEnd}\n        >\n          <SplitPane\n            style={{ overflow: 'auto', height: '100vh' }}\n            defaultSize='20%'\n            minSize={100}\n            maxSize={-300}\n            resizerStyle={{\n              border: '3px solid rgba(1, 22, 39, 0.21)',\n              // boxShadow: ,\n              zIndex: 20,\n              cursor: 'col-resize',\n            }}\n            split='vertical'\n          >\n            <SideBar\n              ref={sideBarRef}\n              searchValue={state.searchValue}\n              dispatch={dispatch}\n              isAnyItemDragging={state.isSideBarItemDragging}\n              items={[\n                {\n                  nodeId: 'functions',\n                  label: 'Functions',\n                  items: matchSorter(state.functions, state.searchValue, {\n                    keys: ['name'],\n                  }),\n                },\n                {\n                  nodeId: 'types',\n                  label: 'Data Types',\n                  items: matchSorter(state.dataTypes, state.searchValue, {\n                    keys: ['name'],\n                  }),\n                },\n                {\n                  nodeId: 'effects',\n                  label: 'Effects',\n                  items: matchSorter(state.effects, state.searchValue, {\n                    keys: ['name'],\n                  }),\n                },\n              ]}\n            ></SideBar>\n            <CardHStack>\n              <FlowCard\n                items={state.flowCardFunctions}\n                dispatch={dispatch}\n                name=''\n              ></FlowCard>\n              <FunctionCreationForm />\n              {/* <Card>\n              <form>\n                <InputGroup size='sm'>\n                  <InputLeftAddon>\n                    <Code>function</Code>\n                  </InputLeftAddon>\n                  <Input></Input>\n                  <InputRightAddon>\n                    <Code>(</Code>\n                  </InputRightAddon>\n                </InputGroup>\n                <Menu isOpen={true}>\n                  <MenuButton as={Button}>Type</MenuButton>\n                  <MenuList>\n                    <MenuItem>+ New Type</MenuItem>\n                    <MenuItem>String</MenuItem>\n                    <MenuItem>Number</MenuItem>\n                  </MenuList>\n                </Menu>\n              </form>\n            </Card>\n            <Card>\n              <Editor></Editor>\n            </Card> */}\n            </CardHStack>\n          </SplitPane>\n        </DragDropContext>\n      </HotKeys>\n    </ChakraProvider>\n  )\n}\n//\"calc(100vh - 3rem)\"\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx",["80"],"import * as React from 'react'\nimport { Code } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\nconst TypeBadge = ({\n  typeAsString,\n  ...rest\n}: {\n  typeAsString: Itype['type']\n}) => {\n  return (\n    <Code\n      colorScheme={(() => {\n        switch (typeAsString) {\n          case 'string':\n            return 'yellow'\n          case 'number':\n            return 'green'\n          case 'boolean':\n            return 'blue'\n          case 'function':\n            return 'purple'\n          case 'object':\n            return 'red'\n          case 'array':\n            return 'red'\n          case 'undefined':\n            return 'black'\n          case 'null':\n            return 'black'\n          default:\n            let x: never = typeAsString\n        }\n      })()}\n    >\n      {typeAsString}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx",["81","82","83","84","85"],"import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport { Ifunction, Iparameter, ItypeView } from './interfaces'\nimport {\n  Box,\n  Flex,\n  Center,\n  Spacer,\n  Code,\n  HStack,\n  VStack,\n  forwardRef,\n  Divider,\n  Button,\n  Input,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Checkbox,\n  Text,\n} from '@chakra-ui/react'\nimport {\n  ArrowDownIcon,\n  ArrowForwardIcon,\n  DeleteIcon,\n  PlusSquareIcon,\n} from '@chakra-ui/icons'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport { Itype } from './interfaces'\nimport PopoverExplanation from './PopoverExplanation'\nimport produce from 'immer'\n// import EditableText from './EditableText'\n\nconst TypeAndValue = ({\n  type,\n  value,\n  onChange,\n  direction,\n}: {\n  type: Itype['type']\n  value: any\n  onChange: (v: string | number | boolean) => void\n  direction: 'row' | 'column'\n}) => {\n  return (\n    <Flex direction={direction}>\n      <TypeBadge typeAsString={type} />\n      {(() => {\n        switch (type) {\n          case 'string':\n            return (\n              <Input\n                size='sm'\n                value={value}\n                onChange={e => {\n                  onChange(e.target.value) /*onChangeParam*/\n                }}\n              ></Input>\n            )\n          case 'number':\n            return (\n              <NumberInput\n                size='sm'\n                value={value}\n                onChange={(s, n) => {\n                  onChange(n)\n                }}\n              >\n                <NumberInputField />\n                <NumberInputStepper>\n                  <NumberIncrementStepper />\n                  <NumberDecrementStepper />\n                </NumberInputStepper>\n              </NumberInput>\n            )\n          case 'boolean':\n            return (\n              <Checkbox\n                isChecked={value}\n                onChange={e => {\n                  onChange(e.target.checked)\n                }}\n              >\n                {value ? 'true' : 'false'}\n              </Checkbox>\n            )\n          default:\n            return null\n            break\n        }\n      })()}\n    </Flex>\n  )\n}\n\nexport const FlowFunctionView = React.memo(\n  forwardRef(\n    (\n      {\n        item,\n        style,\n        onChangeParam,\n        ...rest\n      }: {\n        item: Ifunction\n        style?: React.CSSProperties\n        onChangeParam: (_: {\n          paramValue: string | number | boolean\n          paramIndex: number\n        }) => void\n      },\n      ref,\n    ) => {\n      const hasZeroParams = item.parameters.length === 0\n      const hasOneParam = item.parameters.length === 1\n      return (\n        <Flex\n          {...rest}\n          ref={ref}\n          style={style}\n          flexBasis={0}\n          minWidth={0}\n          marginY={3}\n          wrap='nowrap'\n        >\n          <Flex flex={1} minWidth={0}>\n            {/*name and params*/}\n            <Center\n              flex={1}\n              whiteSpace='nowrap'\n              overflow='hidden'\n              textOverflow='ellipsis'\n            >\n              <Code>{item.name}</Code>\n            </Center>\n            <Spacer></Spacer>\n            {hasZeroParams || hasOneParam\n              ? null\n              : item.parameters\n                  .slice(0, item.parameters.length - 1)\n                  .map((param, i) => {\n                    const css =\n                      i === item.parameters.length - 2\n                        ? { transform: 'rotate(-45deg)' }\n                        : null\n                    return (\n                      <HStack flex={1} key={i}>\n                        <TypeAndValue\n                          type={param.type}\n                          onChange={paramValue => {\n                            onChangeParam({ paramValue, paramIndex: i })\n                          }}\n                          value={param.value}\n                          direction='column'\n                        />{' '}\n                        <ArrowForwardIcon css={css} />\n                      </HStack>\n                    )\n                  })}\n          </Flex>\n\n          <Flex paddingY={1}>\n            {/* Last param, return type */}\n            <VStack>\n              {hasZeroParams ? (\n                <Code>()</Code>\n              ) : (\n                <TypeAndValue\n                  onChange={paramValue => {\n                    onChangeParam({\n                      paramValue,\n                      paramIndex: item.parameters.length - 1,\n                    })\n                  }} //TODO only let change if it's the first one\n                  value={item.parameters[item.parameters.length - 1].value}\n                  direction='row'\n                  type={item.parameters[item.parameters.length - 1].type}\n                />\n              )}\n              <ArrowDownIcon></ArrowDownIcon>\n              <TypeAndValue\n                type={item.returns.type}\n                onChange={() => {}} //TODO disable\n                value={item.returns.value}\n                direction='row'\n              />\n            </VStack>\n            {/* <Box>{'some example value and more stuff'}</Box> */}\n          </Flex>\n        </Flex>\n      )\n    },\n  ),\n)\n\nconst defaultName = 'name'\nconst getItemsWithComputedValues = (\n  items: Array<Ifunction & { id: string }>,\n) => {\n  let previousReturn = null\n  let newItems: Array<Ifunction & { id: string }> = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n    const parameters = [...item.parameters]\n    const previouslastParam: Iparameter | undefined = parameters.pop()\n\n    if (previouslastParam) {\n      parameters.push({\n        ...previouslastParam,\n        value:\n          previousReturn === null ? previouslastParam?.value : previousReturn,\n      })\n    }\n\n    //TODO typecheck\n    const returnValue = item.fn(parameters.map(p => p.value).join(','))\n\n    newItems.push({\n      ...item,\n      parameters,\n      returns: { ...item.returns, value: returnValue },\n    })\n\n    previousReturn = returnValue\n  }\n\n  return newItems\n}\n\nconst FlowCard = ({\n  items,\n  name,\n  dispatch,\n}: {\n  items: Array<Ifunction & { id: string }>\n  name: string\n  dispatch: React.Dispatch<Action>\n}) => {\n  const nameFontStyle = [defaultName, ''].includes(name) ? 'italic' : 'normal'\n  const nameColor = [defaultName, ''].includes(name) ? 'gray.400' : 'normal'\n  const itemsWithComputedValues = getItemsWithComputedValues(items)\n  // const [itemsWithComputedValues, setItemsWithComputedValues] = React.useState<\n  //   Array<Ifunction & { id: string }>\n  // >(items)\n  // React.useEffect(() => {\n  //   setItemsWithComputedValues(getItemsWithComputedValues(items))\n  // }, [items])\n\n  return (\n    <Box\n      boxShadow={'base'}\n      padding={1}\n      minWidth={'50%'}\n      minHeight='100vh'\n      position='relative'\n      backgroundColor='white'\n      display='flex'\n      flexDirection='column'\n    >\n      <HStack>\n        <Text fontSize='xl'>Flow Card</Text>\n        <Button\n          leftIcon={<DeleteIcon />}\n          onClick={() => dispatch({ type: 'clearFlowCard' })}\n        >\n          Clear\n        </Button>\n        <Button\n          leftIcon={<PlusSquareIcon />}\n          onClick={() => dispatch({ type: 'clearFlowCard' })}\n        >\n          Create function\n        </Button>\n        <PopoverExplanation label='Flow card explanation' title='Flow card'>\n          Flow is a special view for the flow/pipe function (left-to-right\n          variadic compose). This is meant as a \"functional Scratch\" to visually\n          explore function composition. Last argument and return type line up\n          vertically to reinforce the pipeline metaphor. JS is executed and\n          shown on the right if functions don't have side-effects, otherwise a\n          'Play' button will appear. `console.log` is the only effect so far.\n          Note that functions need to be curried manually.\n        </PopoverExplanation>\n      </HStack>\n      <Divider marginTop={2}></Divider>\n      <Droppable droppableId='FlowCard'>\n        {(provided, snapshot) => {\n          return (\n            <Box\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              minWidth={'50%'}\n              flex={1}\n              minHeight='100%'\n            >\n              {itemsWithComputedValues.map((item, i) => {\n                return (\n                  <Draggable key={item.id} draggableId={item.id} index={i}>\n                    {(provided, snapshot) => {\n                      return (\n                        <FlowFunctionView\n                          item={item}\n                          onChangeParam={({ paramValue, paramIndex }) => {\n                            // setItemsWithComputedValues(\n                            //   produce(itemsWithComputedValues, draft => {\n                            //     let fn = draft.find(({ id }) => id === item.id)\n                            //     if (!fn) return //should not happen\n                            //     fn.parameters[paramIndex].value = paramValue\n                            //   }),\n                            // )\n                            dispatch({\n                              type: 'changeFunctionParamValue',\n                              functionId: item.id,\n                              paramValue,\n                              paramIndex,\n                            })\n                          }}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={provided.draggableProps.style}\n                        />\n                      )\n                    }}\n                  </Draggable>\n                )\n              })}\n              {provided.placeholder}\n            </Box>\n          )\n        }}\n      </Droppable>\n    </Box>\n  )\n}\n\nexport default FlowCard\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FunctionCreationForm.tsx",["86","87","88","89","90","91"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":233,"column":29,"nodeType":"98","messageId":"99","endLine":233,"endColumn":37},{"ruleId":"92","replacedBy":"100"},{"ruleId":"94","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":40,"column":7,"nodeType":"98","messageId":"99","endLine":40,"endColumn":11},{"ruleId":"96","severity":1,"message":"104","line":3,"column":35,"nodeType":"98","messageId":"99","endLine":3,"endColumn":41},{"ruleId":"96","severity":1,"message":"105","line":31,"column":17,"nodeType":"98","messageId":"99","endLine":31,"endColumn":25},{"ruleId":"96","severity":1,"message":"106","line":3,"column":33,"nodeType":"98","messageId":"99","endLine":3,"endColumn":42},{"ruleId":"96","severity":1,"message":"107","line":34,"column":8,"nodeType":"98","messageId":"99","endLine":34,"endColumn":15},{"ruleId":"108","severity":1,"message":"109","line":92,"column":13,"nodeType":"110","messageId":"111","endLine":92,"endColumn":18},{"ruleId":"96","severity":1,"message":"112","line":243,"column":9,"nodeType":"98","messageId":"99","endLine":243,"endColumn":22},{"ruleId":"96","severity":1,"message":"113","line":244,"column":9,"nodeType":"98","messageId":"99","endLine":244,"endColumn":18},{"ruleId":"96","severity":1,"message":"114","line":10,"column":3,"nodeType":"98","messageId":"99","endLine":10,"endColumn":16},{"ruleId":"96","severity":1,"message":"115","line":14,"column":37,"nodeType":"98","messageId":"99","endLine":14,"endColumn":52},{"ruleId":"96","severity":1,"message":"116","line":18,"column":23,"nodeType":"98","messageId":"99","endLine":18,"endColumn":43},{"ruleId":"96","severity":1,"message":"117","line":76,"column":38,"nodeType":"98","messageId":"99","endLine":76,"endColumn":42},{"ruleId":"96","severity":1,"message":"118","line":83,"column":13,"nodeType":"98","messageId":"99","endLine":83,"endColumn":18},{"ruleId":"96","severity":1,"message":"119","line":99,"column":22,"nodeType":"98","messageId":"99","endLine":99,"endColumn":35},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar",["120"],["121"],"no-unused-vars","'grid' is assigned a value but never used.","'_theme' is defined but never used.","'x' is assigned a value but never used.","'ItypeView' is defined but never used.","'produce' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'nameFontStyle' is assigned a value but never used.","'nameColor' is assigned a value but never used.","'EditableProps' is defined but never used.","'ChevronDownIcon' is defined but never used.","'useMultipleSelection' is defined but never used.","'code' is assigned a value but never used.","'param' is assigned a value but never used.","'setInputValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]