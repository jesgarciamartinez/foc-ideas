[{"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx":"1","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx":"2","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts":"3","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts":"4","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx":"5","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx":"6","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx":"7","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx":"8","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx":"9","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx":"10","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts":"11","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx":"12","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx":"13","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx":"14","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts":"15","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx":"16","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/utils.js":"17","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/index.js":"18","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/autocomplete.js":"19","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/triggers.js":"20","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/data.js":"21","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/styles.js":"22"},{"size":953,"mtime":1607783634378,"results":"23","hashOfConfig":"24"},{"size":743,"mtime":1606395811243,"results":"25","hashOfConfig":"24"},{"size":5258,"mtime":1606395314403,"results":"26","hashOfConfig":"24"},{"size":416,"mtime":1606395314402,"results":"27","hashOfConfig":"24"},{"size":13497,"mtime":1608113483950,"results":"28","hashOfConfig":"24"},{"size":5770,"mtime":1608116277517,"results":"29","hashOfConfig":"24"},{"size":395,"mtime":1608112070153,"results":"30","hashOfConfig":"24"},{"size":1337,"mtime":1607962977962,"results":"31","hashOfConfig":"24"},{"size":13562,"mtime":1608116127627,"results":"32","hashOfConfig":"24"},{"size":605,"mtime":1606852903166,"results":"33","hashOfConfig":"24"},{"size":9304,"mtime":1608126912863,"results":"34","hashOfConfig":"24"},{"size":870,"mtime":1608005300285,"results":"35","hashOfConfig":"24"},{"size":1292,"mtime":1607922509708,"results":"36","hashOfConfig":"24"},{"size":393,"mtime":1607635865658,"results":"37","hashOfConfig":"24"},{"size":2033,"mtime":1607865814484,"results":"38","hashOfConfig":"24"},{"size":20165,"mtime":1608205444614,"results":"39","hashOfConfig":"24"},{"size":408,"mtime":1608130752557,"results":"40","hashOfConfig":"24"},{"size":2398,"mtime":1608157691253,"results":"41","hashOfConfig":"24"},{"size":8928,"mtime":1608177181752,"results":"42","hashOfConfig":"24"},{"size":441,"mtime":1608130752556,"results":"43","hashOfConfig":"24"},{"size":182,"mtime":1608130752554,"results":"44","hashOfConfig":"24"},{"size":742,"mtime":1608130752556,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"5rdob7",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx",["105"],"import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ColorModeScript, extendTheme, ChakraProvider } from '@chakra-ui/react'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n",["106","107"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx",[],["108","109"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts",[],["110","111"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx",["112","113","114"],"import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport type { Ieffect, Itype, Ifunction } from './interfaces'\nimport {\n  Box,\n  Code,\n  forwardRef,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  Kbd,\n  ListItem,\n  UnorderedList,\n  Center,\n  useTheme,\n  InputRightElement,\n  InputRightAddon,\n  HStack,\n} from '@chakra-ui/react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TreeView from '@material-ui/lab/TreeView'\nimport TreeItem from '@material-ui/lab/TreeItem'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ArrowForwardIcon,\n  SearchIcon,\n} from '@chakra-ui/icons'\nimport { FaShapes } from 'react-icons/fa'\n// import { VscSymbolMisc as FaShapes } from 'react-icons/vsc'\nimport { GiMineExplosion } from 'react-icons/gi'\n// import { IoShapes } from 'react-icons/io' //RiFunctionLine, RiFunctionFill //IoShapesOutline\nimport './sideBarStyles.css'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport MouseTrap from 'mousetrap'\n// import { FlowFunctionView } from './FlowCard'\nimport PopoverExplanation from './PopoverExplanation'\n\ntype IsideBarItem =\n  | {\n      nodeId: 'functions'\n      label: 'Functions'\n      items: Array<Ifunction>\n    }\n  | {\n      nodeId: 'types'\n      label: 'Data Types'\n      items: Array<Itype>\n    }\n  | {\n      nodeId: 'effects'\n      label: 'Effects'\n      items: Array<Ieffect>\n    }\n\nconst FunctionItem = (props: Ifunction) => {\n  return (\n    <Text\n      wrap='nowrap'\n      color='unison.purple'\n      _hover={{ color: 'unison.lightPurple' }}\n    >\n      <Code\n        fontSize='sm'\n        // fontWeight='700'\n        paddingX={1}\n        paddingY={0.5}\n        rounded='base'\n        backgroundColor='transparent'\n        color='inherit'\n      >\n        {props.name}\n      </Code>\n      <Text as='span'>: </Text>\n      <Text as={'span'} flexWrap='nowrap'>\n        {props.parameters.map((p, i) => (\n          <Text as='span' key={i}>\n            <TypeBadge typeAsString={p.type} />\n            <ArrowForwardIcon marginX={1} />\n          </Text>\n        ))}\n      </Text>\n      <TypeBadge typeAsString={props.returns.type} />\n    </Text>\n  )\n}\n\nconst getFunctionRenderItem = (props: Ifunction) => (\n  provided: any,\n  snapshot: any,\n  rubric: any,\n) => {\n  return (\n    <div\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n    >\n      <div>\n        <FunctionItem {...props} />\n        {/* <FlowFunctionView item={{ ...props }} /> */}\n      </div>\n    </div>\n  )\n}\nconst useTreeItemStyles = makeStyles({\n  root: {\n    marginBottom: '5px',\n  },\n  content: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n      cursor: 'grabbing',\n    },\n  },\n})\n\nconst FunctionTreeItem = (\n  props: Ifunction & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { root, content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      classes={{ root, content: props.isAnyItemDragging ? content : undefined }}\n      nodeId={props.nodeId}\n      label={\n        <Droppable\n          droppableId={props.nodeId}\n          renderClone={getFunctionRenderItem(props)}\n          isDropDisabled={true}\n        >\n          {(provided, snapshot) => {\n            const shouldRenderClone =\n              props.nodeId === snapshot.draggingFromThisWith\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {shouldRenderClone ? (\n                  <div className='react-beautiful-dnd-copy'>\n                    <FunctionItem {...props}></FunctionItem>\n                  </div>\n                ) : (\n                  <Draggable draggableId={props.nodeId} index={0}>\n                    {(provided, snapshot) => {\n                      return (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <FunctionItem {...props}></FunctionItem>\n                        </div>\n                      )\n                    }}\n                  </Draggable>\n                )}\n                {/* {provided.placeholder} */}\n              </div>\n            )\n          }}\n        </Droppable>\n      }\n    ></TreeItem>\n  )\n}\nconst TypeTreeItem = (\n  props: Itype & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      nodeId={props.nodeId}\n      classes={{ content: props.isAnyItemDragging ? content : undefined }}\n      label={<TypeBadge typeAsString={props.type}></TypeBadge>}\n    />\n  )\n}\n\nconst Sidebar = React.memo(\n  forwardRef(\n    (\n      {\n        items,\n        isAnyItemDragging,\n        dispatch,\n        searchValue,\n      }: {\n        items: Array<IsideBarItem>\n        isAnyItemDragging: boolean\n        dispatch: React.Dispatch<Action>\n        searchValue: string\n      },\n      ref,\n    ) => {\n      const theme = useTheme()\n      const {\n        colors: {\n          unison: { purple, lightPurple, aqua },\n        },\n      } = theme\n\n      //Search\n      const [isHoveringSearch, setIsHoveringSearch] = React.useState(false)\n      const [isFocusedSearch, setFocusedSearch] = React.useState(false)\n      const onMouseEnterSearch = React.useCallback(() => {\n        setIsHoveringSearch(true)\n      }, [])\n      const onMouseLeaveSearch = React.useCallback(() => {\n        setIsHoveringSearch(false)\n      }, [])\n\n      return (\n        <Box\n          height='100%'\n          flex={1}\n          backgroundColor={'purple.50'}\n          paddingTop={4}\n        >\n          <InputGroup\n            width='100%'\n            whiteSpace='nowrap'\n            padding={1}\n            display='flex'\n            onMouseEnter={onMouseEnterSearch}\n            onMouseLeave={onMouseLeaveSearch}\n            // _focusWithin={{ color: 'teal.600' }}\n          >\n            <InputLeftElement\n              pointerEvents='none'\n              children={\n                <SearchIcon\n                  color={\n                    isFocusedSearch\n                      ? aqua\n                      : isHoveringSearch\n                      ? lightPurple\n                      : purple\n                  }\n                />\n              } //TODO teal\n            />\n            <Input\n              ref={ref}\n              placeholder='Search'\n              variant='outline'\n              _hover={{ borderBottomColor: lightPurple }}\n              focusBorderColor={'unison.aqua'}\n              size='md'\n              borderRadius='0%'\n              borderTop='none'\n              borderLeft='none'\n              borderRight='none'\n              borderBottom={`2px solid ${purple}`}\n              value={searchValue}\n              onFocus={() => {\n                if (!ref || !('current' in ref)) return\n                ref.current.setSelectionRange(0, ref.current.value.length)\n                setFocusedSearch(true)\n              }}\n              onBlur={() => setFocusedSearch(false)}\n              onChange={e =>\n                dispatch({ type: 'sideBarSearch', value: e.target.value })\n              }\n            />\n            {isHoveringSearch ? (\n              <HStack\n                background='transparent'\n                position='absolute'\n                right={2}\n                top={2}\n                pointerEvents='none'\n              >\n                <Kbd>ctrl</Kbd>\n                <Text>/</Text>\n                <Kbd>⌘</Kbd>\n                <Text>+</Text>\n                <Kbd>B</Kbd>\n              </HStack>\n            ) : null}\n          </InputGroup>\n          <Center>\n            <PopoverExplanation label='Sidebar explanation' title='Sidebar'>\n              <UnorderedList>\n                <ListItem>\n                  Drag functions and drop them onto Flow Card or Docs Card\n                </ListItem>\n                <ListItem>\n                  <Kbd>up</Kbd>, <Kbd>down</Kbd>, <Kbd>left</Kbd>,{' '}\n                  <Kbd>right</Kbd> to move in Sidebar\n                </ListItem>\n                <ListItem>\n                  <Kbd>space</Kbd> to drag, <Kbd>right</Kbd> then{' '}\n                  <Kbd>space</Kbd> to drop\n                </ListItem>\n                <ListItem>\n                  Datatypes and Effects are not interactive at this point\n                </ListItem>\n              </UnorderedList>\n            </PopoverExplanation>\n          </Center>\n\n          <TreeView\n            selected={[]}\n            aria-label='Functions, types and effects'\n            defaultCollapseIcon={<ChevronDownIcon color='unison.purple' />}\n            defaultExpandIcon={<ChevronRightIcon color='unison.purple' />}\n            onNodeFocus={(e, v) => {\n              const draggable: any = document.querySelector(\n                `[data-rbd-draggable-id=\"${v}\"]`,\n              )\n\n              if (draggable) {\n                const focused = document.querySelectorAll('.Mui-focused')\n                focused.forEach(e => {\n                  e.classList.remove('Mui-focused')\n                })\n                const div =\n                  draggable.parentElement?.parentElement?.parentElement\n                const li = div?.parentElement\n                const parentMenu =\n                  li?.parentElement?.parentElement?.parentElement?.parentElement\n                const previous = li?.previousElementSibling\n                const next = li?.nextElementSibling\n\n                if (!draggable.bound) {\n                  draggable.bound = true\n                  MouseTrap(draggable).bind('left', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    div?.classList.remove('Mui-focused')\n                    parentMenu?.focus()\n                  })\n                  MouseTrap(draggable).bind('down', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (next) {\n                      next.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.nextElementSibling?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                  MouseTrap(draggable).bind('up', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (previous) {\n                      previous.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                }\n\n                div?.classList.add('Mui-focused')\n                draggable.focus()\n              }\n            }}\n          >\n            {items &&\n              items.map(item => {\n                const label = (\n                  <Text fontSize='lg' color={'unison.purple'}>\n                    {item.label}\n                  </Text>\n                )\n                return (\n                  <TreeItem\n                    nodeId={item.nodeId}\n                    key={item.nodeId}\n                    label={\n                      <HStack>\n                        {item.nodeId === 'functions' ? (\n                          <Text fontWeight='bold' fontSize='xl' color={purple}>\n                            λ\n                          </Text>\n                        ) : item.nodeId === 'types' ? (\n                          <FaShapes color={purple} />\n                        ) : item.nodeId === 'effects' ? (\n                          <GiMineExplosion color={purple} />\n                        ) : null}\n                        {label}\n                      </HStack>\n                    }\n                  >\n                    {(() => {\n                      switch (item.nodeId) {\n                        case 'functions':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.name}`\n                            return (\n                              <FunctionTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'types':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.type}`\n                            return (\n                              <TypeTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'effects':\n                          return null //@TODO\n                        default:\n                          let _: never = item\n                      }\n                    })()}\n                  </TreeItem>\n                )\n              })}\n          </TreeView>\n        </Box>\n      )\n    },\n  ),\n)\n\nexport default Sidebar\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx",["115"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx",["116","117"],"import * as React from 'react'\nimport { Code, CodeProps, TextProps, useTheme } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\n\nconst TypeBadge = ({\n  typeAsString,\n  // fontSize,\n  as,\n  children,\n}: {\n  typeAsString: Itype['type']\n  // fontSize?: CodeProps['fontSize']\n  as?: CodeProps['as']\n  children?: any\n  // rest?: CodeProps\n}) => {\n  // const {\n  //   colors: {\n  //     unison: { orange, yellow },\n  //   },\n  // } = useTheme()\n\n  return (\n    <Code\n      as={as}\n      // fontSize={fontSize}\n      // paddingX={1}\n      // paddingY={0.5}\n      sx={\n        {\n          string: { color: 'unison.darkOrange', backgroundColor: 'yellow.100' },\n          number: {\n            color: 'unison.darkGreen',\n            backgroundColor: 'green.100',\n          },\n          boolean: { color: 'unison.pink', backgroundColor: 'pink.100' },\n          function: { color: 'unison.purple', backgroundColor: 'purple.100' },\n          object: { color: 'black', backgroundColor: 'gray.100' },\n          array: { color: 'black', backgroundColor: 'gray.100' },\n          undefined: { color: 'black', backgroundColor: 'gray.100' },\n          null: { color: 'black', backgroundColor: 'gray.100' },\n        }[typeAsString]\n      }\n      rounded={'base'}\n    >\n      {children ?? typeAsString}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx",["118","119","120","121","122","123","124","125","126","127"],"import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport { Ifunction, Itype } from './interfaces'\nimport {\n  Box,\n  Flex,\n  Center,\n  Spacer,\n  Code,\n  HStack,\n  VStack,\n  forwardRef,\n  Divider,\n  Button,\n  Input,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Checkbox,\n  Text,\n  Heading,\n  Grid,\n  GridItem,\n} from '@chakra-ui/react'\nimport {\n  ArrowDownIcon,\n  ArrowForwardIcon,\n  DeleteIcon,\n  PlusSquareIcon,\n} from '@chakra-ui/icons'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport PopoverExplanation from './PopoverExplanation'\nimport './flowCardStyles.css'\nimport { Fade } from '@material-ui/core'\n// import produce from 'immer'\n// import EditableText from './EditableText'\n\nconst TypeAndValue = React.memo(\n  ({\n    type,\n    value,\n    onChange,\n    direction,\n  }: {\n    type: Itype['type']\n    value: any\n    onChange?: (v: string | number | boolean) => void\n    direction: 'row' | 'column'\n  }) => {\n    return (\n      <Flex direction={direction} justifyContent='center' alignItems='center'>\n        <TypeBadge typeAsString={type} />\n        {(() => {\n          if (!onChange) {\n            return (\n              <Code>\n                {type === 'boolean' ? (value ? 'true' : 'false') : value}\n              </Code>\n            )\n          }\n          switch (type) {\n            case 'string':\n              return (\n                <Input\n                  size='sm'\n                  value={value}\n                  variant='outline'\n                  backgroundColor='white'\n                  focusBorderColor={'unison.aqua'}\n                  rounded='base'\n                  onChange={e => {\n                    onChange(e.target.value)\n                  }}\n                ></Input>\n              )\n            case 'number':\n              return (\n                <NumberInput\n                  size='sm'\n                  value={value}\n                  variant='outline'\n                  backgroundColor='white'\n                  focusBorderColor={'unison.aqua'}\n                  rounded='base'\n                  onChange={(s, n) => {\n                    if (isNaN(Number(n))) {\n                      return\n                    }\n                    onChange(n)\n                  }}\n                  allowMouseWheel\n                >\n                  <NumberInputField />\n                  {/* <NumberInputStepper> */}\n                  {/* <NumberIncrementStepper /> */}\n                  {/* <NumberDecrementStepper /> */}\n                  {/* </NumberInputStepper> */}\n                </NumberInput>\n              )\n            case 'boolean':\n              console.log({ type, value })\n              return (\n                <Checkbox\n                  isChecked={value}\n                  onChange={e => {\n                    onChange(e.target.checked)\n                  }}\n                >\n                  {value ? 'true' : 'false'}\n                </Checkbox>\n              )\n            default:\n              return null\n          }\n        })()}\n      </Flex>\n    )\n  },\n)\n\nconst getParamValues = (\n  items: IfunctionWithId[],\n  v: string | number | boolean,\n  paramIndex: number | 'last',\n) => {\n  let previousReturn = null\n  let newItems: IfunctionWithId[] = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n    const parameters = [...item.parameters]\n    if (i === 0) {\n      //donde se ha producido el cambio\n      const param =\n        paramIndex === 'last'\n          ? parameters[parameters.length - 1]\n          : parameters[paramIndex]\n      param.value = v\n    }\n    const previouslastParam: Itype | undefined =\n      parameters[parameters.length - 1]\n\n    if (previouslastParam) {\n      parameters[parameters.length - 1] = {\n        ...previouslastParam,\n        value:\n          previousReturn === null ? previouslastParam?.value : previousReturn,\n      }\n    }\n\n    //TODO typecheck\n\n    console.log({ parameters })\n    let returnValue\n    try {\n      returnValue = item.fn(...parameters.map(p => p.value))\n    } catch (error) {\n      console.log({ error })\n      break\n    }\n    console.log('break')\n\n    newItems.push({\n      ...item,\n      parameters,\n      returns: { ...item.returns, value: returnValue },\n    })\n\n    previousReturn = returnValue\n  }\n\n  return newItems\n}\n\nfunction sliceInTwo<A>(i: number, as: A[]) {\n  return [as.slice(0, i), as.slice(i)]\n}\n\nconst C_TypeAndValue = React.memo(\n  ({\n    fnId,\n    direction,\n    paramIndex,\n    noInput = false,\n  }: {\n    fnId: string\n    direction: 'row' | 'column'\n    paramIndex: number | 'last' | 'return'\n    noInput?: boolean\n  }) => {\n    const { fns, setFns } = React.useContext(ParameterContext)\n    const { parameters, returns, id } = fns.find(({ id }) => id === fnId)!\n    const param =\n      paramIndex === 'return'\n        ? returns\n        : paramIndex === 'last'\n        ? parameters[parameters.length - 1]\n        : parameters[paramIndex]\n\n    const onChange =\n      noInput || paramIndex === 'return'\n        ? undefined\n        : (v: string | number | boolean) => {\n            const [previousFns, affectedFns] = sliceInTwo(\n              fns.findIndex(({ id }) => id === fnId),\n              fns,\n            )\n            const newValues = getParamValues(affectedFns, v, paramIndex)\n            console.log({ previousFns, affectedFns, newValues })\n            setFns(previousFns.concat(newValues))\n          }\n\n    return (\n      <TypeAndValue\n        type={param.type}\n        value={param.value}\n        onChange={onChange}\n        direction={direction}\n      />\n    )\n  },\n)\n\nexport const FlowFunctionView = React.memo(\n  forwardRef(\n    (\n      {\n        item,\n        // style,\n        // onChangeParam,\n        isFirstFunctionInFlow,\n        ...rest\n      }: {\n        item: Ifunction & { id: string }\n        // style?: React.CSSProperties\n        isFirstFunctionInFlow: boolean\n        // onChangeParam: (_: {\n        //   paramValue: string | number | boolean\n        //   paramIndex: number\n        // }) => void\n      },\n      ref,\n    ) => {\n      const hasZeroParams = item.parameters.length === 0\n      const hasOneParam = item.parameters.length === 1\n      return (\n        <Grid\n          {...rest}\n          ref={ref}\n          backgroundColor='gray.200' //TODO\n          rounded='md'\n          marginBottom={1}\n          padding={1}\n          templateColumns='auto 25%'\n          width='100%'\n          gap={1}\n        >\n          <GridItem\n            width='100%'\n            display='flex'\n            flexDirection='row'\n            alignItems='center'\n          >\n            <Code justifySelf='flex-start' backgroundColor='transparent'>\n              {item.name}\n            </Code>\n\n            {hasZeroParams || hasOneParam\n              ? null\n              : item.parameters\n                  .slice(0, item.parameters.length - 1)\n                  .map((param, i) => {\n                    const css =\n                      i === item.parameters.length - 2\n                        ? { transform: 'rotate(-45deg)' }\n                        : null\n                    return (\n                      <HStack\n                        justifySelf='flex-end'\n                        width='100%'\n                        display='flex'\n                        alignItems='center'\n                        justifyContent='flex-end'\n                        key={i}\n                      >\n                        <C_TypeAndValue\n                          fnId={item.id}\n                          paramIndex={i}\n                          direction='column'\n                        />{' '}\n                        <ArrowForwardIcon css={css} />\n                      </HStack>\n                    )\n                  })}\n          </GridItem>\n          <GridItem width='100%'>\n            <VStack>\n              {hasZeroParams ? (\n                <Code>()</Code>\n              ) : (\n                <C_TypeAndValue\n                  fnId={item.id}\n                  paramIndex='last'\n                  direction='column'\n                  noInput={!isFirstFunctionInFlow}\n                />\n              )}\n              <ArrowDownIcon></ArrowDownIcon>\n              <C_TypeAndValue\n                fnId={item.id}\n                noInput\n                paramIndex='return'\n                direction='column'\n              />\n            </VStack>\n          </GridItem>\n        </Grid>\n      )\n    },\n  ),\n)\n\nconst getFnsValuesFromItems = (\n  items: Array<IfunctionWithId>,\n  previousItems: Array<IfunctionWithId> = [],\n) => {\n  let previousReturn = null\n  let newItems: IfunctionWithId[] = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = previousItems.find(pi => pi.id === items[i].id) ?? items[i]\n    const parameters = [...item.parameters]\n    const previouslastParam: Itype | undefined =\n      parameters[parameters.length - 1]\n    if (previouslastParam) {\n      parameters[parameters.length - 1] = {\n        ...previouslastParam,\n        value:\n          previousReturn === null ? previouslastParam?.value : previousReturn,\n      }\n    }\n\n    //TODO typecheck, show error\n    console.log({ parameters })\n    let returnValue\n    let error\n    try {\n      returnValue = item.fn(...parameters.map(p => p.value))\n    } catch (err) {\n      error = err\n      console.log({ error })\n    }\n\n    console.log('break')\n\n    //TODO only push if no error\n    newItems.push({\n      ...item,\n      parameters,\n      returns: { ...item.returns, value: returnValue },\n    })\n\n    previousReturn = returnValue\n  }\n\n  return newItems\n}\n\nconst ParameterContext = React.createContext<{\n  fns: Array<IfunctionWithId>\n  setFns: React.Dispatch<React.SetStateAction<IfunctionWithId[]>>\n}>({ fns: [], setFns() {} })\n\ntype IfunctionWithId = Ifunction & { id: string }\n\nconst FlowFunctionsList = React.memo(\n  ({ items }: { items: Array<IfunctionWithId> }) => {\n    const [fns, setFns] = React.useState(getFnsValuesFromItems(items))\n    const [previousItems, setPreviousItems] = React.useState(items)\n    if (previousItems !== items) {\n      setPreviousItems(items)\n      setFns(previousValues => getFnsValuesFromItems(items, previousValues))\n    }\n\n    //Recoil?\n    //items deberia venir sin parameter values - se calculan en el setState o en el render? en el setState\n    // que pasa cuando viene una fn nueva?\n    // can FlowFunctionView never reupdate after initial render? not rerender if isFiFIFlow changes\n\n    return (\n      <ParameterContext.Provider value={{ fns, setFns }}>\n        {items.map((item, i) => {\n          return (\n            <Draggable key={item.id} draggableId={item.id} index={i}>\n              {(provided, snapshot) => {\n                return (\n                  <Fade in={true}>\n                    <FlowFunctionView\n                      isFirstFunctionInFlow={i === 0}\n                      item={item}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      // style={provided.draggableProps.style}\n                    />\n                  </Fade>\n                )\n              }}\n            </Draggable>\n          )\n        })}\n      </ParameterContext.Provider>\n    )\n  },\n)\n\nconst FlowCard = React.memo(\n  ({\n    items,\n    name,\n    dispatch,\n  }: {\n    items: Array<Ifunction & { id: string }>\n    name: string\n    dispatch: React.Dispatch<Action>\n  }) => {\n    return (\n      <Box\n        boxShadow={'base'}\n        padding={1}\n        minWidth={'50%'}\n        minHeight='100vh'\n        height='100%'\n        position='relative'\n        backgroundColor='white'\n        display='flex'\n        flexDirection='column'\n      >\n        <Flex paddingLeft={2} alignItems='center'>\n          <Heading fontSize='xl' fontStyle='italic' color='unison.purple'>\n            Flow\n          </Heading>\n          <Spacer></Spacer>\n\n          <Fade in={items.length > 0}>\n            <Button\n              color='unison.darkPink'\n              sx={{ '&:hover': { backgroundColor: 'red.50' } }}\n              variant='ghost'\n              leftIcon={<DeleteIcon />}\n              onClick={() => {\n                dispatch({ type: 'clearFlowCard' })\n              }}\n            >\n              Clear\n            </Button>\n          </Fade>\n\n          <PopoverExplanation label='Flow card explanation' title='Flow card'>\n            Flow is a special view for the flow function (left-to-right variadic\n            compose). This is a stab at a \"functional Scratch\" to visually\n            explore function composition. Last argument and return type line up\n            vertically to reinforce the pipeline metaphor. JavaScript is\n            executed and shown on the right.\n          </PopoverExplanation>\n        </Flex>\n        <Divider marginTop={2}></Divider>\n        <Droppable droppableId='FlowCard'>\n          {(provided, snapshot) => {\n            return (\n              <Box\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                // minWidth={'50%'}\n                flex={1}\n                minHeight='100%'\n                height='100%'\n                overflow='auto'\n                paddingX={2}\n                paddingY={4}\n              >\n                <FlowFunctionsList items={items}></FlowFunctionsList>\n                {provided.placeholder}\n              </Box>\n            )\n          }}\n        </Droppable>\n      </Box>\n    )\n  },\n)\n\nexport default FlowCard\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts",["128","129"],"import produce from 'immer'\nimport * as React from 'react'\nimport { v4 as uuid } from 'uuid'\nimport { Ifunction, Ieffect, Itype } from './components/interfaces'\nimport DocsCard from './components/DocsCard'\n\ntype Reducer<A, B> = (a: A, b: B) => A\n\n/* See https://github.com/jefflombard/use-reducer-logger */\nconst getCurrentTimeFormatted = () => {\n  const currentTime = new Date()\n  const hours = currentTime.getHours()\n  const minutes = currentTime.getMinutes()\n  const seconds = currentTime.getSeconds()\n  const milliseconds = currentTime.getMilliseconds()\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`\n}\nconst useLoggerReducer = <A, B extends { type: string | number }>(\n  reducer: Reducer<A, B>,\n  initialState: A,\n) => {\n  const reducerWithLogger = React.useCallback(\n    (state: A, action: B): A => {\n      const next = reducer(state, action)\n      console.group(\n        `%cAction: %c${action.type} %cat ${getCurrentTimeFormatted()}`,\n        'color: lightgreen; font-weight: bold;',\n        'color: white; font-weight: bold;',\n        'color: lightblue; font-weight: lighter;',\n      )\n      console.log(\n        '%cPrevious State:',\n        'color: #9E9E9E; font-weight: 700;',\n        state,\n      )\n      console.log('%cAction:', 'color: #00A7F7; font-weight: 700;', action)\n      console.log('%cNext State:', 'color: #47B04B; font-weight: 700;', next)\n      console.groupEnd()\n      return next\n    },\n    [reducer],\n  )\n\n  return React.useReducer(reducerWithLogger, initialState)\n}\n\nconst initialFunctions: Array<Ifunction> = [\n  {\n    name: 'length',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'number' },\n    fn: function length(s: any) {\n      return s.length\n    },\n    description: 'Takes a string and returns how many characters it has',\n  },\n  {\n    name: 'upperCase',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'string' },\n    fn: function (s: any) {\n      return s.toUpperCase()\n    },\n    description:\n      'Takes a string and returns is with all characters in uppercase',\n  },\n  {\n    name: 'add',\n    parameters: [{ type: 'number' }, { type: 'number' }],\n    returns: { type: 'number' },\n    fn: function add(x: any, y: any) {\n      return x + y\n    },\n    description: 'Adds two numbers together',\n  },\n  // {\n  //   name: 'map',\n  //   parameters: [\n  //     { type: 'function', parameterName: 'f' },\n  //     { type: 'array', of: { typeParam: 'A' }, parameterName: 'as' },\n  //   ],\n  //   returns: { type: 'array', of: { typeParam: 'B' } },\n  //   code: 'function map(f,as){return as.map(f)}',\n  //   description: 'Applies a function to each element of an array',\n  // },\n  {\n    name: 'id',\n    parameters: [{ type: 'string' }],\n    returns: { type: 'string' },\n    fn: function id(s: any) {\n      return s\n    },\n    description: 'monomorphic id for string',\n  },\n  {\n    name: 'greaterThan',\n    parameters: [{ type: 'number' }, { type: 'number' }],\n    returns: { type: 'boolean' },\n    fn: function greaterThan(n: number, m: number) {\n      return m > n\n    },\n    description: 'Number is greater than another',\n  },\n]\nconst initialDataTypes: Array<Itype> = [\n  { type: 'string' },\n  { type: 'number' },\n  { type: 'boolean' },\n]\nconst initialEffects: Array<Ieffect> = []\n\nexport type Action =\n  | { type: 'isDragging' }\n  | { type: 'createFunction'; function: Ifunction; index: number }\n  | { type: 'dropOutside' }\n  | { type: 'dropFnFromSideBarOnFlowCard'; index: number; draggableId: string }\n  | {\n      type: 'dropFnFromFlowCardToFlowCard'\n      sourceIndex: number\n      destinationIndex: number\n    }\n  | { type: 'clearFlowCard' }\n  | { type: 'sideBarSearch'; value: string }\n  | { type: 'dropFnFromSideBarToDocsCard'; draggableId: string }\n  | { type: 'openDocs'; fnName: string }\n  | { type: 'closeDocsCard'; index: number }\n  | { type: 'clearDocsCard'; index: number }\n  | { type: 'newDocsCard' }\n// | {\n//     type: 'changeFunctionParamValue'\n//     paramValue: string | number | boolean\n//     paramIndex: number\n//     functionId: string\n//   }\n\ntype DocsType = { type: 'creating' } | { type: 'editing'; fnName: string }\n\ntype State = {\n  functions: Ifunction[]\n  dataTypes: Itype[]\n  effects: Ieffect[]\n  isSideBarItemDragging: boolean\n  flowCardFunctions: Array<Ifunction & { id: string }>\n  docCards: Array<DocsType>\n  searchValue: string\n}\n\nconst initialState: State = {\n  functions: initialFunctions,\n  dataTypes: initialDataTypes,\n  effects: initialEffects,\n  isSideBarItemDragging: false,\n  flowCardFunctions: [],\n  docCards: [{ type: 'creating' }],\n  searchValue: '',\n}\n\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\n  const listCopy = [...list]\n  const [removed] = listCopy.splice(startIndex, 1)\n  listCopy.splice(endIndex, 0, removed)\n  return listCopy\n}\nconst insert = <A>(list: Array<A>, index: number, item: A) => {\n  const listCopy = [...list]\n  listCopy.splice(index, 0, item)\n  return listCopy\n}\n\nconst changeAtIndex = <A>(list: Array<A>, index: number, item: A) => {\n  const listCopy = [...list]\n  listCopy.splice(index, 1, item)\n  return listCopy\n}\n\nconst getDefaultValue = (p: Itype) => {\n  return p.type === 'string'\n    ? ''\n    : p.type === 'number'\n    ? 0\n    : p.type === 'boolean'\n    ? false\n    : p.type === 'object'\n    ? ''\n    : p.type === 'undefined'\n    ? undefined\n    : p.type === 'null'\n    ? undefined\n    : ''\n}\nconst findFunction = ({\n  state,\n  name,\n  id,\n}: {\n  state: State\n  name: string\n  id: string\n}) => {\n  const fn = state.functions.find(f => f.name === name) as Ifunction\n  const parameters = fn.parameters.map(p => {\n    const value = getDefaultValue(p)\n    return {\n      ...p,\n      value,\n    }\n  })\n  const returns = { ...fn.returns, value: getDefaultValue(fn.returns) }\n  return { ...fn, parameters, returns, id }\n}\n\n// return {\n//   ...state,\n//   isSideBarItemDragging: false,\n//   flowCardFunctions: insert(state.flowCardFunctions, action.index, {\n//     name: action.draggableId.split('_')[1],\n//     id: uuid(),\n//   }),\n// }\n\n// export const fnSelector = (state: State) => ({\n//   name,\n//   id,\n// }: {\n//   name: string\n//   id: string\n// }) => {\n//   const fn = state.functions.find(f => f.name === name) as Ifunction\n//   return { ...fn, id }\n// }\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'isDragging':\n      return { ...state, isSideBarItemDragging: true }\n    case 'createFunction':\n      const fnIndex = state.functions.findIndex(\n        f => f.name === action.function.name,\n      )\n      return fnIndex === -1\n        ? {\n            ...state,\n            functions: state.functions.concat(action.function),\n            docCards: changeAtIndex(state.docCards, action.index, {\n              type: 'editing',\n              fnName: action.function.name,\n            }),\n          }\n        : {\n            ...state,\n            functions: changeAtIndex(state.functions, fnIndex, action.function),\n          }\n    case 'dropOutside':\n      return { ...state, isSideBarItemDragging: false }\n    case 'dropFnFromSideBarOnFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: insert(\n          state.flowCardFunctions,\n          action.index,\n          findFunction({\n            state,\n            name: action.draggableId.split('_')[1],\n            id: uuid(),\n          }),\n        ),\n      }\n    case 'dropFnFromFlowCardToFlowCard':\n      return {\n        ...state,\n        isSideBarItemDragging: false,\n        flowCardFunctions: reorder(\n          state.flowCardFunctions,\n          action.sourceIndex,\n          action.destinationIndex,\n        ),\n      }\n    case 'clearFlowCard':\n      return {\n        ...state,\n        flowCardFunctions: [],\n      }\n    case 'sideBarSearch':\n      return {\n        ...state,\n        searchValue: action.value,\n      }\n    case 'dropFnFromSideBarToDocsCard':\n      return {\n        ...state,\n        docCards: [\n          { type: 'editing', fnName: action.draggableId.split('_')[1] },\n        ],\n      }\n    case 'openDocs':\n      const fn = state.functions.find(f => f.name === action.fnName)\n      if (!fn) {\n        return state\n      }\n      return {\n        ...state,\n        docCards: [{ type: 'editing', fnName: action.fnName }],\n      }\n    // const fn = state.functions.find(f => f.name === action.fnName)\n    // const alreadyInDocCards = state.docCards.find(d =>\n    //   'fnName' in d ? d.fnName === action.fnName : false,\n    // )\n\n    // if (!fn || alreadyInDocCards) {\n    //   return state\n    // }\n    // return {\n    //   ...state,\n    //   docCards: [\n    //     ...state.docCards,\n    //     { type: 'editing', fnName: action.fnName },\n    //   ],\n    // }\n    case 'closeDocsCard':\n      return {\n        ...state,\n        docCards: state.docCards.filter((_, i) => i !== action.index),\n      }\n    case 'clearDocsCard':\n      return {\n        ...state,\n        docCards: changeAtIndex(state.docCards, action.index, {\n          type: 'creating',\n        }),\n      }\n    case 'newDocsCard':\n      return {\n        ...state,\n        docCards: [{ type: 'creating' }],\n      }\n  }\n}\n\nexport const useAppReducer =\n  process.env.NODE_ENV === 'development'\n    ? () => useLoggerReducer(reducer, initialState)\n    : () => React.useReducer(reducer, initialState)\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx",["130"],"import { QuestionIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport {\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverHeader,\n  PopoverBodyProps,\n  Tooltip,\n} from '@chakra-ui/react'\nimport React from 'react'\n\nconst PopoverExplanation = (props: {\n  children: PopoverBodyProps['children']\n  label: string\n  title: string\n}) => {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <IconButton\n          aria-label={props.label}\n          icon={\n            <Tooltip label={props.label} aria-label={props.label} hasArrow>\n              {/* <QuestionOutlineIcon /> */}\n              <QuestionIcon />\n            </Tooltip>\n          }\n          size='lg'\n          colorScheme='purple'\n          color='unison.purple'\n          variant='ghost'\n          sx={{\n            '&:hover': {\n              color: 'unison.aqua',\n            },\n          }}\n        />\n      </PopoverTrigger>\n\n      {/* <PopoverContent borderColor='unison.purple'> */}\n      <PopoverContent>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader>{props.title}</PopoverHeader>\n        <PopoverBody>{props.children}</PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport default PopoverExplanation\n",["131","132"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx",["133","134","135","136"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/utils.js",[],["137","138"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/index.js",["139","140","141","142","143"],"import { Entity, Modifier, Editor, EditorState } from 'draft-js'\nimport * as React from 'react'\nimport { AutocompleteEditor } from './autocomplete'\nimport SuggestionList from './suggestions'\nimport styles from './styles'\nimport { normalizeIndex, filterArray } from './utils'\nimport * as triggers from './triggers'\nimport * as data from './data'\nimport addSuggestion from './addsuggestion'\n\nvar filteredArrayTemp\n\nexport default class AutocompleteInput extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      editorState: EditorState.createEmpty(),\n      autocompleteState: null,\n    }\n\n    this.onChange = editorState =>\n      this.setState({\n        editorState,\n      })\n\n    this.onAutocompleteChange = autocompleteState =>\n      this.setState({\n        autocompleteState,\n      })\n\n    this.onInsert = insertState => {\n      if (!filteredArrayTemp) {\n        return null\n      }\n      const index = normalizeIndex(\n        insertState.selectedIndex,\n        filteredArrayTemp.length,\n      )\n      insertState.text = insertState.trigger + filteredArrayTemp[index]\n      return addSuggestion(insertState)\n    }\n  }\n\n  renderAutocomplete() {\n    //left, top, array, selectedIndex, type, text\n    const { autocompleteState, onSuggestionClick } = this.state\n    if (!autocompleteState) {\n      return null\n    }\n    filteredArrayTemp = this.getFilteredArray(\n      autocompleteState.type,\n      autocompleteState.text,\n    )\n    autocompleteState.array = filteredArrayTemp\n    // autocompleteState.onSuggestionClick = this.onSuggestionItemClick\n    return <SuggestionList suggestionsState={autocompleteState} />\n  }\n\n  getFilteredArray(type, text) {\n    const dataArray = type == triggers.PERSON ? data.persons : data.tags\n    const filteredArray = filterArray(\n      dataArray,\n      text.replace(triggers.regExByType(type), ''),\n    )\n    return filteredArray\n  }\n\n  render() {\n    return (\n      <div style={styles.root}>\n        {' '}\n        {this.renderAutocomplete()}{' '}\n        <div style={styles.editor}>\n          <AutocompleteEditor\n            editorState={this.state.editorState}\n            onChange={this.onChange}\n            onAutocompleteChange={this.onAutocompleteChange}\n            onInsert={this.onInsert}\n          />{' '}\n        </div>{' '}\n      </div>\n    )\n  }\n}\n\n// render( < AutocompleteInput / > ,\n//   document.getElementById('app')\n// );\n",["144","145"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/autocomplete.js",["146","147","148","149","150","151","152","153","154","155","156","157"],"import { render } from 'react-dom'\nimport React from 'react'\nimport { Editor, EditorState } from 'draft-js'\nimport styles from './styles'\nimport * as triggers from './triggers'\n\nexport class AutocompleteEditor extends Editor {\n  constructor(props) {\n    super(props)\n    this.autocompleteState = null\n\n    this.onChange = editorState => {\n      const { onChange, onAutocompleteChange } = this.props\n      onChange(editorState)\n      if (onAutocompleteChange) {\n        window.requestAnimationFrame(() => {\n          onAutocompleteChange(this.getAutocompleteState())\n        })\n      }\n    }\n\n    this.onArrow = (e, originalHandler, nudgeAmount) => {\n      const { onAutocompleteChange } = this.props\n      let autocompleteState = this.getAutocompleteState(false)\n      if (!autocompleteState) {\n        if (originalHandler) {\n          originalHandler(e)\n        }\n        return\n      }\n\n      e.preventDefault()\n      autocompleteState.selectedIndex += nudgeAmount\n      this.autocompleteState = autocompleteState\n      if (onAutocompleteChange) {\n        onAutocompleteChange(autocompleteState)\n      }\n    }\n\n    this.onUpArrow = e => {\n      this.onArrow(e, this.props.onUpArrow, -1)\n      const contentState = this.props.editorState.getCurrentContent()\n    }\n\n    this.onDownArrow = e => {\n      this.onArrow(e, this.props.onDownArrow, 1)\n    }\n\n    this.onEscape = e => {\n      const { onEscape, onAutocompleteChange } = this.props\n\n      if (!this.getAutocompleteState(false)) {\n        if (onEscape) {\n          onEscape(e)\n        }\n        return\n      }\n\n      e.preventDefault()\n      this.autocompleteState = null\n\n      if (onAutocompleteChange) {\n        onAutocompleteChange(null)\n      }\n    }\n\n    this.onTab = e => {\n      this.commitSelection(e)\n    }\n\n    this.handleReturn = e => {\n      return this.commitSelection(e)\n    }\n  }\n\n  commitSelection(e) {\n    const { onAutocompleteChange } = this.props\n    let autocompleteState = this.getAutocompleteState(false)\n    if (!autocompleteState) {\n      return false\n    }\n    e.preventDefault()\n    this.onMentionSelect()\n    this.autocompleteState = null\n\n    if (onAutocompleteChange) {\n      onAutocompleteChange(null)\n    }\n    return true\n  }\n\n  onMentionSelect() {\n    let autocompleteState = this.getAutocompleteState(false)\n    const { editorState } = this.props\n    const insertState = this.getInsertState(\n      autocompleteState.selectedIndex,\n      autocompleteState.trigger,\n    )\n    const { onInsert } = this.props\n    const newEditorState = onInsert(insertState)\n    const { onChange } = this.props\n    onChange(newEditorState)\n  }\n\n  getInsertState(selectedIndex, trigger) {\n    const { editorState } = this.props\n    const currentSelectionState = editorState.getSelection()\n    const end = currentSelectionState.getAnchorOffset()\n    const anchorKey = currentSelectionState.getAnchorKey()\n    const currentContent = editorState.getCurrentContent()\n    const currentBlock = currentContent.getBlockForKey(anchorKey)\n    const blockText = currentBlock.getText()\n    const start = blockText.substring(0, end).lastIndexOf(trigger)\n    return {\n      editorState,\n      start,\n      end,\n      trigger,\n      selectedIndex,\n    }\n  }\n\n  hasEntityAtSelection() {\n    const { editorState } = this.props\n\n    const selection = editorState.getSelection()\n    if (!selection.getHasFocus()) {\n      return false\n    }\n\n    const contentState = editorState.getCurrentContent()\n    const block = contentState.getBlockForKey(selection.getStartKey())\n    return !!block.getEntityAt(selection.getStartOffset() - 1)\n  }\n\n  getAutocompleteRange(trigger) {\n    const selection = window.getSelection()\n    if (selection.rangeCount === 0) {\n      return null\n    }\n\n    if (this.hasEntityAtSelection()) {\n      return null\n    }\n\n    const range = selection.getRangeAt(0)\n    let text = range.startContainer.textContent\n    text = text.substring(0, range.startOffset)\n    const index = text.lastIndexOf(trigger)\n    if (index === -1) {\n      return null\n    }\n    text = text.substring(index)\n    return {\n      text,\n      start: index,\n      end: range.startOffset,\n    }\n  }\n\n  getAutocompleteState(invalidate = true) {\n    if (!invalidate) {\n      return this.autocompleteState\n    }\n\n    const tagRange = this.getAutocompleteRange(triggers.TAG_TRIGGER)\n    const personRange = this.getAutocompleteRange(triggers.PERSON_TRIGGER)\n    if (!tagRange && !personRange) {\n      this.autocompleteState = null\n      return null\n    }\n    var type = null\n    var trigger = null\n    var range = null\n    if (!tagRange) {\n      range = personRange\n      type = triggers.PERSON\n      trigger = triggers.PERSON_TRIGGER\n    }\n\n    if (!personRange) {\n      range = tagRange\n      type = triggers.TAG\n      trigger = triggers.TAG_TRIGGER\n    }\n\n    if (!range) {\n      range = tagRange.start > personRange.start ? tagRange : personRange\n      type = tagRange.start > personRange.start ? triggers.TAG : triggers.PERSON\n      trigger =\n        tagRange.start > personRange.start\n          ? triggers.TAG_TRIGGER\n          : triggers.PERSON_TRIGGER\n    }\n\n    const tempRange = window.getSelection().getRangeAt(0).cloneRange()\n    tempRange.setStart(tempRange.startContainer, range.start)\n\n    const rangeRect = tempRange.getBoundingClientRect()\n    let [left, top] = [rangeRect.left, rangeRect.bottom]\n\n    this.autocompleteState = {\n      trigger,\n      type,\n      left,\n      top,\n      text: range.text,\n      selectedIndex: 0,\n    }\n    console.log(this.autocompleteState)\n    return this.autocompleteState\n  }\n\n  ///\n\n  getAutocompleteState(invalidate = true) {\n    if (!invalidate) {\n      return this.autocompleteState\n    }\n    var type = null\n    var trigger = null\n    //Get range for latest hash tag trigger symbol.\n    const tagRange = this.getAutocompleteRange(triggers.TAG_TRIGGER)\n    //Get range for latest mention tag trigger symbol.\n    const personRange = this.getAutocompleteRange(triggers.PERSON_TRIGGER)\n    //Find what trigger is latest.\n    if (!tagRange && !personRange) {\n      this.autocompleteState = null\n      return null\n    }\n    var range = null\n    if (!tagRange) {\n      range = personRange\n      type = triggers.PERSON\n      trigger = triggers.PERSON_TRIGGER\n    }\n    if (!personRange) {\n      range = tagRange\n      type = triggers.TAG\n      trigger = triggers.TAG_TRIGGER\n    }\n    if (!range) {\n      range = tagRange.start > personRange.start ? tagRange : personRange\n      type = tagRange.start > personRange.start ? triggers.TAG : triggers.PERSON\n      trigger =\n        tagRange.start > personRange.start\n          ? triggers.TAG_TRIGGER\n          : triggers.PERSON_TRIGGER\n    }\n    //Get left and top coordinates of range.\n    //This point will be used to draw suggestion list.\n    const tempRange = window.getSelection().getRangeAt(0).cloneRange()\n    tempRange.setStart(tempRange.startContainer, range.start)\n    const rangeRect = tempRange.getBoundingClientRect()\n    let [left, top] = [rangeRect.left, rangeRect.bottom]\n    //Create autocompleteState.\n    this.autocompleteState = {\n      trigger, //Trigger symbol. “@” or “#”\n      type, //Type of trigger. Can be TAG or PERSON.\n      left, //The left point of range.\n      top, //The top point of range.\n      text: range.text, //Current text in selected range.\n      selectedIndex: 0, //Selected index in list. 0 for new list.\n    }\n    return this.autocompleteState\n  }\n  //Get range of possible mention or hashtag.\n  getAutocompleteRange(trigger) {\n    const selection = window.getSelection()\n    if (selection.rangeCount === 0) {\n      return null\n    }\n    if (this.hasEntityAtSelection()) {\n      return null\n    }\n    const range = selection.getRangeAt(0)\n    let text = range.startContainer.textContent\n    text = text.substring(0, range.startOffset)\n    const index = text.lastIndexOf(trigger)\n    if (index === -1) {\n      return null\n    }\n    text = text.substring(index)\n    return {\n      text,\n      start: index,\n      end: range.startOffset,\n    }\n  }\n\n  hasEntityAtSelection() {\n    const { editorState } = this.props\n    const selection = editorState.getSelection()\n    //If there is no focus, return.\n    if (!selection.getHasFocus()) {\n      return false\n    }\n    const contentState = editorState.getCurrentContent()\n    const block = contentState.getBlockForKey(selection.getStartKey())\n    return !!block.getEntityAt(selection.getStartOffset() - 1)\n  }\n\n  ///\n  render() {\n    const {\n      onChange,\n      editorState,\n      onEscape,\n      onUpArrow,\n      onDownArrow,\n      onAutocompleteChange,\n    } = this.props\n\n    return (\n      <Editor\n        customStyleMap={styles}\n        editorState={editorState}\n        handleReturn={this.handleReturn}\n        onChange={this.onChange}\n        onEscape={this.onEscape}\n        onUpArrow={this.onUpArrow}\n        onDownArrow={this.onDownArrow}\n        onTab={this.onTab}\n      />\n    )\n  }\n}\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/triggers.js",["158","159"],"export const TAG = 1;\nexport const PERSON = 2;\nexport const RELATIONS = 3;\nexport const TAG_TRIGGER = '#';\nexport const PERSON_TRIGGER = '@';\nexport const RELATIONS_TRIGGER = '<';\n\n\nexport const TAG_REG_EX = /^#/;\nexport const PERSON_REG_EX = /^@/;\n\n\nexport const triggerByType = (type) => {\n  return type == TAG ? TAG_TRIGGER : PERSON_TRIGGER;\n};\n\nexport const regExByType = (type) => {\n  return type == TAG ? TAG_REG_EX : PERSON_REG_EX;\n};","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/data.js",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/autocomplete-react-draft/src/styles.js",[],{"ruleId":"160","severity":1,"message":"161","line":3,"column":27,"nodeType":"162","messageId":"163","endLine":3,"endColumn":38},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"164","replacedBy":"170"},{"ruleId":"166","replacedBy":"171"},{"ruleId":"160","severity":1,"message":"172","line":17,"column":3,"nodeType":"162","messageId":"163","endLine":17,"endColumn":20},{"ruleId":"160","severity":1,"message":"173","line":18,"column":3,"nodeType":"162","messageId":"163","endLine":18,"endColumn":18},{"ruleId":"160","severity":1,"message":"174","line":422,"column":31,"nodeType":"162","messageId":"163","endLine":422,"endColumn":39},{"ruleId":"160","severity":1,"message":"175","line":8,"column":3,"nodeType":"162","messageId":"163","endLine":8,"endColumn":11},{"ruleId":"160","severity":1,"message":"176","line":2,"column":27,"nodeType":"162","messageId":"163","endLine":2,"endColumn":36},{"ruleId":"160","severity":1,"message":"175","line":2,"column":38,"nodeType":"162","messageId":"163","endLine":2,"endColumn":46},{"ruleId":"160","severity":1,"message":"177","line":7,"column":3,"nodeType":"162","messageId":"163","endLine":7,"endColumn":9},{"ruleId":"160","severity":1,"message":"178","line":18,"column":3,"nodeType":"162","messageId":"163","endLine":18,"endColumn":21},{"ruleId":"160","severity":1,"message":"179","line":19,"column":3,"nodeType":"162","messageId":"163","endLine":19,"endColumn":25},{"ruleId":"160","severity":1,"message":"180","line":20,"column":3,"nodeType":"162","messageId":"163","endLine":20,"endColumn":25},{"ruleId":"160","severity":1,"message":"181","line":22,"column":3,"nodeType":"162","messageId":"163","endLine":22,"endColumn":7},{"ruleId":"160","severity":1,"message":"182","line":31,"column":3,"nodeType":"162","messageId":"163","endLine":31,"endColumn":17},{"ruleId":"160","severity":1,"message":"183","line":195,"column":34,"nodeType":"162","messageId":"163","endLine":195,"endColumn":36},{"ruleId":"184","severity":1,"message":"185","line":289,"column":25,"nodeType":"186","endLine":293,"endColumn":27},{"ruleId":"184","severity":1,"message":"185","line":304,"column":17,"nodeType":"186","endLine":309,"endColumn":19},{"ruleId":"184","severity":1,"message":"185","line":312,"column":15,"nodeType":"186","endLine":317,"endColumn":17},{"ruleId":"160","severity":1,"message":"187","line":1,"column":8,"nodeType":"162","messageId":"163","endLine":1,"endColumn":15},{"ruleId":"160","severity":1,"message":"188","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":16},{"ruleId":"160","severity":1,"message":"189","line":1,"column":24,"nodeType":"162","messageId":"163","endLine":1,"endColumn":43},{"ruleId":"164","replacedBy":"190"},{"ruleId":"166","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":49,"column":12,"nodeType":"194","messageId":"195","endLine":49,"endColumn":16},{"ruleId":"196","severity":1,"message":"197","line":67,"column":18,"nodeType":"198","messageId":"195","endLine":67,"endColumn":20},{"ruleId":"160","severity":1,"message":"199","line":392,"column":9,"nodeType":"162","messageId":"163","endLine":392,"endColumn":21},{"ruleId":"160","severity":1,"message":"200","line":397,"column":9,"nodeType":"162","messageId":"163","endLine":397,"endColumn":20},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"201","severity":1,"message":"202","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":16},{"ruleId":"201","severity":1,"message":"203","line":1,"column":18,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"201","severity":1,"message":"204","line":1,"column":28,"nodeType":"162","messageId":"163","endLine":1,"endColumn":34},{"ruleId":"201","severity":1,"message":"205","line":46,"column":32,"nodeType":"162","messageId":"163","endLine":46,"endColumn":49},{"ruleId":"196","severity":1,"message":"197","line":60,"column":28,"nodeType":"198","messageId":"195","endLine":60,"endColumn":30},{"ruleId":"164","replacedBy":"206"},{"ruleId":"166","replacedBy":"207"},{"ruleId":"201","severity":1,"message":"208","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":16},{"ruleId":"201","severity":1,"message":"209","line":3,"column":18,"nodeType":"162","messageId":"163","endLine":3,"endColumn":29},{"ruleId":"201","severity":1,"message":"210","line":42,"column":13,"nodeType":"162","messageId":"163","endLine":42,"endColumn":25},{"ruleId":"201","severity":1,"message":"211","line":94,"column":13,"nodeType":"162","messageId":"163","endLine":94,"endColumn":24},{"ruleId":"212","severity":1,"message":"213","line":216,"column":3,"nodeType":"214","messageId":"195","endLine":266,"endColumn":4},{"ruleId":"212","severity":1,"message":"215","line":268,"column":3,"nodeType":"214","messageId":"195","endLine":289,"endColumn":4},{"ruleId":"212","severity":1,"message":"216","line":291,"column":3,"nodeType":"214","messageId":"195","endLine":301,"endColumn":4},{"ruleId":"201","severity":1,"message":"217","line":306,"column":7,"nodeType":"162","messageId":"163","endLine":306,"endColumn":15},{"ruleId":"201","severity":1,"message":"218","line":308,"column":7,"nodeType":"162","messageId":"163","endLine":308,"endColumn":15},{"ruleId":"201","severity":1,"message":"219","line":309,"column":7,"nodeType":"162","messageId":"163","endLine":309,"endColumn":16},{"ruleId":"201","severity":1,"message":"220","line":310,"column":7,"nodeType":"162","messageId":"163","endLine":310,"endColumn":18},{"ruleId":"201","severity":1,"message":"221","line":311,"column":7,"nodeType":"162","messageId":"163","endLine":311,"endColumn":27},{"ruleId":"196","severity":1,"message":"197","line":14,"column":15,"nodeType":"198","messageId":"195","endLine":14,"endColumn":17},{"ruleId":"196","severity":1,"message":"197","line":18,"column":15,"nodeType":"198","messageId":"195","endLine":18,"endColumn":17},"@typescript-eslint/no-unused-vars","'extendTheme' is defined but never used.","Identifier","unusedVar","no-native-reassign",["222"],"no-negated-in-lhs",["223"],["222"],["223"],["222"],["223"],"'InputRightElement' is defined but never used.","'InputRightAddon' is defined but never used.","'_' is assigned a value but never used.","'useTheme' is defined but never used.","'TextProps' is defined but never used.","'Center' is defined but never used.","'NumberInputStepper' is defined but never used.","'NumberIncrementStepper' is defined but never used.","'NumberDecrementStepper' is defined but never used.","'Text' is defined but never used.","'PlusSquareIcon' is defined but never used.","'id' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component C_TypeAndValue must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'produce' is defined but never used.","'DocsCard' is defined but never used.","'QuestionOutlineIcon' is defined but never used.",["222"],["223"],"no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'onChangeCode' is assigned a value but never used.","'editorValue' is assigned a value but never used.","no-unused-vars","'Entity' is defined but never used.","'Modifier' is defined but never used.","'Editor' is defined but never used.","'onSuggestionClick' is assigned a value but never used.",["222"],["223"],"'render' is defined but never used.","'EditorState' is defined but never used.","'contentState' is assigned a value but never used.","'editorState' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getAutocompleteState'.","MethodDefinition","Duplicate name 'getAutocompleteRange'.","Duplicate name 'hasEntityAtSelection'.","'onChange' is assigned a value but never used.","'onEscape' is assigned a value but never used.","'onUpArrow' is assigned a value but never used.","'onDownArrow' is assigned a value but never used.","'onAutocompleteChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]