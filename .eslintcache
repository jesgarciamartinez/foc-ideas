[{"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx":"1","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx":"2","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts":"3","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts":"4","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx":"5","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/_App.js":"6","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx":"7","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx":"8","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx":"9","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx":"10","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx":"11","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts":"12"},{"size":837,"mtime":1606750026369,"results":"13","hashOfConfig":"14"},{"size":743,"mtime":1606395811243,"results":"15","hashOfConfig":"14"},{"size":5258,"mtime":1606395314403,"results":"16","hashOfConfig":"14"},{"size":416,"mtime":1606395314402,"results":"17","hashOfConfig":"14"},{"size":5685,"mtime":1606862149225,"results":"18","hashOfConfig":"14"},{"size":7738,"mtime":1606749524038,"results":"19","hashOfConfig":"14"},{"size":5312,"mtime":1606897565127,"results":"20","hashOfConfig":"14"},{"size":343,"mtime":1606814035751,"results":"21","hashOfConfig":"14"},{"size":813,"mtime":1606824602130,"results":"22","hashOfConfig":"14"},{"size":4061,"mtime":1606899635629,"results":"23","hashOfConfig":"14"},{"size":605,"mtime":1606852903166,"results":"24","hashOfConfig":"14"},{"size":4117,"mtime":1606900210822,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"5rdob7",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx",[],["57","58"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts",[],["59","60"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx",["61","62"],"import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport type { IsmallFunctionView } from './interfaces'\nimport { Code, Badge, Text } from '@chakra-ui/react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TreeView from '@material-ui/lab/TreeView'\nimport TreeItem from '@material-ui/lab/TreeItem'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ArrowForwardIcon,\n} from '@chakra-ui/icons'\nimport './cloneStyles.css'\nimport TypeBadge from './TypeBadge'\n\nconst useTreeViewStyles = makeStyles({\n  root: {\n    height: '100%',\n    flex: 1,\n  },\n})\n\ntype ItypeView = {\n  name: string\n  type: string\n  typeParameters?: Array<string>\n}\n\ntype IsideBarItem =\n  | {\n      nodeId: 'functions'\n      label: 'Functions'\n      items: Array<IsmallFunctionView>\n    }\n  | {\n      nodeId: 'types'\n      label: 'Types'\n      items: Array<ItypeView>\n    }\n\nexport default function SideBar({\n  items,\n  isAnyItemDragging,\n}: {\n  items?: Array<IsideBarItem>\n  isAnyItemDragging: boolean\n}) {\n  const { root } = useTreeViewStyles()\n\n  return (\n    <TreeView\n      aria-label='Functions and types'\n      className={root}\n      defaultCollapseIcon={<ChevronDownIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {items &&\n        items.map(item => {\n          return (\n            <TreeItem nodeId={item.nodeId} key={item.nodeId} label={item.label}>\n              {(() => {\n                switch (item.nodeId) {\n                  case 'functions':\n                    return item.items.map(innerItem => {\n                      const id = `${item.nodeId}_${innerItem.name}`\n                      return (\n                        <FunctionTreeItem\n                          {...innerItem}\n                          key={id}\n                          nodeId={id}\n                          isAnyItemDragging={!!isAnyItemDragging}\n                        />\n                      )\n                    })\n                  case 'types':\n                    return item.items.map(innerItem => {\n                      const id = `${item.nodeId}_${innerItem.name}`\n                      return (\n                        <TypeTreeItem\n                          {...innerItem}\n                          key={id}\n                          nodeId={id}\n                          isAnyItemDragging={!!isAnyItemDragging}\n                        />\n                      )\n                    })\n                  default:\n                    let _: never = item\n                }\n              })()}\n            </TreeItem>\n          )\n        })}\n    </TreeView>\n  )\n}\n\nconst FunctionItem = (props: IsmallFunctionView) => {\n  return (\n    <Text wrap='nowrap'>\n      <Code /*backgroundColor='white'*/>{props.name}</Code>\n      <Text as='span'>:</Text>\n      <Text as={'span'} flexWrap='nowrap'>\n        {props.parameterTypes.map((p, i) => (\n          <Text as='span' key={i}>\n            <TypeBadge>{p}</TypeBadge>{' '}\n            <Text as='span'>\n              {' '}\n              <ArrowForwardIcon />{' '}\n            </Text>\n          </Text>\n        ))}\n      </Text>\n      <Text as='span'>\n        <TypeBadge>{props.returnType}</TypeBadge>\n      </Text>\n    </Text>\n  )\n}\n\nconst getFunctionRenderItem = (props: IsmallFunctionView) => (\n  provided: any,\n  snapshot: any,\n  rubric: any,\n) => {\n  return (\n    <ul\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n    >\n      <li>\n        <FunctionItem {...props} />\n      </li>\n    </ul>\n  )\n}\nconst useTreeItemStyles = makeStyles({\n  root: {\n    marginBottom: '5px',\n  },\n  content: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n      cursor: 'grabbing',\n    },\n  },\n})\n\nconst FunctionTreeItem = (\n  props: IsmallFunctionView & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { root, content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      classes={{ root, content: props.isAnyItemDragging ? content : undefined }}\n      nodeId={props.nodeId}\n      label={\n        <Droppable\n          droppableId={props.nodeId}\n          renderClone={getFunctionRenderItem(props)}\n          isDropDisabled={true}\n        >\n          {(provided, snapshot) => {\n            const shouldRenderClone =\n              props.nodeId === snapshot.draggingFromThisWith\n            return (\n              <ul ref={provided.innerRef} {...provided.droppableProps}>\n                {shouldRenderClone ? (\n                  <li className='react-beautiful-dnd-copy'>\n                    <FunctionItem {...props}></FunctionItem>\n                  </li>\n                ) : (\n                  <Draggable draggableId={props.nodeId} index={0}>\n                    {(provided, snapshot) => {\n                      return (\n                        <li\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <FunctionItem {...props}></FunctionItem>\n                        </li>\n                      )\n                    }}\n                  </Draggable>\n                )}\n                {/* {provided.placeholder} */}\n              </ul>\n            )\n          }}\n        </Droppable>\n      }\n    ></TreeItem>\n  )\n}\nconst TypeTreeItem = (\n  props: ItypeView & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      nodeId={props.nodeId}\n      classes={{ content: props.isAnyItemDragging ? content : undefined }}\n      label={`${props.type} ${props.name}`}\n    />\n  )\n}\n",["63","64"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/_App.js",["65"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx",[],["92","93"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx",["94"],"import * as React from 'react'\nimport { Code } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\nconst TypeBadge = ({ children, ...rest }: { children: Itype }) => {\n  return (\n    <Code\n      colorScheme={(() => {\n        switch (children) {\n          case 'string':\n            return 'yellow'\n          case 'number':\n            return 'green'\n          case 'boolean':\n            return 'blue'\n          case 'function':\n            return 'purple'\n          case 'object':\n            return 'red'\n          case 'array':\n            return 'red'\n          case 'undefined':\n            return 'black'\n          case 'null':\n            return 'black'\n          default:\n            let x: never = children\n        }\n      })()}\n    >\n      {children}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx",["95","96"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx",[],["97","98"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts",["99","100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"101","replacedBy":"105"},{"ruleId":"103","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":4,"column":16,"nodeType":"109","messageId":"110","endLine":4,"endColumn":21},{"ruleId":"107","severity":1,"message":"111","line":88,"column":25,"nodeType":"109","messageId":"110","endLine":88,"endColumn":33},{"ruleId":"101","replacedBy":"112"},{"ruleId":"103","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":40,"column":7,"nodeType":"109","messageId":"110","endLine":40,"endColumn":11},{"ruleId":"107","severity":1,"message":"116","line":2,"column":27,"nodeType":"109","messageId":"110","endLine":2,"endColumn":36},{"ruleId":"107","severity":1,"message":"117","line":2,"column":38,"nodeType":"109","messageId":"110","endLine":2,"endColumn":47},{"ruleId":"107","severity":1,"message":"118","line":3,"column":16,"nodeType":"109","messageId":"110","endLine":3,"endColumn":20},{"ruleId":"107","severity":1,"message":"119","line":4,"column":8,"nodeType":"109","messageId":"110","endLine":4,"endColumn":10},{"ruleId":"107","severity":1,"message":"120","line":7,"column":3,"nodeType":"109","messageId":"110","endLine":7,"endColumn":6},{"ruleId":"107","severity":1,"message":"121","line":8,"column":3,"nodeType":"109","messageId":"110","endLine":8,"endColumn":9},{"ruleId":"107","severity":1,"message":"122","line":9,"column":3,"nodeType":"109","messageId":"110","endLine":9,"endColumn":9},{"ruleId":"107","severity":1,"message":"123","line":10,"column":12,"nodeType":"109","messageId":"110","endLine":10,"endColumn":18},{"ruleId":"107","severity":1,"message":"124","line":13,"column":3,"nodeType":"109","messageId":"110","endLine":13,"endColumn":9},{"ruleId":"107","severity":1,"message":"125","line":14,"column":3,"nodeType":"109","messageId":"110","endLine":14,"endColumn":7},{"ruleId":"107","severity":1,"message":"126","line":15,"column":3,"nodeType":"109","messageId":"110","endLine":15,"endColumn":9},{"ruleId":"107","severity":1,"message":"127","line":17,"column":3,"nodeType":"109","messageId":"110","endLine":17,"endColumn":7},{"ruleId":"107","severity":1,"message":"128","line":18,"column":3,"nodeType":"109","messageId":"110","endLine":18,"endColumn":13},{"ruleId":"107","severity":1,"message":"129","line":19,"column":3,"nodeType":"109","messageId":"110","endLine":19,"endColumn":11},{"ruleId":"107","severity":1,"message":"130","line":20,"column":3,"nodeType":"109","messageId":"110","endLine":20,"endColumn":11},{"ruleId":"107","severity":1,"message":"131","line":21,"column":3,"nodeType":"109","messageId":"110","endLine":21,"endColumn":17},{"ruleId":"107","severity":1,"message":"132","line":22,"column":3,"nodeType":"109","messageId":"110","endLine":22,"endColumn":12},{"ruleId":"107","severity":1,"message":"133","line":23,"column":3,"nodeType":"109","messageId":"110","endLine":23,"endColumn":18},{"ruleId":"107","severity":1,"message":"134","line":24,"column":3,"nodeType":"109","messageId":"110","endLine":24,"endColumn":11},{"ruleId":"107","severity":1,"message":"135","line":25,"column":3,"nodeType":"109","messageId":"110","endLine":25,"endColumn":14},{"ruleId":"107","severity":1,"message":"136","line":26,"column":3,"nodeType":"109","messageId":"110","endLine":26,"endColumn":14},{"ruleId":"107","severity":1,"message":"137","line":27,"column":3,"nodeType":"109","messageId":"110","endLine":27,"endColumn":13},{"ruleId":"107","severity":1,"message":"138","line":28,"column":3,"nodeType":"109","messageId":"110","endLine":28,"endColumn":17},{"ruleId":"107","severity":1,"message":"139","line":29,"column":3,"nodeType":"109","messageId":"110","endLine":29,"endColumn":18},{"ruleId":"107","severity":1,"message":"140","line":33,"column":3,"nodeType":"109","messageId":"110","endLine":33,"endColumn":7},{"ruleId":"107","severity":1,"message":"141","line":39,"column":10,"nodeType":"109","messageId":"110","endLine":39,"endColumn":27},{"ruleId":"101","replacedBy":"142"},{"ruleId":"103","replacedBy":"143"},{"ruleId":"107","severity":1,"message":"144","line":26,"column":17,"nodeType":"109","messageId":"110","endLine":26,"endColumn":25},{"ruleId":"107","severity":1,"message":"145","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":25},{"ruleId":"107","severity":1,"message":"146","line":39,"column":21,"nodeType":"109","messageId":"110","endLine":39,"endColumn":32},{"ruleId":"101","replacedBy":"147"},{"ruleId":"103","replacedBy":"148"},{"ruleId":"107","severity":1,"message":"149","line":3,"column":21,"nodeType":"109","messageId":"110","endLine":3,"endColumn":39},{"ruleId":"107","severity":1,"message":"150","line":98,"column":7,"nodeType":"109","messageId":"110","endLine":98,"endColumn":24},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],["151"],["152"],"@typescript-eslint/no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'_' is assigned a value but never used.",["151"],["152"],"no-unused-vars","'grid' is assigned a value but never used.","'Droppable' is defined but never used.","'Draggable' is defined but never used.","'uuid' is defined but never used.","'ts' is defined but never used.","'Box' is defined but never used.","'Center' is defined but never used.","'Button' is defined but never used.","'_theme' is defined but never used.","'VStack' is defined but never used.","'Code' is defined but never used.","'Spacer' is defined but never used.","'Menu' is defined but never used.","'MenuButton' is defined but never used.","'MenuList' is defined but never used.","'MenuItem' is defined but never used.","'MenuItemOption' is defined but never used.","'MenuGroup' is defined but never used.","'MenuOptionGroup' is defined but never used.","'MenuIcon' is defined but never used.","'MenuCommand' is defined but never used.","'MenuDivider' is defined but never used.","'InputGroup' is defined but never used.","'InputLeftAddon' is defined but never used.","'InputRightAddon' is defined but never used.","'Flex' is defined but never used.","'ColorModeSwitcher' is defined but never used.",["151"],["152"],"'x' is assigned a value but never used.","'DragDropContext' is defined but never used.","'isIndexEven' is assigned a value but never used.",["151"],["152"],"'IsmallFunctionView' is defined but never used.","'flowCardFunctions' is defined but never used.","no-global-assign","no-unsafe-negation"]