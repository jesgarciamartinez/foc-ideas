[{"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx":"1","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx":"2","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts":"3","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts":"4","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx":"5","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx":"6","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx":"7","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx":"8","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx":"9","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx":"10","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts":"11","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx":"12","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx":"13","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx":"14","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts":"15","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx":"16"},{"size":953,"mtime":1607783634378,"results":"17","hashOfConfig":"18"},{"size":743,"mtime":1606395811243,"results":"19","hashOfConfig":"18"},{"size":5258,"mtime":1606395314403,"results":"20","hashOfConfig":"18"},{"size":416,"mtime":1606395314402,"results":"21","hashOfConfig":"18"},{"size":13497,"mtime":1608113483950,"results":"22","hashOfConfig":"18"},{"size":5770,"mtime":1608115271764,"results":"23","hashOfConfig":"18"},{"size":395,"mtime":1608112070153,"results":"24","hashOfConfig":"18"},{"size":1337,"mtime":1607962977962,"results":"25","hashOfConfig":"18"},{"size":13650,"mtime":1608057121858,"results":"26","hashOfConfig":"18"},{"size":605,"mtime":1606852903166,"results":"27","hashOfConfig":"18"},{"size":9095,"mtime":1608115203463,"results":"28","hashOfConfig":"18"},{"size":870,"mtime":1608005300285,"results":"29","hashOfConfig":"18"},{"size":1292,"mtime":1607922509708,"results":"30","hashOfConfig":"18"},{"size":393,"mtime":1607635865658,"results":"31","hashOfConfig":"18"},{"size":2033,"mtime":1607865814484,"results":"32","hashOfConfig":"18"},{"size":18245,"mtime":1608113913938,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"5rdob7",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx",["74"],"import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ColorModeScript, extendTheme, ChakraProvider } from '@chakra-ui/react'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n",["75","76"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx",[],["77","78"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts",[],["79","80"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx",["81","82","83"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx",["84"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx",["85","86"],"import * as React from 'react'\nimport { Code, CodeProps, TextProps, useTheme } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\n\nconst TypeBadge = ({\n  typeAsString,\n  // fontSize,\n  as,\n  children,\n}: {\n  typeAsString: Itype['type']\n  // fontSize?: CodeProps['fontSize']\n  as?: CodeProps['as']\n  children?: any\n  // rest?: CodeProps\n}) => {\n  // const {\n  //   colors: {\n  //     unison: { orange, yellow },\n  //   },\n  // } = useTheme()\n\n  return (\n    <Code\n      as={as}\n      // fontSize={fontSize}\n      // paddingX={1}\n      // paddingY={0.5}\n      sx={\n        {\n          string: { color: 'unison.darkOrange', backgroundColor: 'yellow.100' },\n          number: {\n            color: 'unison.darkGreen',\n            backgroundColor: 'green.100',\n          },\n          boolean: { color: 'unison.pink', backgroundColor: 'pink.100' },\n          function: { color: 'unison.purple', backgroundColor: 'purple.100' },\n          object: { color: 'black', backgroundColor: 'gray.100' },\n          array: { color: 'black', backgroundColor: 'gray.100' },\n          undefined: { color: 'black', backgroundColor: 'gray.100' },\n          null: { color: 'black', backgroundColor: 'gray.100' },\n        }[typeAsString]\n      }\n      rounded={'base'}\n    >\n      {children ?? typeAsString}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx",["87","88","89","90","91","92","93","94","95","96"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts",["97","98"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx",["99"],"import { QuestionIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport {\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverHeader,\n  PopoverBodyProps,\n  Tooltip,\n} from '@chakra-ui/react'\nimport React from 'react'\n\nconst PopoverExplanation = (props: {\n  children: PopoverBodyProps['children']\n  label: string\n  title: string\n}) => {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <IconButton\n          aria-label={props.label}\n          icon={\n            <Tooltip label={props.label} aria-label={props.label} hasArrow>\n              {/* <QuestionOutlineIcon /> */}\n              <QuestionIcon />\n            </Tooltip>\n          }\n          size='lg'\n          colorScheme='purple'\n          color='unison.purple'\n          variant='ghost'\n          sx={{\n            '&:hover': {\n              color: 'unison.aqua',\n            },\n          }}\n        />\n      </PopoverTrigger>\n\n      {/* <PopoverContent borderColor='unison.purple'> */}\n      <PopoverContent>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader>{props.title}</PopoverHeader>\n        <PopoverBody>{props.children}</PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport default PopoverExplanation\n",["100","101"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"import * as React from 'react'\nimport {\n  HStack,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  Text,\n  Textarea,\n  Code,\n  IconButton,\n  Box,\n  Divider,\n  Flex,\n  Heading,\n  Spacer,\n  Button,\n  Fade,\n  ScaleFade,\n} from '@chakra-ui/react'\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'\nimport {\n  AddIcon,\n  ArrowForwardIcon,\n  CheckIcon,\n  CloseIcon,\n  DeleteIcon,\n} from '@chakra-ui/icons'\nimport Card from './Card'\n// import useAutocomplete from '@material-ui/lab/useAutocomplete'\n// import Autosuggest from 'react-autosuggest'\n// import { useCombobox, useMultipleSelection } from 'downshift'\nimport MonacoEditor from './Editor'\nimport { Itype, Ifunction } from './interfaces'\nimport { matchSorter } from 'match-sorter'\nimport TypeBadge from './TypeBadge'\nimport EditableText from './EditableText'\nimport PopoverExplanation from './PopoverExplanation'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { Action } from '../state'\nimport {\n  CompositeDecorator,\n  Editor as DraftEditor,\n  EditorState,\n  convertToRaw,\n  ContentState,\n} from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport './draftEditorStyles.css'\n\nconst defaultName = 'name'\n// const defaultType = '_'\nconst typeSuggestions: Array<{ title: Itype['type'] | 'New type' }> = [\n  { title: 'string' },\n  { title: 'boolean' },\n  { title: 'number' },\n]\n\nconst safeEval = (s: string) => {\n  try {\n    return eval(`(() => ${s})()`)\n  } catch (error) {\n    return null\n  }\n}\nconst getParamsAndReturns = (s: string) =>\n  s.split(arrow).map(s => ({ type: s.trim() }))\n\nconst isSignatureCorrect = (\n  paramsAndReturns: Array<{ type: string }>,\n): paramsAndReturns is Array<Itype> =>\n  paramsAndReturns.length > 1 &&\n  paramsAndReturns.every(p => ['string', 'boolean', 'number'].includes(p.type))\n\nconst getFilteredTypeSuggestions = (\n  typeSuggestions_: typeof typeSuggestions,\n  inputValue: string,\n) => matchSorter(typeSuggestions_, inputValue, { keys: ['title'] })\n\nconst typeToName = (x: { type: string }, n: number): string => {\n  const suffix = n || ''\n  switch (x.type) {\n    case 'string':\n      return 'str' + suffix\n    case 'number':\n      return 'num' + suffix\n    case 'boolean':\n      return 'bool' + suffix\n    default:\n      return 'x'\n    // case 'function':\n    //   return ['f', 'g', 'h', 'i', 'j'][n]\n    // case 'object':\n    //   return 'o' + suffix\n\n    // case 'array':\n    //   return '' //TODO\n    // case 'undefined':\n    // case 'null':\n    //   return ''\n  }\n}\nconst getParamNames = (arr: Array<{ type: string }>): string[] => {\n  let result: string[] = []\n  let alreadySeenTypes: any = {}\n  arr.forEach(iType => {\n    const paramName = typeToName(iType, alreadySeenTypes[iType.type])\n    result.push(paramName)\n    alreadySeenTypes[iType.type] = (alreadySeenTypes[iType.type] || 0) + 1\n  })\n  return result\n}\n\nfunction findWithRegex(regex: any, contentBlock: any, callback: any) {\n  const text = contentBlock.getText()\n  let matchArr, start\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index\n    callback(start, start + matchArr[0].length)\n  }\n}\n\nconst signatureDecorator = new CompositeDecorator([\n  {\n    //TypeBadge\n    strategy(contentBlock, cb, contentState) {\n      findWithRegex(\n        new RegExp(\n          `(${typeSuggestions.map(({ title }) => title).join('|')})`,\n          'gi',\n        ),\n        contentBlock,\n        cb,\n      )\n    },\n    component(props: any) {\n      return (\n        <TypeBadge\n          typeAsString={props.decoratedText}\n          children={props.children}\n          as='span'\n        />\n      )\n    },\n  },\n])\n\nconst HANDLE_REGEX = /@[\\w]+/g\nconst arrow = '→'\n\nconst getStateValueFromFunc = (\n  descriptionDecorator: CompositeDecorator,\n  func?: Ifunction,\n): {\n  name: string\n  signature: EditorState\n  description: EditorState\n  code: string\n} => {\n  return {\n    name: func?.name || '',\n    signature: EditorState.createWithContent(\n      ContentState.createFromText(\n        func?.parameters\n          .concat(func.returns)\n          .map(p => p.type)\n          .join(` ${arrow} `) || '',\n      ),\n      signatureDecorator,\n    ),\n    description: EditorState.createWithContent(\n      ContentState.createFromText(func?.description || ''),\n      descriptionDecorator,\n    ),\n    code: func?.fn.toString() || '',\n  }\n}\n\ntype DocsCardState = {\n  name: string\n  signature: EditorState\n  description: EditorState\n  code: string\n}\n\nconst setOriginalState = (\n  originalState: React.MutableRefObject<{\n    name: string\n    signatureString: string\n    descriptionString: string\n    code: string\n  }>,\n  state: DocsCardState,\n) => {\n  const newOriginalState = {\n    name: state.name,\n    signatureString: state.signature.getCurrentContent().getPlainText(),\n    descriptionString: state.description.getCurrentContent().getPlainText(),\n    code: state.code,\n  }\n  console.log({ newOriginalState })\n  originalState.current = newOriginalState\n}\n\n/**\n *\n *\n * DOCS CARD\n *\n *\n */\n\nconst DocsCard = ({\n  func,\n  dispatch,\n  index,\n}: {\n  func?: Ifunction\n  dispatch: React.Dispatch<Action>\n  index: number\n}) => {\n  const descriptionDecorator = new CompositeDecorator([\n    {\n      //TypeBadge\n      strategy(contentBlock, cb, contentState) {\n        findWithRegex(HANDLE_REGEX, contentBlock, cb)\n      },\n      component(props: any) {\n        return (\n          <Button\n            as='span'\n            variant='link'\n            color='unison.aqua'\n            fontSize='inherit'\n            fontStyle='inherit'\n            style={{\n              direction: 'ltr',\n              unicodeBidi: 'bidi-override',\n            }}\n            data-offset-key={props.offsetKey}\n            onClick={e => {\n              dispatch({\n                type: 'openDocs',\n                fnName: props.decoratedText.slice(1),\n              })\n            }}\n          >\n            {props.children}\n          </Button>\n        )\n      },\n    },\n  ])\n  const originalState = React.useRef<{\n    name: string\n    signatureString: string\n    descriptionString: string\n    code: string\n  }>({\n    name: '',\n    signatureString: '',\n    descriptionString: '',\n    code: '',\n  })\n  const [state, setState] = React.useState<DocsCardState>(() => {\n    const state = getStateValueFromFunc(descriptionDecorator, func)\n    setOriginalState(originalState, state)\n    return state\n  })\n\n  const [previousFunc, setPreviousFunc] = React.useState(func)\n  if (previousFunc !== func) {\n    //reference check on function from state.functions\n    setPreviousFunc(func)\n    const state = getStateValueFromFunc(descriptionDecorator, func)\n    setOriginalState(originalState, state)\n    setState(state)\n  }\n  const { name, signature, description, code } = state\n\n  //Name\n  const onChangeName = (name: string) => setState(state => ({ ...state, name }))\n  const nameFontStyle = [defaultName, ''].includes(name) ? 'italic' : 'normal'\n  const nameColor = [defaultName, ''].includes(name) ? 'gray.400' : 'normal'\n\n  //Description\n  const onChangeDescription = (description: EditorState) =>\n    setState(state => ({ ...state, description }))\n  const descriptionHasText = description.getCurrentContent().hasText()\n  const descriptionFontStyle = descriptionHasText ? 'normal' : 'italic'\n  const descriptionColor = descriptionHasText ? 'normal' : 'gray.400'\n  // const descriptionEditorRef = React.useRef(null)\n\n  //Signature\n\n  // const [signatureEditorState, setSignatureEditorState] = React.useState(() =>\n  //   EditorState.createEmpty(signatureDecorator),\n  // )\n  const signatureEditorRef = React.useRef(null)\n\n  const onChangeSignatureEditor = (e: EditorState) => {\n    let newEditorState: EditorState\n    switch (e.getLastChangeType()) {\n      case 'insert-characters':\n        const arrow = '→'\n        const text = e.getCurrentContent().getFirstBlock().getText()\n        let newText = text\n        const triggerArrow = text.endsWith(',') || text.endsWith(' ')\n        if (triggerArrow) {\n          //TODO arrow component\n          const previousMeaningfulCharIsArrow = text\n            .replace(',', ' ')\n            .trimEnd()\n            .endsWith(arrow)\n          const previousCharIsClosingBracket = text\n            .substr(0, text.length - 1)\n            .endsWith('}')\n          if (previousMeaningfulCharIsArrow) {\n            newText = text.substr(0, text.length - 1)\n          } else if (previousCharIsClosingBracket && text.endsWith(' ')) {\n            //abilities\n            newText = text\n          } else {\n            // only if last non-space or comma char is not arrow\n            newText = text.substr(0, text.length - 1).concat(` ${arrow} `)\n          }\n        }\n\n        newEditorState =\n          text === newText\n            ? e\n            : EditorState.moveFocusToEnd(\n                EditorState.push(\n                  e,\n                  ContentState.createFromText(newText),\n                  'insert-fragment',\n                ),\n              )\n        break\n      default:\n        newEditorState = e\n        break\n    }\n\n    setState(state => ({ ...state, signature: newEditorState }))\n  }\n\n  const [typeSuggestionsList, setTypeSuggestionsList] = React.useState(\n    typeSuggestions,\n  )\n  const [inputValue, setInputValue] = React.useState('')\n\n  // const {\n  //   isOpen,\n  //   // getToggleButtonProps,\n  //   // getLabelProps,\n  //   getMenuProps,\n  //   getInputProps,\n  //   getComboboxProps,\n  //   highlightedIndex,\n  //   getItemProps,\n  //   // selectItem,\n  // } = useCombobox({\n  //   inputValue,\n  //   items: typeSuggestionsList,\n  //   onInputValueChange: ({ inputValue }) => {\n  //     console.log({ inputValue })\n  //     if (!inputValue) {\n  //       return\n  //     }\n  //     setTypeSuggestionsList(\n  //       getFilteredTypeSuggestions(typeSuggestionsList, inputValue),\n  //     )\n  //   },\n  // })\n\n  // const paramString: string = params.reduce(\n  //   (acc, p) => {\n  //     acc.typeCount[p.type] = acc.typeCount[p.type]\n  //       ? acc.typeCount[p.type] + 1\n  //       : 0\n  //     const prefix = acc.result === '' ? '' : ', '\n  //     acc.result = acc.result + typeToName(p.type, acc.typeCount[p.type])\n  //     return acc\n  //   },\n  //   { result: '', typeCount: {} },\n  // ).result\n\n  //Code\n  const onChangeCode = (code: string) => setState(state => ({ ...state, code }))\n  const signatureString = signature.getCurrentContent().getPlainText()\n  const paramsAndReturns = getParamsAndReturns(signatureString)\n  const params = paramsAndReturns.slice(0, paramsAndReturns.length - 1)\n  const paramNames = getParamNames(params)\n  const editorValue =\n    code || `function ${name || 'name'}(${paramNames.join(', ')}) {\\n\\n}`\n\n  // const [signatureTouched, setSignatureTouched] = React.useState<boolean>(false)\n  const signatureError = !isSignatureCorrect(paramsAndReturns)\n\n  const hasChanges =\n    name !== originalState.current.name ||\n    signatureString !== originalState.current.signatureString ||\n    description.getCurrentContent().getPlainText() !==\n      originalState.current.descriptionString ||\n    code !== originalState.current.code\n\n  return (\n    <Box\n      boxShadow={'base'}\n      // minWidth={'48%'} //@TODO prevent Yscroll another way\n      // minHeight='100%'\n      backgroundColor='white'\n      padding={1}\n      minWidth={'50%'}\n      minHeight='100vh'\n      height='100%'\n      // position='relative'\n      display='flex'\n      flexDirection='column'\n    >\n      <Flex paddingLeft={2} alignItems='center'>\n        <Heading fontSize='xl' fontStyle='italic' color='unison.purple'>\n          Docs\n        </Heading>\n        <Spacer></Spacer>\n\n        <Fade in={hasChanges}>\n          <Button\n            color='unison.darkPink'\n            sx={{ '&:hover': { backgroundColor: 'red.50' } }}\n            variant='ghost'\n            leftIcon={<DeleteIcon />}\n            onClick={() => {\n              const state = getStateValueFromFunc(\n                descriptionDecorator,\n                undefined,\n              )\n              setOriginalState(originalState, state)\n              setState(state)\n              dispatch({ type: 'clearDocsCard', index })\n            }}\n          >\n            Clear\n          </Button>\n        </Fade>\n\n        <Fade in={hasChanges}>\n          <Button\n            color={signatureError ? 'gray.300' : 'unison.green'}\n            sx={{ '&:hover': { backgroundColor: 'green.50' } }}\n            variant='ghost'\n            leftIcon={<CheckIcon />}\n            disabled={signatureError}\n            onClick={() => {\n              const fn = safeEval(code)\n              const validParams = isSignatureCorrect(paramsAndReturns)\n              if (!fn || !validParams) {\n                console.log('hey', validParams, fn, code)\n                return //TODO alert\n              }\n              const parameters = paramsAndReturns.slice(\n                0,\n                paramsAndReturns.length - 1,\n              ) as Itype[] //TODO cast\n              const returns = paramsAndReturns.slice(-1).pop() as Itype\n              dispatch({\n                type: 'createFunction',\n                function: {\n                  name,\n                  parameters,\n                  returns,\n                  fn,\n                  description: description.getCurrentContent().getPlainText(),\n                },\n              })\n            }}\n          >\n            Save\n          </Button>\n        </Fade>\n\n        <PopoverExplanation label='Docs card explanation' title='Docs card'>\n          Docs is an editable view of the documentation for a function\n        </PopoverExplanation>\n        <IconButton\n          aria-label='Close card'\n          icon={<CloseIcon />}\n          variant='ghost'\n          size='sm'\n          onClick={() => dispatch({ type: 'closeDocsCard', index })}\n        />\n      </Flex>\n      <Divider marginTop={2}></Divider>\n      <Droppable droppableId='DocsCard'>\n        {(provided, snapshot) => {\n          return (\n            <Box\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              // minWidth={'50%'}\n              flex={1}\n              minHeight='100%'\n              height='100%'\n              overflow='auto'\n              paddingX={2}\n              paddingY={2}\n            >\n              <EditableText\n                /* NAME */\n                value={name}\n                onChange={onChangeName}\n                placeholder={defaultName}\n                fontSize='2xl'\n                textColor={nameColor}\n                fontStyle={nameFontStyle}\n                marginBottom={3}\n              />\n\n              {/* SIGNATURE */}\n              <HStack>\n                <Code fontSize='sm' padding={0.5}>\n                  <Editable\n                    as='span'\n                    placeholder={defaultName}\n                    fontStyle={nameFontStyle}\n                    // width={name.length * 12 + 12 + 'px'}\n                    width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    // minWidth={(name || defaultName).length * 12 + 12 + 'px'}\n                    value={name}\n                    textColor={nameColor}\n                    onChange={onChangeName}\n                    paddingX={1}\n                  >\n                    <EditablePreview\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                    />\n                    <EditableInput\n                      width={(name.length > 3 ? name.length : 4) * 9 + 9 + 'px'}\n                      _focus={{\n                        outline: '',\n                      }}\n                    />\n                  </Editable>\n                </Code>\n\n                <Text as='span' fontSize='sm'>\n                  :{' '}\n                </Text>\n                <Code\n                  // SIGNATURE EDITOR\n                  fontSize='sm'\n                  width='100%'\n                  paddingX={1}\n                  paddingY={1}\n                  as='span'\n                >\n                  <DraftEditor\n                    editorState={signature}\n                    ref={signatureEditorRef}\n                    onChange={onChangeSignatureEditor}\n                    // onBlur={(e: any) => {\n                    //   setSignatureTouched(true)\n                    // }}\n                  />\n                </Code>\n              </HStack>\n\n              <Code fontSize='xl' display='block' marginTop={2}>\n                {/* SIGNATURE 2 */}\n                {/* <EditableText\n                  ref={signature2Ref}\n                  placeholder={defaultName}\n                  fontStyle={nameFontStyle}\n                  width={(signature2 || defaultName).length * 12 + 12 + 'px'}\n                  maxWidth='100%'\n                  value={signature2}\n                  textColor={nameColor}\n                  onChange={onChangeSignature2}\n                /> */}\n              </Code>\n              <Text\n                /* DESCRIPTION */\n                className='description'\n                marginTop={5}\n                fontSize='xl'\n                fontStyle={descriptionFontStyle}\n                color={descriptionColor}\n                backgroundColor='yellow.50'\n                padding={3}\n              >\n                <DraftEditor\n                  placeholder='Description'\n                  editorState={description}\n                  onChange={onChangeDescription}\n                ></DraftEditor>\n              </Text>\n              {/* <Tabs marginTop={5}>\n                <TabList>\n                  <Tab>Regular editor</Tab>\n                  <Tab>Structured editor</Tab>\n                </TabList>\n                <TabPanels>\n                  <TabPanel> */}\n              <Box marginTop={5}>\n                <MonacoEditor\n                  value={editorValue}\n                  onChange={(_, v: any) => {\n                    onChangeCode(v)\n                  }}\n                ></MonacoEditor>\n              </Box>\n\n              {/* </TabPanel>\n                  <TabPanel>\n                    <Code>{editorValue}</Code>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs> */}\n\n              {provided.placeholder}\n            </Box>\n          )\n        }}\n      </Droppable>\n    </Box>\n  )\n}\nexport default DocsCard\n",{"ruleId":"119","severity":1,"message":"120","line":3,"column":27,"nodeType":"121","messageId":"122","endLine":3,"endColumn":38},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"127"},{"ruleId":"125","replacedBy":"128"},{"ruleId":"123","replacedBy":"129"},{"ruleId":"125","replacedBy":"130"},{"ruleId":"119","severity":1,"message":"131","line":17,"column":3,"nodeType":"121","messageId":"122","endLine":17,"endColumn":20},{"ruleId":"119","severity":1,"message":"132","line":18,"column":3,"nodeType":"121","messageId":"122","endLine":18,"endColumn":18},{"ruleId":"119","severity":1,"message":"133","line":422,"column":31,"nodeType":"121","messageId":"122","endLine":422,"endColumn":39},{"ruleId":"119","severity":1,"message":"134","line":8,"column":3,"nodeType":"121","messageId":"122","endLine":8,"endColumn":11},{"ruleId":"119","severity":1,"message":"135","line":2,"column":27,"nodeType":"121","messageId":"122","endLine":2,"endColumn":36},{"ruleId":"119","severity":1,"message":"134","line":2,"column":38,"nodeType":"121","messageId":"122","endLine":2,"endColumn":46},{"ruleId":"119","severity":1,"message":"136","line":7,"column":3,"nodeType":"121","messageId":"122","endLine":7,"endColumn":9},{"ruleId":"119","severity":1,"message":"137","line":18,"column":3,"nodeType":"121","messageId":"122","endLine":18,"endColumn":21},{"ruleId":"119","severity":1,"message":"138","line":19,"column":3,"nodeType":"121","messageId":"122","endLine":19,"endColumn":25},{"ruleId":"119","severity":1,"message":"139","line":20,"column":3,"nodeType":"121","messageId":"122","endLine":20,"endColumn":25},{"ruleId":"119","severity":1,"message":"140","line":22,"column":3,"nodeType":"121","messageId":"122","endLine":22,"endColumn":7},{"ruleId":"119","severity":1,"message":"141","line":31,"column":3,"nodeType":"121","messageId":"122","endLine":31,"endColumn":17},{"ruleId":"119","severity":1,"message":"142","line":195,"column":34,"nodeType":"121","messageId":"122","endLine":195,"endColumn":36},{"ruleId":"143","severity":1,"message":"144","line":289,"column":25,"nodeType":"145","endLine":293,"endColumn":27},{"ruleId":"143","severity":1,"message":"144","line":304,"column":17,"nodeType":"145","endLine":309,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":312,"column":15,"nodeType":"145","endLine":317,"endColumn":17},{"ruleId":"119","severity":1,"message":"146","line":1,"column":8,"nodeType":"121","messageId":"122","endLine":1,"endColumn":15},{"ruleId":"119","severity":1,"message":"147","line":5,"column":8,"nodeType":"121","messageId":"122","endLine":5,"endColumn":16},{"ruleId":"119","severity":1,"message":"148","line":1,"column":24,"nodeType":"121","messageId":"122","endLine":1,"endColumn":43},{"ruleId":"123","replacedBy":"149"},{"ruleId":"125","replacedBy":"150"},{"ruleId":"119","severity":1,"message":"151","line":8,"column":3,"nodeType":"121","messageId":"122","endLine":8,"endColumn":11},{"ruleId":"119","severity":1,"message":"152","line":18,"column":3,"nodeType":"121","messageId":"122","endLine":18,"endColumn":12},{"ruleId":"119","severity":1,"message":"153","line":20,"column":10,"nodeType":"121","messageId":"122","endLine":20,"endColumn":14},{"ruleId":"119","severity":1,"message":"154","line":20,"column":16,"nodeType":"121","messageId":"122","endLine":20,"endColumn":23},{"ruleId":"119","severity":1,"message":"155","line":20,"column":25,"nodeType":"121","messageId":"122","endLine":20,"endColumn":34},{"ruleId":"119","severity":1,"message":"156","line":20,"column":36,"nodeType":"121","messageId":"122","endLine":20,"endColumn":39},{"ruleId":"119","severity":1,"message":"157","line":20,"column":41,"nodeType":"121","messageId":"122","endLine":20,"endColumn":49},{"ruleId":"119","severity":1,"message":"158","line":22,"column":3,"nodeType":"121","messageId":"122","endLine":22,"endColumn":10},{"ruleId":"119","severity":1,"message":"159","line":23,"column":3,"nodeType":"121","messageId":"122","endLine":23,"endColumn":19},{"ruleId":"119","severity":1,"message":"160","line":28,"column":8,"nodeType":"121","messageId":"122","endLine":28,"endColumn":12},{"ruleId":"119","severity":1,"message":"161","line":44,"column":3,"nodeType":"121","messageId":"122","endLine":44,"endColumn":15},{"ruleId":"162","severity":1,"message":"163","line":60,"column":12,"nodeType":"164","messageId":"165","endLine":60,"endColumn":16},{"ruleId":"119","severity":1,"message":"166","line":74,"column":7,"nodeType":"121","messageId":"122","endLine":74,"endColumn":33},{"ruleId":"119","severity":1,"message":"167","line":347,"column":10,"nodeType":"121","messageId":"122","endLine":347,"endColumn":29},{"ruleId":"119","severity":1,"message":"168","line":347,"column":31,"nodeType":"121","messageId":"122","endLine":347,"endColumn":53},{"ruleId":"119","severity":1,"message":"169","line":350,"column":10,"nodeType":"121","messageId":"122","endLine":350,"endColumn":20},{"ruleId":"119","severity":1,"message":"170","line":350,"column":22,"nodeType":"121","messageId":"122","endLine":350,"endColumn":35},"@typescript-eslint/no-unused-vars","'extendTheme' is defined but never used.","Identifier","unusedVar","no-native-reassign",["171"],"no-negated-in-lhs",["172"],["171"],["172"],["171"],["172"],"'InputRightElement' is defined but never used.","'InputRightAddon' is defined but never used.","'_' is assigned a value but never used.","'useTheme' is defined but never used.","'TextProps' is defined but never used.","'Center' is defined but never used.","'NumberInputStepper' is defined but never used.","'NumberIncrementStepper' is defined but never used.","'NumberDecrementStepper' is defined but never used.","'Text' is defined but never used.","'PlusSquareIcon' is defined but never used.","'id' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component C_TypeAndValue must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'produce' is defined but never used.","'DocsCard' is defined but never used.","'QuestionOutlineIcon' is defined but never used.",["171"],["172"],"'Textarea' is defined but never used.","'ScaleFade' is defined but never used.","'Tabs' is defined but never used.","'TabList' is defined but never used.","'TabPanels' is defined but never used.","'Tab' is defined but never used.","'TabPanel' is defined but never used.","'AddIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'Card' is defined but never used.","'convertToRaw' is defined but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","'getFilteredTypeSuggestions' is assigned a value but never used.","'typeSuggestionsList' is assigned a value but never used.","'setTypeSuggestionsList' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setInputValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]