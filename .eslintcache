[{"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx":"1","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx":"2","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts":"3","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts":"4","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx":"5","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/_App.js":"6","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx":"7","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx":"8","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx":"9"},{"size":837,"mtime":1606750026369,"results":"10","hashOfConfig":"11"},{"size":743,"mtime":1606395811243,"results":"12","hashOfConfig":"11"},{"size":5258,"mtime":1606395314403,"results":"13","hashOfConfig":"11"},{"size":416,"mtime":1606395314402,"results":"14","hashOfConfig":"11"},{"size":6939,"mtime":1606820742385,"results":"15","hashOfConfig":"11"},{"size":7738,"mtime":1606749524038,"results":"16","hashOfConfig":"11"},{"size":8129,"mtime":1606822372185,"results":"17","hashOfConfig":"11"},{"size":343,"mtime":1606814035751,"results":"18","hashOfConfig":"11"},{"size":764,"mtime":1606820213222,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"5rdob7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx",[],["42","43"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts",[],["44","45"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx",["46","47"],"import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport type { IfunctionView } from './interfaces'\nimport { Code, Badge, Text } from '@chakra-ui/react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TreeView from '@material-ui/lab/TreeView'\nimport TreeItem from '@material-ui/lab/TreeItem'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ArrowForwardIcon,\n} from '@chakra-ui/icons'\nimport './cloneStyles.css'\nimport TypeBadge from './TypeBadge'\n\nconst useTreeViewStyles = makeStyles({\n  root: {\n    height: '100%',\n    flex: 1,\n  },\n})\n\ntype ItypeView = {\n  name: string\n  type: string\n  typeParameters?: Array<string>\n}\n\ntype IsideBarItem =\n  | {\n      nodeId: 'functions'\n      label: 'Functions'\n      items: Array<IfunctionView>\n    }\n  | {\n      nodeId: 'types'\n      label: 'Types'\n      items: Array<ItypeView>\n    }\n\nexport default function SideBar({\n  items,\n  isAnyItemDragging,\n}: {\n  items?: Array<IsideBarItem>\n  isAnyItemDragging?: boolean\n}) {\n  const { root } = useTreeViewStyles()\n\n  return (\n    <TreeView\n      aria-label='Functions and types'\n      className={root}\n      defaultCollapseIcon={<ChevronDownIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {items &&\n        items.map(item => {\n          return (\n            <TreeItem nodeId={item.nodeId} label={item.label}>\n              {(() => {\n                switch (item.nodeId) {\n                  case 'functions':\n                    return item.items.map((innerItem, i) => (\n                      <FunctionTreeItem\n                        {...innerItem}\n                        nodeId={item.nodeId + i}\n                        isAnyItemDragging={!!isAnyItemDragging}\n                      />\n                    ))\n                  case 'types':\n                    return item.items.map((innerItem, i) => (\n                      <TypeTreeItem\n                        {...innerItem}\n                        nodeId={item.nodeId + i}\n                        isAnyItemDragging={!!isAnyItemDragging}\n                      />\n                    ))\n                  default:\n                    let x: never = item\n                }\n              })()}\n            </TreeItem>\n          )\n        })}\n    </TreeView>\n  )\n}\nconst getRenderItem = (props: IfunctionView) => (\n  provided: any,\n  snapshot: any,\n  rubric: any,\n) => {\n  return (\n    <ul\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n    >\n      <li>\n        <Text wrap='nowrap'>\n          <Code /*backgroundColor='white'*/>{props.name}</Code>\n          <Text as='span'>:</Text>\n          <Text as={'span'} flexWrap='nowrap'>\n            {props.parameterTypes.map((p, i) => (\n              <Text as='span' key={i}>\n                <TypeBadge>{p}</TypeBadge>{' '}\n                <Text as='span'>\n                  {' '}\n                  <ArrowForwardIcon />{' '}\n                </Text>\n              </Text>\n            ))}\n          </Text>\n          <Text as='span'>\n            <TypeBadge>{props.returnType}</TypeBadge>\n          </Text>\n        </Text>\n      </li>\n    </ul>\n  )\n}\nconst useTreeItemStyles = makeStyles({\n  root: {\n    marginBottom: '5px',\n  },\n  content: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n      cursor: 'grabbing',\n    },\n  },\n})\nconst FunctionTreeItem = (\n  props: IfunctionView & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { root, content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      classes={{ root, content: props.isAnyItemDragging ? content : undefined }}\n      nodeId={props.nodeId}\n      label={\n        <Droppable\n          droppableId={props.nodeId}\n          renderClone={getRenderItem(props)}\n          isDropDisabled={true}\n        >\n          {(provided, snapshot) => {\n            const shouldRenderClone =\n              props.nodeId === snapshot.draggingFromThisWith\n            return (\n              <ul ref={provided.innerRef} {...provided.droppableProps}>\n                {shouldRenderClone ? (\n                  <li className='react-beautiful-dnd-copy'>\n                    <Text wrap='nowrap'>\n                      <Code /*backgroundColor='white'*/>{props.name}</Code>\n                      <Text as='span'> : </Text>\n                      <Text as={'span'} flexWrap='nowrap'>\n                        {props.parameterTypes.map((p, i) => (\n                          <Text as='span' key={i}>\n                            <TypeBadge>{p}</TypeBadge>{' '}\n                            <Text as='span'>\n                              {' '}\n                              <ArrowForwardIcon />{' '}\n                            </Text>\n                          </Text>\n                        ))}\n                      </Text>\n                      <Text as='span'>\n                        <TypeBadge>{props.returnType}</TypeBadge>\n                      </Text>\n                    </Text>\n                  </li>\n                ) : (\n                  <Draggable draggableId={props.nodeId} index={0}>\n                    {(provided, snapshot) => {\n                      return (\n                        <li\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <Text wrap='nowrap'>\n                            <Code /*backgroundColor='white'*/>\n                              {props.name}\n                            </Code>\n                            <Text as='span'> : </Text>\n                            <Text as={'span'} flexWrap='nowrap'>\n                              {props.parameterTypes.map((p, i) => (\n                                <Text as='span' key={i}>\n                                  <TypeBadge>{p}</TypeBadge>{' '}\n                                  <Text as='span'>\n                                    {' '}\n                                    <ArrowForwardIcon />{' '}\n                                  </Text>\n                                </Text>\n                              ))}\n                            </Text>\n                            <Text as='span'>\n                              <TypeBadge>{props.returnType}</TypeBadge>\n                            </Text>\n                          </Text>\n                        </li>\n                      )\n                    }}\n                  </Draggable>\n                )}\n              </ul>\n            )\n          }}\n        </Droppable>\n      }\n    ></TreeItem>\n  )\n}\nconst TypeTreeItem = (\n  props: ItypeView & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      nodeId={props.nodeId}\n      classes={{ content: props.isAnyItemDragging ? content : undefined }}\n      label={`${props.type} ${props.name}`}\n    />\n  )\n}\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/_App.js",["48"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx",["72"],"import * as React from 'react'\nimport { Code } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\nconst TypeBadge = ({ children, ...rest }: { children: Itype }) => {\n  return (\n    <Code\n      colorScheme={(() => {\n        switch (children) {\n          case 'string':\n            return 'yellow'\n          case 'number':\n            return 'green'\n          case 'boolean':\n            return 'blue'\n          case 'function':\n            return 'purple'\n          case 'object':\n            return 'red'\n          case 'undefined':\n            return 'black'\n          case 'null':\n            return 'black'\n          default:\n            let x: never = children\n        }\n      })()}\n    >\n      {children}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"73","replacedBy":"77"},{"ruleId":"75","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":4,"column":16,"nodeType":"81","messageId":"82","endLine":4,"endColumn":21},{"ruleId":"79","severity":1,"message":"83","line":80,"column":25,"nodeType":"81","messageId":"82","endLine":80,"endColumn":33},{"ruleId":"84","severity":1,"message":"85","line":40,"column":7,"nodeType":"81","messageId":"82","endLine":40,"endColumn":11},{"ruleId":"79","severity":1,"message":"86","line":3,"column":16,"nodeType":"81","messageId":"82","endLine":3,"endColumn":20},{"ruleId":"79","severity":1,"message":"87","line":11,"column":3,"nodeType":"81","messageId":"82","endLine":11,"endColumn":9},{"ruleId":"79","severity":1,"message":"88","line":17,"column":3,"nodeType":"81","messageId":"82","endLine":17,"endColumn":8},{"ruleId":"79","severity":1,"message":"89","line":18,"column":3,"nodeType":"81","messageId":"82","endLine":18,"endColumn":7},{"ruleId":"79","severity":1,"message":"90","line":19,"column":3,"nodeType":"81","messageId":"82","endLine":19,"endColumn":13},{"ruleId":"79","severity":1,"message":"91","line":20,"column":3,"nodeType":"81","messageId":"82","endLine":20,"endColumn":11},{"ruleId":"79","severity":1,"message":"92","line":21,"column":3,"nodeType":"81","messageId":"82","endLine":21,"endColumn":11},{"ruleId":"79","severity":1,"message":"93","line":22,"column":3,"nodeType":"81","messageId":"82","endLine":22,"endColumn":17},{"ruleId":"79","severity":1,"message":"94","line":23,"column":3,"nodeType":"81","messageId":"82","endLine":23,"endColumn":12},{"ruleId":"79","severity":1,"message":"95","line":24,"column":3,"nodeType":"81","messageId":"82","endLine":24,"endColumn":18},{"ruleId":"79","severity":1,"message":"96","line":25,"column":3,"nodeType":"81","messageId":"82","endLine":25,"endColumn":11},{"ruleId":"79","severity":1,"message":"97","line":26,"column":3,"nodeType":"81","messageId":"82","endLine":26,"endColumn":14},{"ruleId":"79","severity":1,"message":"98","line":27,"column":3,"nodeType":"81","messageId":"82","endLine":27,"endColumn":14},{"ruleId":"79","severity":1,"message":"99","line":28,"column":3,"nodeType":"81","messageId":"82","endLine":28,"endColumn":13},{"ruleId":"79","severity":1,"message":"100","line":29,"column":3,"nodeType":"81","messageId":"82","endLine":29,"endColumn":17},{"ruleId":"79","severity":1,"message":"101","line":30,"column":3,"nodeType":"81","messageId":"82","endLine":30,"endColumn":18},{"ruleId":"79","severity":1,"message":"102","line":32,"column":3,"nodeType":"81","messageId":"82","endLine":32,"endColumn":7},{"ruleId":"79","severity":1,"message":"103","line":33,"column":3,"nodeType":"81","messageId":"82","endLine":33,"endColumn":11},{"ruleId":"79","severity":1,"message":"104","line":34,"column":3,"nodeType":"81","messageId":"82","endLine":34,"endColumn":7},{"ruleId":"79","severity":1,"message":"105","line":38,"column":10,"nodeType":"81","messageId":"82","endLine":38,"endColumn":27},{"ruleId":"79","severity":1,"message":"106","line":56,"column":5,"nodeType":"81","messageId":"82","endLine":56,"endColumn":11},{"ruleId":"79","severity":1,"message":"107","line":173,"column":10,"nodeType":"81","messageId":"82","endLine":173,"endColumn":16},{"ruleId":"79","severity":1,"message":"108","line":209,"column":15,"nodeType":"81","messageId":"82","endLine":209,"endColumn":21},{"ruleId":"79","severity":1,"message":"83","line":24,"column":17,"nodeType":"81","messageId":"82","endLine":24,"endColumn":25},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],["109"],["110"],"@typescript-eslint/no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'x' is assigned a value but never used.","no-unused-vars","'grid' is assigned a value but never used.","'uuid' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","'Menu' is defined but never used.","'MenuButton' is defined but never used.","'MenuList' is defined but never used.","'MenuItem' is defined but never used.","'MenuItemOption' is defined but never used.","'MenuGroup' is defined but never used.","'MenuOptionGroup' is defined but never used.","'MenuIcon' is defined but never used.","'MenuCommand' is defined but never used.","'MenuDivider' is defined but never used.","'InputGroup' is defined but never used.","'InputLeftAddon' is defined but never used.","'InputRightAddon' is defined but never used.","'Grid' is defined but never used.","'GridItem' is defined but never used.","'Text' is defined but never used.","'ColorModeSwitcher' is defined but never used.","'result' is assigned a value but never used.","'Editor' is defined but never used.","'setFns' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]