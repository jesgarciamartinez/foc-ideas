[{"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx":"1","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx":"2","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts":"3","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts":"4","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx":"5","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx":"6","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx":"7","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx":"8","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx":"9","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx":"10","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts":"11","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx":"12","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx":"13","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx":"14","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts":"15","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx":"16"},{"size":953,"mtime":1607783634378,"results":"17","hashOfConfig":"18"},{"size":743,"mtime":1606395811243,"results":"19","hashOfConfig":"18"},{"size":5258,"mtime":1606395314403,"results":"20","hashOfConfig":"18"},{"size":416,"mtime":1606395314402,"results":"21","hashOfConfig":"18"},{"size":13017,"mtime":1607991445460,"results":"22","hashOfConfig":"18"},{"size":5065,"mtime":1608003307243,"results":"23","hashOfConfig":"18"},{"size":364,"mtime":1608042156142,"results":"24","hashOfConfig":"18"},{"size":1337,"mtime":1607962977962,"results":"25","hashOfConfig":"18"},{"size":13672,"mtime":1608042333904,"results":"26","hashOfConfig":"18"},{"size":605,"mtime":1606852903166,"results":"27","hashOfConfig":"18"},{"size":8513,"mtime":1608044831909,"results":"28","hashOfConfig":"18"},{"size":870,"mtime":1608005300285,"results":"29","hashOfConfig":"18"},{"size":1292,"mtime":1607922509708,"results":"30","hashOfConfig":"18"},{"size":393,"mtime":1607635865658,"results":"31","hashOfConfig":"18"},{"size":2033,"mtime":1607865814484,"results":"32","hashOfConfig":"18"},{"size":16531,"mtime":1608045162049,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"5rdob7",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/index.tsx",["75"],"import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ColorModeScript, extendTheme, ChakraProvider } from '@chakra-ui/react'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n",["76","77"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/ColorModeSwitcher.tsx",[],["78","79"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/serviceWorker.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/reportWebVitals.ts",[],["80","81"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Sidebar.tsx",["82","83","84","85"],"import * as React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport type { Ieffect, Itype, Ifunction } from './interfaces'\nimport {\n  Box,\n  Code,\n  forwardRef,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Text,\n  Kbd,\n  ListItem,\n  UnorderedList,\n  Center,\n  useTheme,\n  InputRightElement,\n  InputRightAddon,\n  HStack,\n} from '@chakra-ui/react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TreeView from '@material-ui/lab/TreeView'\nimport TreeItem from '@material-ui/lab/TreeItem'\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  ArrowForwardIcon,\n  SearchIcon,\n} from '@chakra-ui/icons'\nimport { FaShapes } from 'react-icons/fa'\n// import { VscSymbolMisc as FaShapes } from 'react-icons/vsc'\nimport { GiMineExplosion } from 'react-icons/gi'\n// import { IoShapes } from 'react-icons/io' //RiFunctionLine, RiFunctionFill //IoShapesOutline\nimport './sideBarStyles.css'\nimport TypeBadge from './TypeBadge'\nimport { Action } from '../state'\nimport MouseTrap from 'mousetrap'\n// import { FlowFunctionView } from './FlowCard'\nimport PopoverExplanation from './PopoverExplanation'\n\ntype IsideBarItem =\n  | {\n      nodeId: 'functions'\n      label: 'Functions'\n      items: Array<Ifunction>\n    }\n  | {\n      nodeId: 'types'\n      label: 'Data Types'\n      items: Array<Itype>\n    }\n  | {\n      nodeId: 'effects'\n      label: 'Effects'\n      items: Array<Ieffect>\n    }\n\nconst FunctionItem = (props: Ifunction) => {\n  return (\n    <Text\n      wrap='nowrap'\n      color='unison.purple'\n      _hover={{ color: 'unison.lightPurple' }}\n    >\n      <Code\n        fontSize='sm'\n        // fontWeight='700'\n        paddingX={1}\n        paddingY={0.5}\n        rounded='base'\n        backgroundColor='transparent'\n        color='inherit'\n      >\n        {props.name}\n      </Code>\n      <Text as='span'>: </Text>\n      <Text as={'span'} flexWrap='nowrap'>\n        {props.parameters.map((p, i) => (\n          <Text as='span' key={i}>\n            <TypeBadge typeAsString={p.type} />\n            <ArrowForwardIcon marginX={1} />\n          </Text>\n        ))}\n      </Text>\n      <TypeBadge typeAsString={props.returns.type} />\n    </Text>\n  )\n}\n\nconst getFunctionRenderItem = (props: Ifunction) => (\n  provided: any,\n  snapshot: any,\n  rubric: any,\n) => {\n  return (\n    <div\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n    >\n      <div>\n        <FunctionItem {...props} />\n        {/* <FlowFunctionView item={{ ...props }} /> */}\n      </div>\n    </div>\n  )\n}\nconst useTreeItemStyles = makeStyles({\n  root: {\n    marginBottom: '5px',\n  },\n  content: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n      cursor: 'grabbing',\n    },\n  },\n})\n\nconst FunctionTreeItem = (\n  props: Ifunction & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { root, content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      classes={{ root, content: props.isAnyItemDragging ? content : undefined }}\n      nodeId={props.nodeId}\n      label={\n        <Droppable\n          droppableId={props.nodeId}\n          renderClone={getFunctionRenderItem(props)}\n          isDropDisabled={true}\n        >\n          {(provided, snapshot) => {\n            const shouldRenderClone =\n              props.nodeId === snapshot.draggingFromThisWith\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {shouldRenderClone ? (\n                  <div className='react-beautiful-dnd-copy'>\n                    <FunctionItem {...props}></FunctionItem>\n                  </div>\n                ) : (\n                  <Draggable draggableId={props.nodeId} index={0}>\n                    {(provided, snapshot) => {\n                      return (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <FunctionItem {...props}></FunctionItem>\n                        </div>\n                      )\n                    }}\n                  </Draggable>\n                )}\n                {/* {provided.placeholder} */}\n              </div>\n            )\n          }}\n        </Droppable>\n      }\n    ></TreeItem>\n  )\n}\nconst TypeTreeItem = (\n  props: Itype & { nodeId: string; isAnyItemDragging: boolean },\n) => {\n  const { content } = useTreeItemStyles()\n  return (\n    <TreeItem\n      nodeId={props.nodeId}\n      classes={{ content: props.isAnyItemDragging ? content : undefined }}\n      label={<TypeBadge typeAsString={props.type}></TypeBadge>}\n    />\n  )\n}\n\nconst Sidebar = React.memo(\n  forwardRef(\n    (\n      {\n        items,\n        isAnyItemDragging,\n        dispatch,\n        searchValue,\n      }: {\n        items: Array<IsideBarItem>\n        isAnyItemDragging: boolean\n        dispatch: React.Dispatch<Action>\n        searchValue: string\n      },\n      ref,\n    ) => {\n      const theme = useTheme()\n      const {\n        colors: {\n          unison: { purple, lightPurple, pink },\n        },\n      } = theme\n\n      //Search\n      const [isHoveringSearch, setIsHoveringSearch] = React.useState(false)\n      const onMouseEnterSearch = React.useCallback(() => {\n        setIsHoveringSearch(true)\n      }, [])\n      const onMouseLeaveSearch = React.useCallback(() => {\n        setIsHoveringSearch(false)\n      }, [])\n\n      return (\n        <Box height='100%' flex={1} backgroundColor={'purple.50'}>\n          <InputGroup\n            width='100%'\n            whiteSpace='nowrap'\n            padding={1}\n            display='flex'\n            onMouseEnter={onMouseEnterSearch}\n            onMouseLeave={onMouseLeaveSearch}\n            // _focusWithin={{ color: 'teal.600' }}\n          >\n            <InputLeftElement\n              pointerEvents='none'\n              children={<SearchIcon color={purple} />} //TODO teal\n            />\n            <Input\n              ref={ref}\n              placeholder='Search'\n              variant='outline'\n              _hover={{ borderBottomColor: lightPurple }}\n              focusBorderColor={'unison.aqua'}\n              size='md'\n              borderRadius='0%'\n              borderTop='none'\n              borderLeft='none'\n              borderRight='none'\n              borderBottom={`2px solid ${purple}`}\n              value={searchValue}\n              onFocus={() => {\n                if (!ref || !('current' in ref)) return\n                ref.current.setSelectionRange(0, ref.current.value.length)\n              }}\n              onChange={e =>\n                dispatch({ type: 'sideBarSearch', value: e.target.value })\n              }\n            />\n            {isHoveringSearch ? (\n              <HStack\n                background='transparent'\n                position='absolute'\n                right={2}\n                top={2}\n                pointerEvents='none'\n              >\n                <Kbd>ctrl</Kbd>\n                <Text>/</Text>\n                <Kbd>⌘</Kbd>\n                <Text>+</Text>\n                <Kbd>B</Kbd>\n              </HStack>\n            ) : null}\n          </InputGroup>\n          <Center>\n            <PopoverExplanation label='Sidebar explanation' title='Sidebar'>\n              <UnorderedList>\n                <ListItem>\n                  Drag functions and drop them onto Flow Card or Docs Card\n                </ListItem>\n                <ListItem>\n                  <Kbd>up</Kbd>, <Kbd>down</Kbd>, <Kbd>left</Kbd>,{' '}\n                  <Kbd>right</Kbd> to move in Sidebar\n                </ListItem>\n                <ListItem>\n                  <Kbd>space</Kbd> to drag, <Kbd>right</Kbd> then{' '}\n                  <Kbd>space</Kbd> to drop\n                </ListItem>\n                <ListItem>\n                  Datatypes and Effects are not interactive at this point\n                </ListItem>\n              </UnorderedList>\n            </PopoverExplanation>\n          </Center>\n\n          <TreeView\n            selected={[]}\n            aria-label='Functions, types and effects'\n            defaultCollapseIcon={<ChevronDownIcon color='unison.purple' />}\n            defaultExpandIcon={<ChevronRightIcon color='unison.purple' />}\n            onNodeFocus={(e, v) => {\n              const draggable: any = document.querySelector(\n                `[data-rbd-draggable-id=\"${v}\"]`,\n              )\n\n              if (draggable) {\n                const focused = document.querySelectorAll('.Mui-focused')\n                focused.forEach(e => {\n                  e.classList.remove('Mui-focused')\n                })\n                const div =\n                  draggable.parentElement?.parentElement?.parentElement\n                const li = div?.parentElement\n                const parentMenu =\n                  li?.parentElement?.parentElement?.parentElement?.parentElement\n                const previous = li?.previousElementSibling\n                const next = li?.nextElementSibling\n\n                if (!draggable.bound) {\n                  draggable.bound = true\n                  MouseTrap(draggable).bind('left', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    div?.classList.remove('Mui-focused')\n                    parentMenu?.focus()\n                  })\n                  MouseTrap(draggable).bind('down', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (next) {\n                      next.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.nextElementSibling?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                  MouseTrap(draggable).bind('up', e => {\n                    if (isAnyItemDragging) {\n                      return\n                    }\n                    if (previous) {\n                      previous.focus()\n                      div?.classList.remove('Mui-focused')\n                    } else {\n                      parentMenu?.focus()\n                      div?.classList.remove('Mui-focused')\n                    }\n                  })\n                }\n\n                div?.classList.add('Mui-focused')\n                draggable.focus()\n              }\n            }}\n          >\n            {items &&\n              items.map(item => {\n                const label = (\n                  <Text fontSize='lg' color={'unison.purple'}>\n                    {item.label}\n                  </Text>\n                )\n                return (\n                  <TreeItem\n                    nodeId={item.nodeId}\n                    key={item.nodeId}\n                    label={\n                      <HStack>\n                        {item.nodeId === 'functions' ? (\n                          <Text fontWeight='bold' fontSize='xl' color={purple}>\n                            λ\n                          </Text>\n                        ) : item.nodeId === 'types' ? (\n                          <FaShapes color={purple} />\n                        ) : item.nodeId === 'effects' ? (\n                          <GiMineExplosion color={purple} />\n                        ) : null}\n                        {label}\n                      </HStack>\n                    }\n                  >\n                    {(() => {\n                      switch (item.nodeId) {\n                        case 'functions':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.name}`\n                            return (\n                              <FunctionTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'types':\n                          return item.items.map(innerItem => {\n                            const id = `${item.nodeId}_${innerItem.type}`\n                            return (\n                              <TypeTreeItem\n                                {...innerItem}\n                                key={id}\n                                nodeId={id}\n                                isAnyItemDragging={!!isAnyItemDragging}\n                              />\n                            )\n                          })\n                        case 'effects':\n                          return null //@TODO\n                        default:\n                          let _: never = item\n                      }\n                    })()}\n                  </TreeItem>\n                )\n              })}\n          </TreeView>\n        </Box>\n      )\n    },\n  ),\n)\n\nexport default Sidebar\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/App.tsx",["86"],"import * as React from 'react'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport { useTheme, useToken } from '@chakra-ui/react'\nimport SideBar from './components/Sidebar'\nimport CardHStack from './components/CardHStack'\nimport SplitPane from 'react-split-pane'\nimport FlowCard from './components/FlowCard'\nimport { useAppReducer } from './state'\nimport DocsCard from './components/DocsCard'\nimport { matchSorter } from 'match-sorter'\nimport './styles.css'\nimport { HotKeys } from 'react-hotkeys'\n\nexport const App = () => {\n  const [state, dispatch] = useAppReducer()\n  const onDragEnd = React.useCallback(\n    dropResult => {\n      console.log({ dropResult })\n      if (\n        //SideBar to FlowCard\n        dropResult.source.droppableId !== 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromSideBarOnFlowCard',\n          index: dropResult.destination.index,\n          draggableId: dropResult.draggableId,\n        })\n      } else if (\n        // FlowCard to FlowCard\n        dropResult.source.droppableId === 'FlowCard' &&\n        dropResult.destination?.droppableId === 'FlowCard'\n      ) {\n        dispatch({\n          type: 'dropFnFromFlowCardToFlowCard',\n          sourceIndex: dropResult.source.index,\n          destinationIndex: dropResult.destination.index,\n        })\n      } else if (dropResult.destination?.droppableId === 'DocsCard') {\n        dispatch({\n          type: 'dropFnFromSideBarToDocsCard',\n          draggableId: dropResult.draggableId,\n        })\n      } else {\n        dispatch({ type: 'dropOutside' })\n\n        //Regain focus after dropping outside - TODO does not work if dragged and esc pressed\n        const li: any = document.querySelector(\n          `[id$='${dropResult.draggableId}']`,\n        )\n        if (li) {\n          li.focus()\n        }\n      }\n    },\n    [dispatch],\n  )\n  const sideBarRef = React.useRef()\n  const purple = useToken('colors', 'unison.purple')\n\n  return (\n    <HotKeys //TODO substitute for mousetrap + useEffect\n      keyMap={{ focusSidebar: ['ctrl+b', 'command+b'] }} //TODO parameterize\n      handlers={{\n        focusSidebar() {\n          let a = sideBarRef as any\n          a.current.focus()\n        },\n      }}\n    >\n      <DragDropContext\n        onDragStart={() => {\n          dispatch({ type: 'isDragging' })\n        }}\n        onDragEnd={onDragEnd}\n      >\n        <SplitPane\n          style={{\n            // overflow: 'auto',\n            height: '100vh',\n            borderTop: `6px solid ${purple}`,\n          }}\n          defaultSize='20%'\n          minSize={100}\n          maxSize={-300}\n          split='vertical'\n        >\n          <SideBar\n            ref={sideBarRef}\n            searchValue={state.searchValue}\n            dispatch={dispatch}\n            isAnyItemDragging={state.isSideBarItemDragging}\n            items={[\n              {\n                nodeId: 'functions',\n                label: 'Functions',\n                items: matchSorter(state.functions, state.searchValue, {\n                  keys: ['name'],\n                }),\n              },\n              {\n                nodeId: 'types',\n                label: 'Data Types',\n                items: matchSorter(state.dataTypes, state.searchValue, {\n                  keys: ['type'],\n                }),\n              },\n              {\n                nodeId: 'effects',\n                label: 'Effects',\n                items: matchSorter(state.effects, state.searchValue, {\n                  keys: ['name'],\n                }),\n              },\n            ]}\n          ></SideBar>\n          <CardHStack>\n            <FlowCard\n              items={state.flowCardFunctions}\n              dispatch={dispatch}\n              name=''\n            ></FlowCard>\n            {state.docCards.map((doc, i) => {\n              const func =\n                doc.type === 'editing'\n                  ? state.functions.find(f => f.name === doc.fnName)\n                  : undefined\n              return (\n                <DocsCard key={i} index={i} func={func} dispatch={dispatch} />\n              )\n            })}\n            {/* <Card>\n              <form>\n                <InputGroup size='sm'>\n                  <InputLeftAddon>\n                    <Code>function</Code>\n                  </InputLeftAddon>\n                  <Input></Input>\n                  <InputRightAddon>\n                    <Code>(</Code>\n                  </InputRightAddon>\n                </InputGroup>\n                <Menu isOpen={true}>\n                  <MenuButton as={Button}>Type</MenuButton>\n                  <MenuList>\n                    <MenuItem>+ New Type</MenuItem>\n                    <MenuItem>String</MenuItem>\n                    <MenuItem>Number</MenuItem>\n                  </MenuList>\n                </Menu>\n              </form>\n            </Card>\n            <Card>\n              <Editor></Editor>\n            </Card> */}\n          </CardHStack>\n        </SplitPane>\n      </DragDropContext>\n    </HotKeys>\n  )\n}\n//\"calc(100vh - 3rem)\"\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/CardHStack.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/TypeBadge.tsx",["87","88"],"import * as React from 'react'\nimport { Code, CodeProps, TextProps, useTheme } from '@chakra-ui/react'\nimport { Itype } from './interfaces'\n\nconst TypeBadge = ({\n  typeAsString,\n  // fontSize,\n  as,\n  children,\n}: {\n  typeAsString: Itype['type']\n  // fontSize?: CodeProps['fontSize']\n  as?: CodeProps['as']\n  children?: any\n  // rest?: CodeProps\n}) => {\n  // const {\n  //   colors: {\n  //     unison: { orange, yellow },\n  //   },\n  // } = useTheme()\n\n  return (\n    <Code\n      as={as}\n      // fontSize={fontSize}\n      // paddingX={1}\n      // paddingY={0.5}\n      sx={\n        {\n          string: { color: 'unison.darkOrange', backgroundColor: 'yellow.100' },\n          number: {\n            color: 'unison.darkGreen',\n            backgroundColor: 'green.100',\n          },\n          boolean: { color: 'unison.pink', backgroundColor: 'pink.100' },\n          function: { color: 'unison.purple', backgroundColor: 'purple.100' },\n          object: { color: 'black', backgroundColor: 'gray.100' },\n          array: { color: 'black', backgroundColor: 'gray.100' },\n          undefined: { color: 'black', backgroundColor: 'gray.100' },\n          null: { color: 'black', backgroundColor: 'gray.100' },\n        }[typeAsString]\n      }\n      rounded={'base'}\n    >\n      {children ?? typeAsString}\n    </Code>\n  )\n}\n\nexport default TypeBadge\n","/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/FlowCard.tsx",["89","90","91","92","93","94","95","96","97","98"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Card.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/state.ts",["99","100"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/Editor.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/PopoverExplanation.tsx",["101"],"import { QuestionIcon, QuestionOutlineIcon } from '@chakra-ui/icons'\nimport {\n  Popover,\n  PopoverTrigger,\n  IconButton,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverBody,\n  PopoverHeader,\n  PopoverBodyProps,\n  Tooltip,\n} from '@chakra-ui/react'\nimport React from 'react'\n\nconst PopoverExplanation = (props: {\n  children: PopoverBodyProps['children']\n  label: string\n  title: string\n}) => {\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <IconButton\n          aria-label={props.label}\n          icon={\n            <Tooltip label={props.label} aria-label={props.label} hasArrow>\n              {/* <QuestionOutlineIcon /> */}\n              <QuestionIcon />\n            </Tooltip>\n          }\n          size='lg'\n          colorScheme='purple'\n          color='unison.purple'\n          variant='ghost'\n          sx={{\n            '&:hover': {\n              color: 'unison.aqua',\n            },\n          }}\n        />\n      </PopoverTrigger>\n\n      {/* <PopoverContent borderColor='unison.purple'> */}\n      <PopoverContent>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader>{props.title}</PopoverHeader>\n        <PopoverBody>{props.children}</PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport default PopoverExplanation\n",["102","103"],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/EditableText.tsx",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/theme.ts",[],"/Users/jesusgarciamartinez/Desktop/new-documents/projects/unison-job-application/my-app/src/components/DocsCard.tsx",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],{"ruleId":"125","severity":1,"message":"126","line":3,"column":27,"nodeType":"127","messageId":"128","endLine":3,"endColumn":38},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"129","replacedBy":"133"},{"ruleId":"131","replacedBy":"134"},{"ruleId":"129","replacedBy":"135"},{"ruleId":"131","replacedBy":"136"},{"ruleId":"125","severity":1,"message":"137","line":17,"column":3,"nodeType":"127","messageId":"128","endLine":17,"endColumn":20},{"ruleId":"125","severity":1,"message":"138","line":18,"column":3,"nodeType":"127","messageId":"128","endLine":18,"endColumn":18},{"ruleId":"125","severity":1,"message":"139","line":200,"column":42,"nodeType":"127","messageId":"128","endLine":200,"endColumn":46},{"ruleId":"125","severity":1,"message":"140","line":404,"column":31,"nodeType":"127","messageId":"128","endLine":404,"endColumn":39},{"ruleId":"125","severity":1,"message":"141","line":3,"column":10,"nodeType":"127","messageId":"128","endLine":3,"endColumn":18},{"ruleId":"125","severity":1,"message":"142","line":2,"column":27,"nodeType":"127","messageId":"128","endLine":2,"endColumn":36},{"ruleId":"125","severity":1,"message":"141","line":2,"column":38,"nodeType":"127","messageId":"128","endLine":2,"endColumn":46},{"ruleId":"125","severity":1,"message":"143","line":7,"column":3,"nodeType":"127","messageId":"128","endLine":7,"endColumn":9},{"ruleId":"125","severity":1,"message":"144","line":18,"column":3,"nodeType":"127","messageId":"128","endLine":18,"endColumn":21},{"ruleId":"125","severity":1,"message":"145","line":19,"column":3,"nodeType":"127","messageId":"128","endLine":19,"endColumn":25},{"ruleId":"125","severity":1,"message":"146","line":20,"column":3,"nodeType":"127","messageId":"128","endLine":20,"endColumn":25},{"ruleId":"125","severity":1,"message":"147","line":22,"column":3,"nodeType":"127","messageId":"128","endLine":22,"endColumn":7},{"ruleId":"125","severity":1,"message":"148","line":31,"column":3,"nodeType":"127","messageId":"128","endLine":31,"endColumn":17},{"ruleId":"125","severity":1,"message":"149","line":195,"column":34,"nodeType":"127","messageId":"128","endLine":195,"endColumn":36},{"ruleId":"150","severity":1,"message":"151","line":289,"column":25,"nodeType":"152","endLine":293,"endColumn":27},{"ruleId":"150","severity":1,"message":"151","line":304,"column":17,"nodeType":"152","endLine":309,"endColumn":19},{"ruleId":"150","severity":1,"message":"151","line":312,"column":15,"nodeType":"152","endLine":317,"endColumn":17},{"ruleId":"125","severity":1,"message":"153","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":15},{"ruleId":"125","severity":1,"message":"154","line":5,"column":8,"nodeType":"127","messageId":"128","endLine":5,"endColumn":16},{"ruleId":"125","severity":1,"message":"155","line":1,"column":24,"nodeType":"127","messageId":"128","endLine":1,"endColumn":43},{"ruleId":"129","replacedBy":"156"},{"ruleId":"131","replacedBy":"157"},{"ruleId":"125","severity":1,"message":"158","line":8,"column":3,"nodeType":"127","messageId":"128","endLine":8,"endColumn":11},{"ruleId":"125","severity":1,"message":"159","line":18,"column":3,"nodeType":"127","messageId":"128","endLine":18,"endColumn":12},{"ruleId":"125","severity":1,"message":"160","line":20,"column":10,"nodeType":"127","messageId":"128","endLine":20,"endColumn":14},{"ruleId":"125","severity":1,"message":"161","line":20,"column":16,"nodeType":"127","messageId":"128","endLine":20,"endColumn":23},{"ruleId":"125","severity":1,"message":"162","line":20,"column":25,"nodeType":"127","messageId":"128","endLine":20,"endColumn":34},{"ruleId":"125","severity":1,"message":"163","line":20,"column":36,"nodeType":"127","messageId":"128","endLine":20,"endColumn":39},{"ruleId":"125","severity":1,"message":"164","line":20,"column":41,"nodeType":"127","messageId":"128","endLine":20,"endColumn":49},{"ruleId":"125","severity":1,"message":"165","line":22,"column":3,"nodeType":"127","messageId":"128","endLine":22,"endColumn":10},{"ruleId":"125","severity":1,"message":"166","line":23,"column":3,"nodeType":"127","messageId":"128","endLine":23,"endColumn":19},{"ruleId":"125","severity":1,"message":"167","line":27,"column":8,"nodeType":"127","messageId":"128","endLine":27,"endColumn":12},{"ruleId":"125","severity":1,"message":"168","line":43,"column":3,"nodeType":"127","messageId":"128","endLine":43,"endColumn":15},{"ruleId":"125","severity":1,"message":"169","line":56,"column":7,"nodeType":"127","messageId":"128","endLine":56,"endColumn":33},{"ruleId":"125","severity":1,"message":"170","line":61,"column":7,"nodeType":"127","messageId":"128","endLine":61,"endColumn":17},{"ruleId":"125","severity":1,"message":"171","line":207,"column":9,"nodeType":"127","messageId":"128","endLine":207,"endColumn":29},{"ruleId":"125","severity":1,"message":"172","line":210,"column":9,"nodeType":"127","messageId":"128","endLine":210,"endColumn":22},{"ruleId":"125","severity":1,"message":"173","line":213,"column":13,"nodeType":"127","messageId":"128","endLine":213,"endColumn":18},{"ruleId":"125","severity":1,"message":"174","line":218,"column":9,"nodeType":"127","messageId":"128","endLine":218,"endColumn":17},{"ruleId":"125","severity":1,"message":"175","line":276,"column":10,"nodeType":"127","messageId":"128","endLine":276,"endColumn":29},{"ruleId":"125","severity":1,"message":"176","line":276,"column":31,"nodeType":"127","messageId":"128","endLine":276,"endColumn":53},{"ruleId":"125","severity":1,"message":"177","line":279,"column":10,"nodeType":"127","messageId":"128","endLine":279,"endColumn":20},{"ruleId":"125","severity":1,"message":"178","line":279,"column":22,"nodeType":"127","messageId":"128","endLine":279,"endColumn":35},"@typescript-eslint/no-unused-vars","'extendTheme' is defined but never used.","Identifier","unusedVar","no-native-reassign",["179"],"no-negated-in-lhs",["180"],["179"],["180"],["179"],["180"],"'InputRightElement' is defined but never used.","'InputRightAddon' is defined but never used.","'pink' is assigned a value but never used.","'_' is assigned a value but never used.","'useTheme' is defined but never used.","'TextProps' is defined but never used.","'Center' is defined but never used.","'NumberInputStepper' is defined but never used.","'NumberIncrementStepper' is defined but never used.","'NumberDecrementStepper' is defined but never used.","'Text' is defined but never used.","'PlusSquareIcon' is defined but never used.","'id' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component C_TypeAndValue must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'produce' is defined but never used.","'DocsCard' is defined but never used.","'QuestionOutlineIcon' is defined but never used.",["179"],["180"],"'Textarea' is defined but never used.","'ScaleFade' is defined but never used.","'Tabs' is defined but never used.","'TabList' is defined but never used.","'TabPanels' is defined but never used.","'Tab' is defined but never used.","'TabPanel' is defined but never used.","'AddIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'Card' is defined but never used.","'convertToRaw' is defined but never used.","'getFilteredTypeSuggestions' is assigned a value but never used.","'typeToName' is assigned a value but never used.","'descriptionEditorRef' is assigned a value but never used.","'onChangeParam' is assigned a value but never used.","'param' is assigned a value but never used.","'addParam' is assigned a value but never used.","'typeSuggestionsList' is assigned a value but never used.","'setTypeSuggestionsList' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setInputValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]